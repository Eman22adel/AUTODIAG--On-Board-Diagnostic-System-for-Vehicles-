
Diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006004  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08006114  08006114  00007114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  080061b8  080061b8  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061b8  080061b8  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061bc  080061bc  000071bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080061c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012dc  20000064  08006224  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001340  08006224  00008340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015965  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a6  00000000  00000000  0001d9f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00021098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f40  00000000  00000000  00022458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fbf  00000000  00000000  00023398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001812e  00000000  00000000  0003d357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094844  00000000  00000000  00055485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000538c  00000000  00000000  000e9d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ef098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	080060fc 	.word	0x080060fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	080060fc 	.word	0x080060fc

08000150 <HAL_DCM_Receive>:
#include "MASTER_BUS.h"


Return_Type HAL_DCM_Init(void);

Return_Type HAL_DCM_Receive(void){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	Return_Type Return_Result = Return_NOT_OK;
 8000156:	2300      	movs	r3, #0
 8000158:	71fb      	strb	r3, [r7, #7]
	if (HAL_COMH_Send() == Return_OK){
 800015a:	f004 fad1 	bl	8004700 <HAL_COMH_Send>
 800015e:	4603      	mov	r3, r0
 8000160:	2b01      	cmp	r3, #1
 8000162:	d101      	bne.n	8000168 <HAL_DCM_Receive+0x18>
		Return_Result = Return_OK;
 8000164:	2301      	movs	r3, #1
 8000166:	71fb      	strb	r3, [r7, #7]
	}
	return Return_Result;
 8000168:	79fb      	ldrb	r3, [r7, #7]
}
 800016a:	4618      	mov	r0, r3
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
	...

08000174 <HAL_DEM_MainFunction>:
static uint8_t First_Data_Done = 1;
extern SYSTEM_Data DATA;

Return_Type HAL_DEM_Init(void);

Return_Type HAL_DEM_MainFunction(void){
 8000174:	b480      	push	{r7}
 8000176:	af00      	add	r7, sp, #0
	 * DTC 1
	 *
	 *
	 * */

	if (((DATA.sensor7 >= THROTTLE_POS_RANG1 && DATA.sensor7 <= THROTTLE_POS_RANG2) ||
 8000178:	4b99      	ldr	r3, [pc, #612]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800017a:	899b      	ldrh	r3, [r3, #12]
 800017c:	f240 5231 	movw	r2, #1329	@ 0x531
 8000180:	4293      	cmp	r3, r2
 8000182:	d905      	bls.n	8000190 <HAL_DEM_MainFunction+0x1c>
 8000184:	4b96      	ldr	r3, [pc, #600]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000186:	899b      	ldrh	r3, [r3, #12]
 8000188:	f240 62e2 	movw	r2, #1762	@ 0x6e2
 800018c:	4293      	cmp	r3, r2
 800018e:	d90b      	bls.n	80001a8 <HAL_DEM_MainFunction+0x34>
			(DATA.sensor8 >= TIMING_ADVANCE_RANG1 && DATA.sensor8 <= TIMING_ADVANCE_RANG2))) {
 8000190:	4b93      	ldr	r3, [pc, #588]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000192:	89db      	ldrh	r3, [r3, #14]
	if (((DATA.sensor7 >= THROTTLE_POS_RANG1 && DATA.sensor7 <= THROTTLE_POS_RANG2) ||
 8000194:	f640 6241 	movw	r2, #3649	@ 0xe41
 8000198:	4293      	cmp	r3, r2
 800019a:	d915      	bls.n	80001c8 <HAL_DEM_MainFunction+0x54>
			(DATA.sensor8 >= TIMING_ADVANCE_RANG1 && DATA.sensor8 <= TIMING_ADVANCE_RANG2))) {
 800019c:	4b90      	ldr	r3, [pc, #576]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800019e:	89db      	ldrh	r3, [r3, #14]
 80001a0:	f241 0222 	movw	r2, #4130	@ 0x1022
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d80f      	bhi.n	80001c8 <HAL_DEM_MainFunction+0x54>
		DATA.DTC_1[0] = 'P';
 80001a8:	4b8d      	ldr	r3, [pc, #564]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001aa:	2250      	movs	r2, #80	@ 0x50
 80001ac:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 80001ae:	4b8c      	ldr	r3, [pc, #560]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001b0:	2230      	movs	r2, #48	@ 0x30
 80001b2:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80001b4:	4b8a      	ldr	r3, [pc, #552]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001b6:	2230      	movs	r2, #48	@ 0x30
 80001b8:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 80001ba:	4b89      	ldr	r3, [pc, #548]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001bc:	2237      	movs	r2, #55	@ 0x37
 80001be:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '9';
 80001c0:	4b87      	ldr	r3, [pc, #540]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001c2:	2239      	movs	r2, #57	@ 0x39
 80001c4:	751a      	strb	r2, [r3, #20]
 80001c6:	e11c      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG2 && DATA.sensor7 <= THROTTLE_POS_RANG3) ||
 80001c8:	4b85      	ldr	r3, [pc, #532]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001ca:	899b      	ldrh	r3, [r3, #12]
 80001cc:	f240 62e2 	movw	r2, #1762	@ 0x6e2
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d905      	bls.n	80001e0 <HAL_DEM_MainFunction+0x6c>
 80001d4:	4b82      	ldr	r3, [pc, #520]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001d6:	899b      	ldrh	r3, [r3, #12]
 80001d8:	f640 0292 	movw	r2, #2194	@ 0x892
 80001dc:	4293      	cmp	r3, r2
 80001de:	d90b      	bls.n	80001f8 <HAL_DEM_MainFunction+0x84>
			(DATA.sensor8 > TIMING_ADVANCE_RANG2 && DATA.sensor8 <= TIMING_ADVANCE_RANG3)) {
 80001e0:	4b7f      	ldr	r3, [pc, #508]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001e2:	89db      	ldrh	r3, [r3, #14]
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG2 && DATA.sensor7 <= THROTTLE_POS_RANG3) ||
 80001e4:	f241 0222 	movw	r2, #4130	@ 0x1022
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d915      	bls.n	8000218 <HAL_DEM_MainFunction+0xa4>
			(DATA.sensor8 > TIMING_ADVANCE_RANG2 && DATA.sensor8 <= TIMING_ADVANCE_RANG3)) {
 80001ec:	4b7c      	ldr	r3, [pc, #496]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001ee:	89db      	ldrh	r3, [r3, #14]
 80001f0:	f241 2202 	movw	r2, #4610	@ 0x1202
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d80f      	bhi.n	8000218 <HAL_DEM_MainFunction+0xa4>
		DATA.DTC_1[0] = 'P';
 80001f8:	4b79      	ldr	r3, [pc, #484]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80001fa:	2250      	movs	r2, #80	@ 0x50
 80001fc:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 80001fe:	4b78      	ldr	r3, [pc, #480]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000200:	2230      	movs	r2, #48	@ 0x30
 8000202:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 8000204:	4b76      	ldr	r3, [pc, #472]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000206:	2230      	movs	r2, #48	@ 0x30
 8000208:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 800020a:	4b75      	ldr	r3, [pc, #468]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800020c:	2237      	movs	r2, #55	@ 0x37
 800020e:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '8';
 8000210:	4b73      	ldr	r3, [pc, #460]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000212:	2238      	movs	r2, #56	@ 0x38
 8000214:	751a      	strb	r2, [r3, #20]
 8000216:	e0f4      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG3 && DATA.sensor7 <= THROTTLE_POS_RANG4) ||
 8000218:	4b71      	ldr	r3, [pc, #452]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800021a:	899b      	ldrh	r3, [r3, #12]
 800021c:	f640 0292 	movw	r2, #2194	@ 0x892
 8000220:	4293      	cmp	r3, r2
 8000222:	d905      	bls.n	8000230 <HAL_DEM_MainFunction+0xbc>
 8000224:	4b6e      	ldr	r3, [pc, #440]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000226:	899b      	ldrh	r3, [r3, #12]
 8000228:	f640 2242 	movw	r2, #2626	@ 0xa42
 800022c:	4293      	cmp	r3, r2
 800022e:	d90b      	bls.n	8000248 <HAL_DEM_MainFunction+0xd4>
			(DATA.sensor8 > TIMING_ADVANCE_RANG3 && DATA.sensor8 <= TIMING_ADVANCE_RANG4)) {
 8000230:	4b6b      	ldr	r3, [pc, #428]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000232:	89db      	ldrh	r3, [r3, #14]
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG3 && DATA.sensor7 <= THROTTLE_POS_RANG4) ||
 8000234:	f241 2202 	movw	r2, #4610	@ 0x1202
 8000238:	4293      	cmp	r3, r2
 800023a:	d915      	bls.n	8000268 <HAL_DEM_MainFunction+0xf4>
			(DATA.sensor8 > TIMING_ADVANCE_RANG3 && DATA.sensor8 <= TIMING_ADVANCE_RANG4)) {
 800023c:	4b68      	ldr	r3, [pc, #416]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800023e:	89db      	ldrh	r3, [r3, #14]
 8000240:	f241 32e2 	movw	r2, #5090	@ 0x13e2
 8000244:	4293      	cmp	r3, r2
 8000246:	d80f      	bhi.n	8000268 <HAL_DEM_MainFunction+0xf4>
		DATA.DTC_1[0] = 'P';
 8000248:	4b65      	ldr	r3, [pc, #404]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800024a:	2250      	movs	r2, #80	@ 0x50
 800024c:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 800024e:	4b64      	ldr	r3, [pc, #400]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000250:	2230      	movs	r2, #48	@ 0x30
 8000252:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 8000254:	4b62      	ldr	r3, [pc, #392]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000256:	2230      	movs	r2, #48	@ 0x30
 8000258:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 800025a:	4b61      	ldr	r3, [pc, #388]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800025c:	2237      	movs	r2, #55	@ 0x37
 800025e:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = 'E';
 8000260:	4b5f      	ldr	r3, [pc, #380]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000262:	2245      	movs	r2, #69	@ 0x45
 8000264:	751a      	strb	r2, [r3, #20]
 8000266:	e0cc      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG4 && DATA.sensor7 <= THROTTLE_POS_RANG5) ||
 8000268:	4b5d      	ldr	r3, [pc, #372]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800026a:	899b      	ldrh	r3, [r3, #12]
 800026c:	f640 2242 	movw	r2, #2626	@ 0xa42
 8000270:	4293      	cmp	r3, r2
 8000272:	d905      	bls.n	8000280 <HAL_DEM_MainFunction+0x10c>
 8000274:	4b5a      	ldr	r3, [pc, #360]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000276:	899b      	ldrh	r3, [r3, #12]
 8000278:	f640 32f2 	movw	r2, #3058	@ 0xbf2
 800027c:	4293      	cmp	r3, r2
 800027e:	d90b      	bls.n	8000298 <HAL_DEM_MainFunction+0x124>
			(DATA.sensor8 > TIMING_ADVANCE_RANG4 && DATA.sensor8 <= TIMING_ADVANCE_RANG5)) {
 8000280:	4b57      	ldr	r3, [pc, #348]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000282:	89db      	ldrh	r3, [r3, #14]
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG4 && DATA.sensor7 <= THROTTLE_POS_RANG5) ||
 8000284:	f241 32e2 	movw	r2, #5090	@ 0x13e2
 8000288:	4293      	cmp	r3, r2
 800028a:	d915      	bls.n	80002b8 <HAL_DEM_MainFunction+0x144>
			(DATA.sensor8 > TIMING_ADVANCE_RANG4 && DATA.sensor8 <= TIMING_ADVANCE_RANG5)) {
 800028c:	4b54      	ldr	r3, [pc, #336]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800028e:	89db      	ldrh	r3, [r3, #14]
 8000290:	f241 52c2 	movw	r2, #5570	@ 0x15c2
 8000294:	4293      	cmp	r3, r2
 8000296:	d80f      	bhi.n	80002b8 <HAL_DEM_MainFunction+0x144>
		DATA.DTC_1[0] = 'P';
 8000298:	4b51      	ldr	r3, [pc, #324]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800029a:	2250      	movs	r2, #80	@ 0x50
 800029c:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 800029e:	4b50      	ldr	r3, [pc, #320]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002a0:	2230      	movs	r2, #48	@ 0x30
 80002a2:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80002a4:	4b4e      	ldr	r3, [pc, #312]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002a6:	2230      	movs	r2, #48	@ 0x30
 80002a8:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 80002aa:	4b4d      	ldr	r3, [pc, #308]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002ac:	2237      	movs	r2, #55	@ 0x37
 80002ae:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = 'F';
 80002b0:	4b4b      	ldr	r3, [pc, #300]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002b2:	2246      	movs	r2, #70	@ 0x46
 80002b4:	751a      	strb	r2, [r3, #20]
 80002b6:	e0a4      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG5 && DATA.sensor7 <= THROTTLE_POS_RANG6) ||
 80002b8:	4b49      	ldr	r3, [pc, #292]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002ba:	899b      	ldrh	r3, [r3, #12]
 80002bc:	f640 32f2 	movw	r2, #3058	@ 0xbf2
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d905      	bls.n	80002d0 <HAL_DEM_MainFunction+0x15c>
 80002c4:	4b46      	ldr	r3, [pc, #280]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002c6:	899b      	ldrh	r3, [r3, #12]
 80002c8:	f640 52a2 	movw	r2, #3490	@ 0xda2
 80002cc:	4293      	cmp	r3, r2
 80002ce:	d90b      	bls.n	80002e8 <HAL_DEM_MainFunction+0x174>
			(DATA.sensor8 > TIMING_ADVANCE_RANG5 && DATA.sensor8 <= TIMING_ADVANCE_RANG6)) {
 80002d0:	4b43      	ldr	r3, [pc, #268]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002d2:	89db      	ldrh	r3, [r3, #14]
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG5 && DATA.sensor7 <= THROTTLE_POS_RANG6) ||
 80002d4:	f241 52c2 	movw	r2, #5570	@ 0x15c2
 80002d8:	4293      	cmp	r3, r2
 80002da:	d915      	bls.n	8000308 <HAL_DEM_MainFunction+0x194>
			(DATA.sensor8 > TIMING_ADVANCE_RANG5 && DATA.sensor8 <= TIMING_ADVANCE_RANG6)) {
 80002dc:	4b40      	ldr	r3, [pc, #256]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002de:	89db      	ldrh	r3, [r3, #14]
 80002e0:	f241 72a2 	movw	r2, #6050	@ 0x17a2
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d80f      	bhi.n	8000308 <HAL_DEM_MainFunction+0x194>
		DATA.DTC_1[0] = 'P';
 80002e8:	4b3d      	ldr	r3, [pc, #244]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002ea:	2250      	movs	r2, #80	@ 0x50
 80002ec:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 80002ee:	4b3c      	ldr	r3, [pc, #240]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002f0:	2230      	movs	r2, #48	@ 0x30
 80002f2:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80002f4:	4b3a      	ldr	r3, [pc, #232]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002f6:	2230      	movs	r2, #48	@ 0x30
 80002f8:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 80002fa:	4b39      	ldr	r3, [pc, #228]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80002fc:	2237      	movs	r2, #55	@ 0x37
 80002fe:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '8';
 8000300:	4b37      	ldr	r3, [pc, #220]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000302:	2238      	movs	r2, #56	@ 0x38
 8000304:	751a      	strb	r2, [r3, #20]
 8000306:	e07c      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG6 && DATA.sensor7 <= THROTTLE_POS_RANG7) ||
 8000308:	4b35      	ldr	r3, [pc, #212]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800030a:	899b      	ldrh	r3, [r3, #12]
 800030c:	f640 52a2 	movw	r2, #3490	@ 0xda2
 8000310:	4293      	cmp	r3, r2
 8000312:	d905      	bls.n	8000320 <HAL_DEM_MainFunction+0x1ac>
 8000314:	4b32      	ldr	r3, [pc, #200]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000316:	899b      	ldrh	r3, [r3, #12]
 8000318:	f640 7252 	movw	r2, #3922	@ 0xf52
 800031c:	4293      	cmp	r3, r2
 800031e:	d90b      	bls.n	8000338 <HAL_DEM_MainFunction+0x1c4>
			(DATA.sensor8 > TIMING_ADVANCE_RANG6 && DATA.sensor8 <= TIMING_ADVANCE_RANG7)) {
 8000320:	4b2f      	ldr	r3, [pc, #188]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000322:	89db      	ldrh	r3, [r3, #14]
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG6 && DATA.sensor7 <= THROTTLE_POS_RANG7) ||
 8000324:	f241 72a2 	movw	r2, #6050	@ 0x17a2
 8000328:	4293      	cmp	r3, r2
 800032a:	d915      	bls.n	8000358 <HAL_DEM_MainFunction+0x1e4>
			(DATA.sensor8 > TIMING_ADVANCE_RANG6 && DATA.sensor8 <= TIMING_ADVANCE_RANG7)) {
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800032e:	89db      	ldrh	r3, [r3, #14]
 8000330:	f641 1282 	movw	r2, #6530	@ 0x1982
 8000334:	4293      	cmp	r3, r2
 8000336:	d80f      	bhi.n	8000358 <HAL_DEM_MainFunction+0x1e4>
		DATA.DTC_1[0] = 'P';
 8000338:	4b29      	ldr	r3, [pc, #164]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800033a:	2250      	movs	r2, #80	@ 0x50
 800033c:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '1';
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000340:	2231      	movs	r2, #49	@ 0x31
 8000342:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 8000344:	4b26      	ldr	r3, [pc, #152]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000346:	2230      	movs	r2, #48	@ 0x30
 8000348:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '0';
 800034a:	4b25      	ldr	r3, [pc, #148]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800034c:	2230      	movs	r2, #48	@ 0x30
 800034e:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '4';
 8000350:	4b23      	ldr	r3, [pc, #140]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000352:	2234      	movs	r2, #52	@ 0x34
 8000354:	751a      	strb	r2, [r3, #20]
 8000356:	e054      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG7 && DATA.sensor7 <= THROTTLE_POS_RANG8) ||
 8000358:	4b21      	ldr	r3, [pc, #132]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800035a:	899b      	ldrh	r3, [r3, #12]
 800035c:	f640 7252 	movw	r2, #3922	@ 0xf52
 8000360:	4293      	cmp	r3, r2
 8000362:	d905      	bls.n	8000370 <HAL_DEM_MainFunction+0x1fc>
 8000364:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000366:	899b      	ldrh	r3, [r3, #12]
 8000368:	f241 1202 	movw	r2, #4354	@ 0x1102
 800036c:	4293      	cmp	r3, r2
 800036e:	d90b      	bls.n	8000388 <HAL_DEM_MainFunction+0x214>
			(DATA.sensor8 > TIMING_ADVANCE_RANG7 && DATA.sensor8 <= TIMING_ADVANCE_RANG8)) {
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000372:	89db      	ldrh	r3, [r3, #14]
	} else if ((DATA.sensor7 > THROTTLE_POS_RANG7 && DATA.sensor7 <= THROTTLE_POS_RANG8) ||
 8000374:	f641 1282 	movw	r2, #6530	@ 0x1982
 8000378:	4293      	cmp	r3, r2
 800037a:	d915      	bls.n	80003a8 <HAL_DEM_MainFunction+0x234>
			(DATA.sensor8 > TIMING_ADVANCE_RANG7 && DATA.sensor8 <= TIMING_ADVANCE_RANG8)) {
 800037c:	4b18      	ldr	r3, [pc, #96]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800037e:	89db      	ldrh	r3, [r3, #14]
 8000380:	f641 3262 	movw	r2, #7010	@ 0x1b62
 8000384:	4293      	cmp	r3, r2
 8000386:	d80f      	bhi.n	80003a8 <HAL_DEM_MainFunction+0x234>
		DATA.DTC_1[0] = 'P';
 8000388:	4b15      	ldr	r3, [pc, #84]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800038a:	2250      	movs	r2, #80	@ 0x50
 800038c:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '2';
 800038e:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000390:	2232      	movs	r2, #50	@ 0x32
 8000392:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 8000396:	2230      	movs	r2, #48	@ 0x30
 8000398:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '3';
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 800039c:	2233      	movs	r2, #51	@ 0x33
 800039e:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '6';
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003a2:	2236      	movs	r2, #54	@ 0x36
 80003a4:	751a      	strb	r2, [r3, #20]
 80003a6:	e02c      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
	}else if ((DATA.sensor7 > THROTTLE_POS_RANG8) ||
 80003a8:	4b0d      	ldr	r3, [pc, #52]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003aa:	899b      	ldrh	r3, [r3, #12]
 80003ac:	f241 1202 	movw	r2, #4354	@ 0x1102
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d805      	bhi.n	80003c0 <HAL_DEM_MainFunction+0x24c>
			(DATA.sensor8 > TIMING_ADVANCE_RANG8)) {
 80003b4:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003b6:	89db      	ldrh	r3, [r3, #14]
	}else if ((DATA.sensor7 > THROTTLE_POS_RANG8) ||
 80003b8:	f641 3262 	movw	r2, #7010	@ 0x1b62
 80003bc:	4293      	cmp	r3, r2
 80003be:	d911      	bls.n	80003e4 <HAL_DEM_MainFunction+0x270>

		DATA.DTC_1[0] = 'P';
 80003c0:	4b07      	ldr	r3, [pc, #28]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003c2:	2250      	movs	r2, #80	@ 0x50
 80003c4:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '2';
 80003c6:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003c8:	2232      	movs	r2, #50	@ 0x32
 80003ca:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80003cc:	4b04      	ldr	r3, [pc, #16]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003ce:	2230      	movs	r2, #48	@ 0x30
 80003d0:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '3';
 80003d2:	4b03      	ldr	r3, [pc, #12]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003d4:	2233      	movs	r2, #51	@ 0x33
 80003d6:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '6';
 80003d8:	4b01      	ldr	r3, [pc, #4]	@ (80003e0 <HAL_DEM_MainFunction+0x26c>)
 80003da:	2236      	movs	r2, #54	@ 0x36
 80003dc:	751a      	strb	r2, [r3, #20]
 80003de:	e010      	b.n	8000402 <HAL_DEM_MainFunction+0x28e>
 80003e0:	20000494 	.word	0x20000494

	} else {
		DATA.DTC_1[0] = 'P';
 80003e4:	4b83      	ldr	r3, [pc, #524]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80003e6:	2250      	movs	r2, #80	@ 0x50
 80003e8:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 80003ea:	4b82      	ldr	r3, [pc, #520]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80003ec:	2230      	movs	r2, #48	@ 0x30
 80003ee:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80003f0:	4b80      	ldr	r3, [pc, #512]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80003f2:	2230      	movs	r2, #48	@ 0x30
 80003f4:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '0';
 80003f6:	4b7f      	ldr	r3, [pc, #508]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80003f8:	2230      	movs	r2, #48	@ 0x30
 80003fa:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '0';
 80003fc:	4b7d      	ldr	r3, [pc, #500]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80003fe:	2230      	movs	r2, #48	@ 0x30
 8000400:	751a      	strb	r2, [r3, #20]
	 *
	 *
	 * */


	if (((DATA.sensor6 >= AIR_INTAKE_TEMP_RANG1 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG2) ||
 8000402:	4b7c      	ldr	r3, [pc, #496]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000404:	895b      	ldrh	r3, [r3, #10]
 8000406:	2b1b      	cmp	r3, #27
 8000408:	d903      	bls.n	8000412 <HAL_DEM_MainFunction+0x29e>
 800040a:	4b7a      	ldr	r3, [pc, #488]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800040c:	895b      	ldrh	r3, [r3, #10]
 800040e:	2b1f      	cmp	r3, #31
 8000410:	d907      	bls.n	8000422 <HAL_DEM_MainFunction+0x2ae>
			(DATA.sensor5 >= INTAKE_MANIFOLD_PRESSURE_RANG1 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG2))) {
 8000412:	4b78      	ldr	r3, [pc, #480]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000414:	891b      	ldrh	r3, [r3, #8]
	if (((DATA.sensor6 >= AIR_INTAKE_TEMP_RANG1 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG2) ||
 8000416:	2b19      	cmp	r3, #25
 8000418:	d913      	bls.n	8000442 <HAL_DEM_MainFunction+0x2ce>
			(DATA.sensor5 >= INTAKE_MANIFOLD_PRESSURE_RANG1 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG2))) {
 800041a:	4b76      	ldr	r3, [pc, #472]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800041c:	891b      	ldrh	r3, [r3, #8]
 800041e:	2b24      	cmp	r3, #36	@ 0x24
 8000420:	d80f      	bhi.n	8000442 <HAL_DEM_MainFunction+0x2ce>
		DATA.DTC_2[0] = 'P';
 8000422:	4b74      	ldr	r3, [pc, #464]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000424:	2250      	movs	r2, #80	@ 0x50
 8000426:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '1';
 8000428:	4b72      	ldr	r3, [pc, #456]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800042a:	2231      	movs	r2, #49	@ 0x31
 800042c:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '8';
 800042e:	4b71      	ldr	r3, [pc, #452]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000430:	2238      	movs	r2, #56	@ 0x38
 8000432:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = 'F';
 8000434:	4b6f      	ldr	r3, [pc, #444]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000436:	2246      	movs	r2, #70	@ 0x46
 8000438:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 800043a:	4b6e      	ldr	r3, [pc, #440]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800043c:	2230      	movs	r2, #48	@ 0x30
 800043e:	765a      	strb	r2, [r3, #25]
 8000440:	e0e9      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG2 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG3) ||
 8000442:	4b6c      	ldr	r3, [pc, #432]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000444:	895b      	ldrh	r3, [r3, #10]
 8000446:	2b1f      	cmp	r3, #31
 8000448:	d903      	bls.n	8000452 <HAL_DEM_MainFunction+0x2de>
 800044a:	4b6a      	ldr	r3, [pc, #424]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800044c:	895b      	ldrh	r3, [r3, #10]
 800044e:	2b22      	cmp	r3, #34	@ 0x22
 8000450:	d907      	bls.n	8000462 <HAL_DEM_MainFunction+0x2ee>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG2 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG3)) {
 8000452:	4b68      	ldr	r3, [pc, #416]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000454:	891b      	ldrh	r3, [r3, #8]
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG2 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG3) ||
 8000456:	2b24      	cmp	r3, #36	@ 0x24
 8000458:	d913      	bls.n	8000482 <HAL_DEM_MainFunction+0x30e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG2 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG3)) {
 800045a:	4b66      	ldr	r3, [pc, #408]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800045c:	891b      	ldrh	r3, [r3, #8]
 800045e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000460:	d80f      	bhi.n	8000482 <HAL_DEM_MainFunction+0x30e>
		DATA.DTC_2[0] = 'P';
 8000462:	4b64      	ldr	r3, [pc, #400]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000464:	2250      	movs	r2, #80	@ 0x50
 8000466:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '3';
 8000468:	4b62      	ldr	r3, [pc, #392]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800046a:	2233      	movs	r2, #51	@ 0x33
 800046c:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 800046e:	4b61      	ldr	r3, [pc, #388]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000470:	2230      	movs	r2, #48	@ 0x30
 8000472:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 8000474:	4b5f      	ldr	r3, [pc, #380]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000476:	2230      	movs	r2, #48	@ 0x30
 8000478:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 800047a:	4b5e      	ldr	r3, [pc, #376]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800047c:	2230      	movs	r2, #48	@ 0x30
 800047e:	765a      	strb	r2, [r3, #25]
 8000480:	e0c9      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG3 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG4) ||
 8000482:	4b5c      	ldr	r3, [pc, #368]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000484:	895b      	ldrh	r3, [r3, #10]
 8000486:	2b22      	cmp	r3, #34	@ 0x22
 8000488:	d903      	bls.n	8000492 <HAL_DEM_MainFunction+0x31e>
 800048a:	4b5a      	ldr	r3, [pc, #360]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800048c:	895b      	ldrh	r3, [r3, #10]
 800048e:	2b25      	cmp	r3, #37	@ 0x25
 8000490:	d907      	bls.n	80004a2 <HAL_DEM_MainFunction+0x32e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG3 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG4)) {
 8000492:	4b58      	ldr	r3, [pc, #352]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000494:	891b      	ldrh	r3, [r3, #8]
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG3 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG4) ||
 8000496:	2b2e      	cmp	r3, #46	@ 0x2e
 8000498:	d913      	bls.n	80004c2 <HAL_DEM_MainFunction+0x34e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG3 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG4)) {
 800049a:	4b56      	ldr	r3, [pc, #344]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800049c:	891b      	ldrh	r3, [r3, #8]
 800049e:	2b38      	cmp	r3, #56	@ 0x38
 80004a0:	d80f      	bhi.n	80004c2 <HAL_DEM_MainFunction+0x34e>
		DATA.DTC_2[0] = 'B';
 80004a2:	4b54      	ldr	r3, [pc, #336]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004a4:	2242      	movs	r2, #66	@ 0x42
 80004a6:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '3';
 80004a8:	4b52      	ldr	r3, [pc, #328]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004aa:	2233      	movs	r2, #51	@ 0x33
 80004ac:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 80004ae:	4b51      	ldr	r3, [pc, #324]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004b0:	2230      	movs	r2, #48	@ 0x30
 80004b2:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 80004b4:	4b4f      	ldr	r3, [pc, #316]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004b6:	2230      	movs	r2, #48	@ 0x30
 80004b8:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 80004ba:	4b4e      	ldr	r3, [pc, #312]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004bc:	2230      	movs	r2, #48	@ 0x30
 80004be:	765a      	strb	r2, [r3, #25]
 80004c0:	e0a9      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG4 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG5) ||
 80004c2:	4b4c      	ldr	r3, [pc, #304]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004c4:	895b      	ldrh	r3, [r3, #10]
 80004c6:	2b25      	cmp	r3, #37	@ 0x25
 80004c8:	d903      	bls.n	80004d2 <HAL_DEM_MainFunction+0x35e>
 80004ca:	4b4a      	ldr	r3, [pc, #296]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004cc:	895b      	ldrh	r3, [r3, #10]
 80004ce:	2b28      	cmp	r3, #40	@ 0x28
 80004d0:	d907      	bls.n	80004e2 <HAL_DEM_MainFunction+0x36e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG4 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG2)) {
 80004d2:	4b48      	ldr	r3, [pc, #288]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004d4:	891b      	ldrh	r3, [r3, #8]
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG4 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG5) ||
 80004d6:	2b38      	cmp	r3, #56	@ 0x38
 80004d8:	d913      	bls.n	8000502 <HAL_DEM_MainFunction+0x38e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG4 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG2)) {
 80004da:	4b46      	ldr	r3, [pc, #280]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004dc:	891b      	ldrh	r3, [r3, #8]
 80004de:	2b24      	cmp	r3, #36	@ 0x24
 80004e0:	d80f      	bhi.n	8000502 <HAL_DEM_MainFunction+0x38e>
		DATA.DTC_2[0] = 'P';
 80004e2:	4b44      	ldr	r3, [pc, #272]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004e4:	2250      	movs	r2, #80	@ 0x50
 80004e6:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '2';
 80004e8:	4b42      	ldr	r3, [pc, #264]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004ea:	2232      	movs	r2, #50	@ 0x32
 80004ec:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 80004ee:	4b41      	ldr	r3, [pc, #260]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004f0:	2230      	movs	r2, #48	@ 0x30
 80004f2:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '3';
 80004f4:	4b3f      	ldr	r3, [pc, #252]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004f6:	2233      	movs	r2, #51	@ 0x33
 80004f8:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '6';
 80004fa:	4b3e      	ldr	r3, [pc, #248]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80004fc:	2236      	movs	r2, #54	@ 0x36
 80004fe:	765a      	strb	r2, [r3, #25]
 8000500:	e089      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG5 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG6) ||
 8000502:	4b3c      	ldr	r3, [pc, #240]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000504:	895b      	ldrh	r3, [r3, #10]
 8000506:	2b28      	cmp	r3, #40	@ 0x28
 8000508:	d903      	bls.n	8000512 <HAL_DEM_MainFunction+0x39e>
 800050a:	4b3a      	ldr	r3, [pc, #232]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800050c:	895b      	ldrh	r3, [r3, #10]
 800050e:	2b2b      	cmp	r3, #43	@ 0x2b
 8000510:	d907      	bls.n	8000522 <HAL_DEM_MainFunction+0x3ae>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG2 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG2)) {
 8000512:	4b38      	ldr	r3, [pc, #224]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000514:	891b      	ldrh	r3, [r3, #8]
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG5 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG6) ||
 8000516:	2b24      	cmp	r3, #36	@ 0x24
 8000518:	d913      	bls.n	8000542 <HAL_DEM_MainFunction+0x3ce>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG2 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG2)) {
 800051a:	4b36      	ldr	r3, [pc, #216]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800051c:	891b      	ldrh	r3, [r3, #8]
 800051e:	2b24      	cmp	r3, #36	@ 0x24
 8000520:	d80f      	bhi.n	8000542 <HAL_DEM_MainFunction+0x3ce>
		DATA.DTC_2[0] = 'P';
 8000522:	4b34      	ldr	r3, [pc, #208]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000524:	2250      	movs	r2, #80	@ 0x50
 8000526:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '2';
 8000528:	4b32      	ldr	r3, [pc, #200]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800052a:	2232      	movs	r2, #50	@ 0x32
 800052c:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 800052e:	4b31      	ldr	r3, [pc, #196]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000530:	2230      	movs	r2, #48	@ 0x30
 8000532:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '3';
 8000534:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000536:	2233      	movs	r2, #51	@ 0x33
 8000538:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '6';
 800053a:	4b2e      	ldr	r3, [pc, #184]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800053c:	2236      	movs	r2, #54	@ 0x36
 800053e:	765a      	strb	r2, [r3, #25]
 8000540:	e069      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG6 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG7) ||
 8000542:	4b2c      	ldr	r3, [pc, #176]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000544:	895b      	ldrh	r3, [r3, #10]
 8000546:	2b2b      	cmp	r3, #43	@ 0x2b
 8000548:	d903      	bls.n	8000552 <HAL_DEM_MainFunction+0x3de>
 800054a:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800054c:	895b      	ldrh	r3, [r3, #10]
 800054e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000550:	d907      	bls.n	8000562 <HAL_DEM_MainFunction+0x3ee>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG2 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG7)) {
 8000552:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000554:	891b      	ldrh	r3, [r3, #8]
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG6 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG7) ||
 8000556:	2b24      	cmp	r3, #36	@ 0x24
 8000558:	d913      	bls.n	8000582 <HAL_DEM_MainFunction+0x40e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG2 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG7)) {
 800055a:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800055c:	891b      	ldrh	r3, [r3, #8]
 800055e:	2b56      	cmp	r3, #86	@ 0x56
 8000560:	d80f      	bhi.n	8000582 <HAL_DEM_MainFunction+0x40e>
		DATA.DTC_2[0] = 'C';
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000564:	2243      	movs	r2, #67	@ 0x43
 8000566:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '1';
 8000568:	4b22      	ldr	r3, [pc, #136]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800056a:	2231      	movs	r2, #49	@ 0x31
 800056c:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 800056e:	4b21      	ldr	r3, [pc, #132]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000570:	2230      	movs	r2, #48	@ 0x30
 8000572:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 8000574:	4b1f      	ldr	r3, [pc, #124]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '4';
 800057a:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800057c:	2234      	movs	r2, #52	@ 0x34
 800057e:	765a      	strb	r2, [r3, #25]
 8000580:	e049      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG7 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG8) ||
 8000582:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000584:	895b      	ldrh	r3, [r3, #10]
 8000586:	2b2e      	cmp	r3, #46	@ 0x2e
 8000588:	d903      	bls.n	8000592 <HAL_DEM_MainFunction+0x41e>
 800058a:	4b1a      	ldr	r3, [pc, #104]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800058c:	895b      	ldrh	r3, [r3, #10]
 800058e:	2b31      	cmp	r3, #49	@ 0x31
 8000590:	d907      	bls.n	80005a2 <HAL_DEM_MainFunction+0x42e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG7 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG8)) {
 8000592:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 8000594:	891b      	ldrh	r3, [r3, #8]
	} else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG7 && DATA.sensor6 <= AIR_INTAKE_TEMP_RANG8) ||
 8000596:	2b56      	cmp	r3, #86	@ 0x56
 8000598:	d913      	bls.n	80005c2 <HAL_DEM_MainFunction+0x44e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG7 && DATA.sensor5 <= INTAKE_MANIFOLD_PRESSURE_RANG8)) {
 800059a:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 800059c:	891b      	ldrh	r3, [r3, #8]
 800059e:	2b60      	cmp	r3, #96	@ 0x60
 80005a0:	d80f      	bhi.n	80005c2 <HAL_DEM_MainFunction+0x44e>
		DATA.DTC_2[0] = 'U';
 80005a2:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005a4:	2255      	movs	r2, #85	@ 0x55
 80005a6:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '1';
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005aa:	2231      	movs	r2, #49	@ 0x31
 80005ac:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005b0:	2230      	movs	r2, #48	@ 0x30
 80005b2:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '4';
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005bc:	2234      	movs	r2, #52	@ 0x34
 80005be:	765a      	strb	r2, [r3, #25]
 80005c0:	e029      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
	}else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG8) ||
 80005c2:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005c4:	895b      	ldrh	r3, [r3, #10]
 80005c6:	2b31      	cmp	r3, #49	@ 0x31
 80005c8:	d803      	bhi.n	80005d2 <HAL_DEM_MainFunction+0x45e>
			(DATA.sensor5 > INTAKE_MANIFOLD_PRESSURE_RANG8)) {
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005cc:	891b      	ldrh	r3, [r3, #8]
	}else if ((DATA.sensor6 > AIR_INTAKE_TEMP_RANG8) ||
 80005ce:	2b60      	cmp	r3, #96	@ 0x60
 80005d0:	d912      	bls.n	80005f8 <HAL_DEM_MainFunction+0x484>
		DATA.DTC_2[0] = 'P';
 80005d2:	4b08      	ldr	r3, [pc, #32]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005d4:	2250      	movs	r2, #80	@ 0x50
 80005d6:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '2';
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005da:	2232      	movs	r2, #50	@ 0x32
 80005dc:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 80005de:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005e0:	2230      	movs	r2, #48	@ 0x30
 80005e2:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 80005e4:	4b03      	ldr	r3, [pc, #12]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '4';
 80005ea:	4b02      	ldr	r3, [pc, #8]	@ (80005f4 <HAL_DEM_MainFunction+0x480>)
 80005ec:	2234      	movs	r2, #52	@ 0x34
 80005ee:	765a      	strb	r2, [r3, #25]
 80005f0:	e011      	b.n	8000616 <HAL_DEM_MainFunction+0x4a2>
 80005f2:	bf00      	nop
 80005f4:	20000494 	.word	0x20000494
	} else {
		DATA.DTC_2[0] = 'P';
 80005f8:	4b95      	ldr	r3, [pc, #596]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80005fa:	2250      	movs	r2, #80	@ 0x50
 80005fc:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '0';
 80005fe:	4b94      	ldr	r3, [pc, #592]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000600:	2230      	movs	r2, #48	@ 0x30
 8000602:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 8000604:	4b92      	ldr	r3, [pc, #584]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 800060a:	4b91      	ldr	r3, [pc, #580]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800060c:	2230      	movs	r2, #48	@ 0x30
 800060e:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 8000610:	4b8f      	ldr	r3, [pc, #572]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000612:	2230      	movs	r2, #48	@ 0x30
 8000614:	765a      	strb	r2, [r3, #25]
	 * DTC 3
	 *
	 *
	 * */

	if (((DATA.sensor2 >= ENGINE_COOLANT_TEMP_RANG1 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG2) ||
 8000616:	4b8e      	ldr	r3, [pc, #568]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000618:	885b      	ldrh	r3, [r3, #2]
 800061a:	2b2b      	cmp	r3, #43	@ 0x2b
 800061c:	d903      	bls.n	8000626 <HAL_DEM_MainFunction+0x4b2>
 800061e:	4b8c      	ldr	r3, [pc, #560]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000620:	885b      	ldrh	r3, [r3, #2]
 8000622:	2b33      	cmp	r3, #51	@ 0x33
 8000624:	d916      	bls.n	8000654 <HAL_DEM_MainFunction+0x4e0>
			(DATA.sensor3 >= ENGINE_LOAD_RANG1 && DATA.sensor3 <= ENGINE_LOAD_RANG2) ||
 8000626:	4b8a      	ldr	r3, [pc, #552]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000628:	889b      	ldrh	r3, [r3, #4]
	if (((DATA.sensor2 >= ENGINE_COOLANT_TEMP_RANG1 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG2) ||
 800062a:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800062e:	d305      	bcc.n	800063c <HAL_DEM_MainFunction+0x4c8>
			(DATA.sensor3 >= ENGINE_LOAD_RANG1 && DATA.sensor3 <= ENGINE_LOAD_RANG2) ||
 8000630:	4b87      	ldr	r3, [pc, #540]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	f640 22e3 	movw	r2, #2787	@ 0xae3
 8000638:	4293      	cmp	r3, r2
 800063a:	d90b      	bls.n	8000654 <HAL_DEM_MainFunction+0x4e0>
			(DATA.sensor4 >= ENGINE_RPM_RANG1 && DATA.sensor4 <= ENGINE_RPM_RANG2))) {
 800063c:	4b84      	ldr	r3, [pc, #528]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800063e:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 >= ENGINE_LOAD_RANG1 && DATA.sensor3 <= ENGINE_LOAD_RANG2) ||
 8000640:	f240 22c2 	movw	r2, #706	@ 0x2c2
 8000644:	4293      	cmp	r3, r2
 8000646:	d915      	bls.n	8000674 <HAL_DEM_MainFunction+0x500>
			(DATA.sensor4 >= ENGINE_RPM_RANG1 && DATA.sensor4 <= ENGINE_RPM_RANG2))) {
 8000648:	4b81      	ldr	r3, [pc, #516]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800064a:	88db      	ldrh	r3, [r3, #6]
 800064c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8000650:	4293      	cmp	r3, r2
 8000652:	d80f      	bhi.n	8000674 <HAL_DEM_MainFunction+0x500>
		DATA.DTC_3[0] = 'P';
 8000654:	4b7e      	ldr	r3, [pc, #504]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000656:	2250      	movs	r2, #80	@ 0x50
 8000658:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '3';
 800065a:	4b7d      	ldr	r3, [pc, #500]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800065c:	2233      	movs	r2, #51	@ 0x33
 800065e:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 8000660:	4b7b      	ldr	r3, [pc, #492]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000662:	2230      	movs	r2, #48	@ 0x30
 8000664:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 8000666:	4b7a      	ldr	r3, [pc, #488]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000668:	2230      	movs	r2, #48	@ 0x30
 800066a:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 800066c:	4b78      	ldr	r3, [pc, #480]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800066e:	2230      	movs	r2, #48	@ 0x30
 8000670:	779a      	strb	r2, [r3, #30]
 8000672:	e14e      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG2 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG3) ||
 8000674:	4b76      	ldr	r3, [pc, #472]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000676:	885b      	ldrh	r3, [r3, #2]
 8000678:	2b33      	cmp	r3, #51	@ 0x33
 800067a:	d903      	bls.n	8000684 <HAL_DEM_MainFunction+0x510>
 800067c:	4b74      	ldr	r3, [pc, #464]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800067e:	885b      	ldrh	r3, [r3, #2]
 8000680:	2b3a      	cmp	r3, #58	@ 0x3a
 8000682:	d916      	bls.n	80006b2 <HAL_DEM_MainFunction+0x53e>
			(DATA.sensor3 > ENGINE_LOAD_RANG2 && DATA.sensor3 <= ENGINE_LOAD_RANG3) ||
 8000684:	4b72      	ldr	r3, [pc, #456]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000686:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG2 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG3) ||
 8000688:	f640 22e3 	movw	r2, #2787	@ 0xae3
 800068c:	4293      	cmp	r3, r2
 800068e:	d905      	bls.n	800069c <HAL_DEM_MainFunction+0x528>
			(DATA.sensor3 > ENGINE_LOAD_RANG2 && DATA.sensor3 <= ENGINE_LOAD_RANG3) ||
 8000690:	4b6f      	ldr	r3, [pc, #444]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000692:	889b      	ldrh	r3, [r3, #4]
 8000694:	f640 62be 	movw	r2, #3774	@ 0xebe
 8000698:	4293      	cmp	r3, r2
 800069a:	d90a      	bls.n	80006b2 <HAL_DEM_MainFunction+0x53e>
			(DATA.sensor4 > ENGINE_RPM_RANG2 && DATA.sensor4 <= ENGINE_RPM_RANG3)) {
 800069c:	4b6c      	ldr	r3, [pc, #432]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800069e:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG2 && DATA.sensor3 <= ENGINE_LOAD_RANG3) ||
 80006a0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d914      	bls.n	80006d2 <HAL_DEM_MainFunction+0x55e>
			(DATA.sensor4 > ENGINE_RPM_RANG2 && DATA.sensor4 <= ENGINE_RPM_RANG3)) {
 80006a8:	4b69      	ldr	r3, [pc, #420]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006aa:	88db      	ldrh	r3, [r3, #6]
 80006ac:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 80006b0:	d20f      	bcs.n	80006d2 <HAL_DEM_MainFunction+0x55e>
		DATA.DTC_3[0] = 'P';
 80006b2:	4b67      	ldr	r3, [pc, #412]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006b4:	2250      	movs	r2, #80	@ 0x50
 80006b6:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '3';
 80006b8:	4b65      	ldr	r3, [pc, #404]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006ba:	2233      	movs	r2, #51	@ 0x33
 80006bc:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 80006be:	4b64      	ldr	r3, [pc, #400]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006c0:	2230      	movs	r2, #48	@ 0x30
 80006c2:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 80006c4:	4b62      	ldr	r3, [pc, #392]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006c6:	2230      	movs	r2, #48	@ 0x30
 80006c8:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 80006ca:	4b61      	ldr	r3, [pc, #388]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006cc:	2230      	movs	r2, #48	@ 0x30
 80006ce:	779a      	strb	r2, [r3, #30]
 80006d0:	e11f      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG3 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG4) ||
 80006d2:	4b5f      	ldr	r3, [pc, #380]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006d4:	885b      	ldrh	r3, [r3, #2]
 80006d6:	2b3a      	cmp	r3, #58	@ 0x3a
 80006d8:	d903      	bls.n	80006e2 <HAL_DEM_MainFunction+0x56e>
 80006da:	4b5d      	ldr	r3, [pc, #372]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006dc:	885b      	ldrh	r3, [r3, #2]
 80006de:	2b41      	cmp	r3, #65	@ 0x41
 80006e0:	d916      	bls.n	8000710 <HAL_DEM_MainFunction+0x59c>
			(DATA.sensor3 > ENGINE_LOAD_RANG3 && DATA.sensor3 <= ENGINE_LOAD_RANG4) ||
 80006e2:	4b5b      	ldr	r3, [pc, #364]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006e4:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG3 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG4) ||
 80006e6:	f640 62be 	movw	r2, #3774	@ 0xebe
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d905      	bls.n	80006fa <HAL_DEM_MainFunction+0x586>
			(DATA.sensor3 > ENGINE_LOAD_RANG3 && DATA.sensor3 <= ENGINE_LOAD_RANG4) ||
 80006ee:	4b58      	ldr	r3, [pc, #352]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006f0:	889b      	ldrh	r3, [r3, #4]
 80006f2:	f241 2299 	movw	r2, #4761	@ 0x1299
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d90a      	bls.n	8000710 <HAL_DEM_MainFunction+0x59c>
			(DATA.sensor4 > ENGINE_RPM_RANG3 && DATA.sensor4 <= ENGINE_RPM_RANG4)) {
 80006fa:	4b55      	ldr	r3, [pc, #340]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80006fc:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG3 && DATA.sensor3 <= ENGINE_LOAD_RANG4) ||
 80006fe:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8000702:	d315      	bcc.n	8000730 <HAL_DEM_MainFunction+0x5bc>
			(DATA.sensor4 > ENGINE_RPM_RANG3 && DATA.sensor4 <= ENGINE_RPM_RANG4)) {
 8000704:	4b52      	ldr	r3, [pc, #328]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000706:	88db      	ldrh	r3, [r3, #6]
 8000708:	f240 624d 	movw	r2, #1613	@ 0x64d
 800070c:	4293      	cmp	r3, r2
 800070e:	d80f      	bhi.n	8000730 <HAL_DEM_MainFunction+0x5bc>
		DATA.DTC_3[0] = 'P';
 8000710:	4b4f      	ldr	r3, [pc, #316]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000712:	2250      	movs	r2, #80	@ 0x50
 8000714:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '3';
 8000716:	4b4e      	ldr	r3, [pc, #312]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000718:	2233      	movs	r2, #51	@ 0x33
 800071a:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 800071c:	4b4c      	ldr	r3, [pc, #304]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800071e:	2230      	movs	r2, #48	@ 0x30
 8000720:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 8000722:	4b4b      	ldr	r3, [pc, #300]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000724:	2230      	movs	r2, #48	@ 0x30
 8000726:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 8000728:	4b49      	ldr	r3, [pc, #292]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	779a      	strb	r2, [r3, #30]
 800072e:	e0f0      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG4 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG5) ||
 8000730:	4b47      	ldr	r3, [pc, #284]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000732:	885b      	ldrh	r3, [r3, #2]
 8000734:	2b41      	cmp	r3, #65	@ 0x41
 8000736:	d903      	bls.n	8000740 <HAL_DEM_MainFunction+0x5cc>
 8000738:	4b45      	ldr	r3, [pc, #276]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800073a:	885b      	ldrh	r3, [r3, #2]
 800073c:	2b48      	cmp	r3, #72	@ 0x48
 800073e:	d917      	bls.n	8000770 <HAL_DEM_MainFunction+0x5fc>
			(DATA.sensor3 > ENGINE_LOAD_RANG4 && DATA.sensor3 <= ENGINE_LOAD_RANG5) ||
 8000740:	4b43      	ldr	r3, [pc, #268]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000742:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG4 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG5) ||
 8000744:	f241 2299 	movw	r2, #4761	@ 0x1299
 8000748:	4293      	cmp	r3, r2
 800074a:	d905      	bls.n	8000758 <HAL_DEM_MainFunction+0x5e4>
			(DATA.sensor3 > ENGINE_LOAD_RANG4 && DATA.sensor3 <= ENGINE_LOAD_RANG5) ||
 800074c:	4b40      	ldr	r3, [pc, #256]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800074e:	889b      	ldrh	r3, [r3, #4]
 8000750:	f241 6274 	movw	r2, #5748	@ 0x1674
 8000754:	4293      	cmp	r3, r2
 8000756:	d90b      	bls.n	8000770 <HAL_DEM_MainFunction+0x5fc>
			(DATA.sensor4 > ENGINE_RPM_RANG4 && DATA.sensor4 <= ENGINE_RPM_RANG5)) {
 8000758:	4b3d      	ldr	r3, [pc, #244]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800075a:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG4 && DATA.sensor3 <= ENGINE_LOAD_RANG5) ||
 800075c:	f240 624d 	movw	r2, #1613	@ 0x64d
 8000760:	4293      	cmp	r3, r2
 8000762:	d915      	bls.n	8000790 <HAL_DEM_MainFunction+0x61c>
			(DATA.sensor4 > ENGINE_RPM_RANG4 && DATA.sensor4 <= ENGINE_RPM_RANG5)) {
 8000764:	4b3a      	ldr	r3, [pc, #232]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000766:	88db      	ldrh	r3, [r3, #6]
 8000768:	f240 727b 	movw	r2, #1915	@ 0x77b
 800076c:	4293      	cmp	r3, r2
 800076e:	d80f      	bhi.n	8000790 <HAL_DEM_MainFunction+0x61c>
		DATA.DTC_3[0] = 'P';
 8000770:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000772:	2250      	movs	r2, #80	@ 0x50
 8000774:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '1';
 8000776:	4b36      	ldr	r3, [pc, #216]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000778:	2231      	movs	r2, #49	@ 0x31
 800077a:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '8';
 800077c:	4b34      	ldr	r3, [pc, #208]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800077e:	2238      	movs	r2, #56	@ 0x38
 8000780:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = 'E';
 8000782:	4b33      	ldr	r3, [pc, #204]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000784:	2245      	movs	r2, #69	@ 0x45
 8000786:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 8000788:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800078a:	2230      	movs	r2, #48	@ 0x30
 800078c:	779a      	strb	r2, [r3, #30]
 800078e:	e0c0      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG5 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG6) ||
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000792:	885b      	ldrh	r3, [r3, #2]
 8000794:	2b48      	cmp	r3, #72	@ 0x48
 8000796:	d903      	bls.n	80007a0 <HAL_DEM_MainFunction+0x62c>
 8000798:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	2b4f      	cmp	r3, #79	@ 0x4f
 800079e:	d917      	bls.n	80007d0 <HAL_DEM_MainFunction+0x65c>
			(DATA.sensor3 > ENGINE_LOAD_RANG5 && DATA.sensor3 <= ENGINE_LOAD_RANG6) ||
 80007a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007a2:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG5 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG6) ||
 80007a4:	f241 6274 	movw	r2, #5748	@ 0x1674
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d905      	bls.n	80007b8 <HAL_DEM_MainFunction+0x644>
			(DATA.sensor3 > ENGINE_LOAD_RANG5 && DATA.sensor3 <= ENGINE_LOAD_RANG6) ||
 80007ac:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	f641 224f 	movw	r2, #6735	@ 0x1a4f
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d90b      	bls.n	80007d0 <HAL_DEM_MainFunction+0x65c>
			(DATA.sensor4 > ENGINE_RPM_RANG5 && DATA.sensor4 <= ENGINE_RPM_RANG6)) {
 80007b8:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007ba:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG5 && DATA.sensor3 <= ENGINE_LOAD_RANG6) ||
 80007bc:	f240 727b 	movw	r2, #1915	@ 0x77b
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d915      	bls.n	80007f0 <HAL_DEM_MainFunction+0x67c>
			(DATA.sensor4 > ENGINE_RPM_RANG5 && DATA.sensor4 <= ENGINE_RPM_RANG6)) {
 80007c4:	4b22      	ldr	r3, [pc, #136]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007c6:	88db      	ldrh	r3, [r3, #6]
 80007c8:	f640 02a9 	movw	r2, #2217	@ 0x8a9
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d80f      	bhi.n	80007f0 <HAL_DEM_MainFunction+0x67c>
		DATA.DTC_3[0] = 'P';
 80007d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007d2:	2250      	movs	r2, #80	@ 0x50
 80007d4:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '1';
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007d8:	2231      	movs	r2, #49	@ 0x31
 80007da:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '8';
 80007dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007de:	2238      	movs	r2, #56	@ 0x38
 80007e0:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = 'D';
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007e4:	2244      	movs	r2, #68	@ 0x44
 80007e6:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007ea:	2230      	movs	r2, #48	@ 0x30
 80007ec:	779a      	strb	r2, [r3, #30]
 80007ee:	e090      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG6 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG7) ||
 80007f0:	4b17      	ldr	r3, [pc, #92]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007f2:	885b      	ldrh	r3, [r3, #2]
 80007f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80007f6:	d903      	bls.n	8000800 <HAL_DEM_MainFunction+0x68c>
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 80007fa:	885b      	ldrh	r3, [r3, #2]
 80007fc:	2b56      	cmp	r3, #86	@ 0x56
 80007fe:	d917      	bls.n	8000830 <HAL_DEM_MainFunction+0x6bc>
			(DATA.sensor3 > ENGINE_LOAD_RANG6 && DATA.sensor3 <= ENGINE_LOAD_RANG7) ||
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000802:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG6 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG7) ||
 8000804:	f641 224f 	movw	r2, #6735	@ 0x1a4f
 8000808:	4293      	cmp	r3, r2
 800080a:	d905      	bls.n	8000818 <HAL_DEM_MainFunction+0x6a4>
			(DATA.sensor3 > ENGINE_LOAD_RANG6 && DATA.sensor3 <= ENGINE_LOAD_RANG7) ||
 800080c:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800080e:	889b      	ldrh	r3, [r3, #4]
 8000810:	f641 622a 	movw	r2, #7722	@ 0x1e2a
 8000814:	4293      	cmp	r3, r2
 8000816:	d90b      	bls.n	8000830 <HAL_DEM_MainFunction+0x6bc>
			(DATA.sensor4 > ENGINE_RPM_RANG6 && DATA.sensor4 <= ENGINE_RPM_RANG7)) {
 8000818:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800081a:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG6 && DATA.sensor3 <= ENGINE_LOAD_RANG7) ||
 800081c:	f640 02a9 	movw	r2, #2217	@ 0x8a9
 8000820:	4293      	cmp	r3, r2
 8000822:	d917      	bls.n	8000854 <HAL_DEM_MainFunction+0x6e0>
			(DATA.sensor4 > ENGINE_RPM_RANG6 && DATA.sensor4 <= ENGINE_RPM_RANG7)) {
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000826:	88db      	ldrh	r3, [r3, #6]
 8000828:	f640 12d7 	movw	r2, #2519	@ 0x9d7
 800082c:	4293      	cmp	r3, r2
 800082e:	d811      	bhi.n	8000854 <HAL_DEM_MainFunction+0x6e0>
		DATA.DTC_3[0] = 'P';
 8000830:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000832:	2250      	movs	r2, #80	@ 0x50
 8000834:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000838:	2230      	movs	r2, #48	@ 0x30
 800083a:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800083e:	2230      	movs	r2, #48	@ 0x30
 8000840:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '7';
 8000842:	4b03      	ldr	r3, [pc, #12]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 8000844:	2237      	movs	r2, #55	@ 0x37
 8000846:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '9';
 8000848:	4b01      	ldr	r3, [pc, #4]	@ (8000850 <HAL_DEM_MainFunction+0x6dc>)
 800084a:	2239      	movs	r2, #57	@ 0x39
 800084c:	779a      	strb	r2, [r3, #30]
 800084e:	e060      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
 8000850:	20000494 	.word	0x20000494
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG7 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG8) ||
 8000854:	4b31      	ldr	r3, [pc, #196]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 8000856:	885b      	ldrh	r3, [r3, #2]
 8000858:	2b56      	cmp	r3, #86	@ 0x56
 800085a:	d903      	bls.n	8000864 <HAL_DEM_MainFunction+0x6f0>
 800085c:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 800085e:	885b      	ldrh	r3, [r3, #2]
 8000860:	2b5d      	cmp	r3, #93	@ 0x5d
 8000862:	d917      	bls.n	8000894 <HAL_DEM_MainFunction+0x720>
			(DATA.sensor3 > ENGINE_LOAD_RANG7 && DATA.sensor3 <= ENGINE_LOAD_RANG8) ||
 8000864:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 8000866:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG7 && DATA.sensor2 <= ENGINE_COOLANT_TEMP_RANG8) ||
 8000868:	f641 622a 	movw	r2, #7722	@ 0x1e2a
 800086c:	4293      	cmp	r3, r2
 800086e:	d905      	bls.n	800087c <HAL_DEM_MainFunction+0x708>
			(DATA.sensor3 > ENGINE_LOAD_RANG7 && DATA.sensor3 <= ENGINE_LOAD_RANG8) ||
 8000870:	4b2a      	ldr	r3, [pc, #168]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	f242 2205 	movw	r2, #8709	@ 0x2205
 8000878:	4293      	cmp	r3, r2
 800087a:	d90b      	bls.n	8000894 <HAL_DEM_MainFunction+0x720>
			(DATA.sensor4 > ENGINE_RPM_RANG7 && DATA.sensor4 <= ENGINE_RPM_RANG8)) {
 800087c:	4b27      	ldr	r3, [pc, #156]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 800087e:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG7 && DATA.sensor3 <= ENGINE_LOAD_RANG8) ||
 8000880:	f640 12d7 	movw	r2, #2519	@ 0x9d7
 8000884:	4293      	cmp	r3, r2
 8000886:	d915      	bls.n	80008b4 <HAL_DEM_MainFunction+0x740>
			(DATA.sensor4 > ENGINE_RPM_RANG7 && DATA.sensor4 <= ENGINE_RPM_RANG8)) {
 8000888:	4b24      	ldr	r3, [pc, #144]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 800088a:	88db      	ldrh	r3, [r3, #6]
 800088c:	f640 3205 	movw	r2, #2821	@ 0xb05
 8000890:	4293      	cmp	r3, r2
 8000892:	d80f      	bhi.n	80008b4 <HAL_DEM_MainFunction+0x740>
		DATA.DTC_3[0] = 'P';
 8000894:	4b21      	ldr	r3, [pc, #132]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 8000896:	2250      	movs	r2, #80	@ 0x50
 8000898:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 800089a:	4b20      	ldr	r3, [pc, #128]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 800089c:	2230      	movs	r2, #48	@ 0x30
 800089e:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008a2:	2230      	movs	r2, #48	@ 0x30
 80008a4:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '7';
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008a8:	2237      	movs	r2, #55	@ 0x37
 80008aa:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = 'E';
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008ae:	2245      	movs	r2, #69	@ 0x45
 80008b0:	779a      	strb	r2, [r3, #30]
 80008b2:	e02e      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG8) ||
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008b6:	885b      	ldrh	r3, [r3, #2]
 80008b8:	2b5d      	cmp	r3, #93	@ 0x5d
 80008ba:	d80b      	bhi.n	80008d4 <HAL_DEM_MainFunction+0x760>
			(DATA.sensor3 > ENGINE_LOAD_RANG8) ||
 80008bc:	4b17      	ldr	r3, [pc, #92]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008be:	889b      	ldrh	r3, [r3, #4]
	} else if ((DATA.sensor2 > ENGINE_COOLANT_TEMP_RANG8) ||
 80008c0:	f242 2205 	movw	r2, #8709	@ 0x2205
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d805      	bhi.n	80008d4 <HAL_DEM_MainFunction+0x760>
			(DATA.sensor4 > ENGINE_RPM_RANG8)) {
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008ca:	88db      	ldrh	r3, [r3, #6]
			(DATA.sensor3 > ENGINE_LOAD_RANG8) ||
 80008cc:	f640 3205 	movw	r2, #2821	@ 0xb05
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d90f      	bls.n	80008f4 <HAL_DEM_MainFunction+0x780>
		DATA.DTC_3[0] = 'P';
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008d6:	2250      	movs	r2, #80	@ 0x50
 80008d8:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008dc:	2230      	movs	r2, #48	@ 0x30
 80008de:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 80008e0:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008e2:	2230      	movs	r2, #48	@ 0x30
 80008e4:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '7';
 80008e6:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008e8:	2237      	movs	r2, #55	@ 0x37
 80008ea:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = 'E';
 80008ec:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008ee:	2245      	movs	r2, #69	@ 0x45
 80008f0:	779a      	strb	r2, [r3, #30]
 80008f2:	e00e      	b.n	8000912 <HAL_DEM_MainFunction+0x79e>
	} else {
		DATA.DTC_3[0] = 'P';
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008f6:	2250      	movs	r2, #80	@ 0x50
 80008f8:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 80008fc:	2230      	movs	r2, #48	@ 0x30
 80008fe:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 8000902:	2230      	movs	r2, #48	@ 0x30
 8000904:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 8000906:	4b05      	ldr	r3, [pc, #20]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 8000908:	2230      	movs	r2, #48	@ 0x30
 800090a:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 800090c:	4b03      	ldr	r3, [pc, #12]	@ (800091c <HAL_DEM_MainFunction+0x7a8>)
 800090e:	2230      	movs	r2, #48	@ 0x30
 8000910:	779a      	strb	r2, [r3, #30]
	}


	return Return_OK;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000494 	.word	0x20000494

08000920 <HAL_MASTER_BUS_MainFunction>:
static uint8_t TX_BUFFER[TX_BUFFER_SIZE]= "1\n\r";


Return_Type HAL_MASTER_BUS_Init(void);

Return_Type HAL_MASTER_BUS_MainFunction(void){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
	Return_Type Return_Result = Return_NOT_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]

	if(SERIAL_COM_Send(TX_BUFFER,TX_BUFFER_SIZE) == Return_OK){
 800092a:	2102      	movs	r1, #2
 800092c:	4806      	ldr	r0, [pc, #24]	@ (8000948 <HAL_MASTER_BUS_MainFunction+0x28>)
 800092e:	f004 f8d9 	bl	8004ae4 <SERIAL_COM_Send>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	d101      	bne.n	800093c <HAL_MASTER_BUS_MainFunction+0x1c>
		Return_Result = Return_OK;
 8000938:	2301      	movs	r3, #1
 800093a:	71fb      	strb	r3, [r7, #7]
	}
	return Return_OK;
 800093c:	2301      	movs	r3, #1
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000

0800094c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a06      	ldr	r2, [pc, #24]	@ (8000974 <vApplicationGetIdleTaskMemory+0x28>)
 800095c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <vApplicationGetIdleTaskMemory+0x2c>)
 8000962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2280      	movs	r2, #128	@ 0x80
 8000968:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800096a:	bf00      	nop
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000080 	.word	0x20000080
 8000978:	20000120 	.word	0x20000120

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b5b0      	push	{r4, r5, r7, lr}
 800097e:	b096      	sub	sp, #88	@ 0x58
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fbdd 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f86d 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 f93d 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 f91d 	bl	8000bcc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000992:	f000 f8f1 	bl	8000b78 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000996:	f000 f8bb 	bl	8000b10 <MX_SPI1_Init>
  MX_CRC_Init();
 800099a:	f000 f8a5 	bl	8000ae8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RXBUFFER, RX_BUFFER_SIZE);
 800099e:	2228      	movs	r2, #40	@ 0x28
 80009a0:	4925      	ldr	r1, [pc, #148]	@ (8000a38 <main+0xbc>)
 80009a2:	4826      	ldr	r0, [pc, #152]	@ (8000a3c <main+0xc0>)
 80009a4:	f002 ff31 	bl	800380a <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <main+0xc4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b24      	ldr	r3, [pc, #144]	@ (8000a40 <main+0xc4>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f022 0204 	bic.w	r2, r2, #4
 80009b6:	601a      	str	r2, [r3, #0]
  HAL_SPI_Receive_IT(&hspi1, &pRxData, 2);
 80009b8:	2202      	movs	r2, #2
 80009ba:	4922      	ldr	r1, [pc, #136]	@ (8000a44 <main+0xc8>)
 80009bc:	4822      	ldr	r0, [pc, #136]	@ (8000a48 <main+0xcc>)
 80009be:	f001 ff1b 	bl	80027f8 <HAL_SPI_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80009c2:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <main+0xd0>)
 80009c4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80009c8:	461d      	mov	r5, r3
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 f8bb 	bl	8004b58 <osThreadCreate>
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a50 <main+0xd4>)
 80009e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK1 */
  osThreadDef(TASK1, Main_Master, osPriorityHigh, 0, 128);
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <main+0xd8>)
 80009ea:	f107 0420 	add.w	r4, r7, #32
 80009ee:	461d      	mov	r5, r3
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK1Handle = osThreadCreate(osThread(TASK1), NULL);
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 f8a8 	bl	8004b58 <osThreadCreate>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a13      	ldr	r2, [pc, #76]	@ (8000a58 <main+0xdc>)
 8000a0c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK2 */
  osThreadDef(TASK2, Main_DEM, osPriorityIdle, 0, 128);
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <main+0xe0>)
 8000a10:	1d3c      	adds	r4, r7, #4
 8000a12:	461d      	mov	r5, r3
 8000a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK2Handle = osThreadCreate(osThread(TASK2), NULL);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 f897 	bl	8004b58 <osThreadCreate>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <main+0xe4>)
 8000a2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a30:	f004 f88b 	bl	8004b4a <osKernelStart>
  /* USER CODE BEGIN WHILE */
   /* USER CODE BEGIN WHILE */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <main+0xb8>
 8000a38:	20000418 	.word	0x20000418
 8000a3c:	20000380 	.word	0x20000380
 8000a40:	200003c8 	.word	0x200003c8
 8000a44:	20000440 	.word	0x20000440
 8000a48:	20000328 	.word	0x20000328
 8000a4c:	08006120 	.word	0x08006120
 8000a50:	2000040c 	.word	0x2000040c
 8000a54:	08006144 	.word	0x08006144
 8000a58:	20000410 	.word	0x20000410
 8000a5c:	08006168 	.word	0x08006168
 8000a60:	20000414 	.word	0x20000414

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b090      	sub	sp, #64	@ 0x40
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 0318 	add.w	r3, r7, #24
 8000a6e:	2228      	movs	r2, #40	@ 0x28
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f005 fa6a 	bl	8005f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a9a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa0:	f107 0318 	add.w	r3, r7, #24
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f89f 	bl	8001be8 <HAL_RCC_OscConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ab0:	f000 f93a 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab4:	230f      	movs	r3, #15
 8000ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2102      	movs	r1, #2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fb0c 	bl	80020ec <HAL_RCC_ClockConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ada:	f000 f925 	bl	8000d28 <Error_Handler>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3740      	adds	r7, #64	@ 0x40
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_CRC_Init+0x20>)
 8000aee:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <MX_CRC_Init+0x24>)
 8000af0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_CRC_Init+0x20>)
 8000af4:	f000 fc35 	bl	8001362 <HAL_CRC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000afe:	f000 f913 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000320 	.word	0x20000320
 8000b0c:	40023000 	.word	0x40023000

08000b10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b16:	4a17      	ldr	r2, [pc, #92]	@ (8000b74 <MX_SPI1_Init+0x64>)
 8000b18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b40:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b56:	220a      	movs	r2, #10
 8000b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_SPI1_Init+0x60>)
 8000b5c:	f001 fc84 	bl	8002468 <HAL_SPI_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 8000b66:	f000 f8df 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000328 	.word	0x20000328
 8000b74:	40013000 	.word	0x40013000

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_USART1_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f002 fd58 	bl	8003664 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f8b5 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000380 	.word	0x20000380
 8000bc8:	40013800 	.word	0x40013800

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <MX_DMA_Init+0x38>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8000c04 <MX_DMA_Init+0x38>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <MX_DMA_Init+0x38>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 fb8d 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bf4:	200f      	movs	r0, #15
 8000bf6:	f000 fba6 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_GPIO_Init+0x40>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <MX_GPIO_Init+0x40>)
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	6193      	str	r3, [r2, #24]
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_GPIO_Init+0x40>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_GPIO_Init+0x40>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <MX_GPIO_Init+0x40>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6193      	str	r3, [r2, #24]
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <MX_GPIO_Init+0x40>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
  if(huart->Instance == USART1){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <HAL_UARTEx_RxEventCallback+0x40>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d10f      	bne.n	8000c82 <HAL_UARTEx_RxEventCallback+0x36>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RXBUFFER, RX_BUFFER_SIZE);
 8000c62:	2228      	movs	r2, #40	@ 0x28
 8000c64:	490a      	ldr	r1, [pc, #40]	@ (8000c90 <HAL_UARTEx_RxEventCallback+0x44>)
 8000c66:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <HAL_UARTEx_RxEventCallback+0x48>)
 8000c68:	f002 fdcf 	bl	800380a <HAL_UARTEx_ReceiveToIdle_DMA>
	  SERIAL_COM_Receive(RXBUFFER);
 8000c6c:	4808      	ldr	r0, [pc, #32]	@ (8000c90 <HAL_UARTEx_RxEventCallback+0x44>)
 8000c6e:	f003 fed1 	bl	8004a14 <SERIAL_COM_Receive>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0204 	bic.w	r2, r2, #4
 8000c80:	601a      	str	r2, [r3, #0]
  }
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40013800 	.word	0x40013800
 8000c90:	20000418 	.word	0x20000418
 8000c94:	20000380 	.word	0x20000380
 8000c98:	200003c8 	.word	0x200003c8

08000c9c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	HAL_COMH_Receive();
 8000ca4:	f003 fd1a 	bl	80046dc <HAL_COMH_Receive>
	HAL_SPI_Receive_IT(&hspi1, &pRxData, 2);
 8000ca8:	2202      	movs	r2, #2
 8000caa:	4904      	ldr	r1, [pc, #16]	@ (8000cbc <HAL_SPI_RxCpltCallback+0x20>)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <HAL_SPI_RxCpltCallback+0x24>)
 8000cae:	f001 fda3 	bl	80027f8 <HAL_SPI_Receive_IT>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000440 	.word	0x20000440
 8000cc0:	20000328 	.word	0x20000328

08000cc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f003 ff8f 	bl	8004bf0 <osDelay>
 8000cd2:	e7fb      	b.n	8000ccc <StartDefaultTask+0x8>

08000cd4 <Main_Master>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Main_Master */
void Main_Master(void const * argument)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Main_Master */
  /* Infinite loop */
  for(;;)
  {
	  HAL_MASTER_BUS_MainFunction();
 8000cdc:	f7ff fe20 	bl	8000920 <HAL_MASTER_BUS_MainFunction>
	  osDelay(500);
 8000ce0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ce4:	f003 ff84 	bl	8004bf0 <osDelay>
	  HAL_MASTER_BUS_MainFunction();
 8000ce8:	bf00      	nop
 8000cea:	e7f7      	b.n	8000cdc <Main_Master+0x8>

08000cec <Main_DEM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Main_DEM */
void Main_DEM(void const * argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Main_DEM */
  /* Infinite loop */
  for(;;)
  {
	 HAL_DEM_MainFunction();
 8000cf4:	f7ff fa3e 	bl	8000174 <HAL_DEM_MainFunction>
	 osDelay(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cfc:	f003 ff78 	bl	8004bf0 <osDelay>
	 HAL_DEM_MainFunction();
 8000d00:	bf00      	nop
 8000d02:	e7f7      	b.n	8000cf4 <Main_DEM+0x8>

08000d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	@ (8000d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d16:	f000 fa29 	bl	800116c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_MspInit+0x68>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_MspInit+0x68>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_MspInit+0x68>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_MspInit+0x68>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a11      	ldr	r2, [pc, #68]	@ (8000d9c <HAL_MspInit+0x68>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_MspInit+0x68>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	210f      	movs	r1, #15
 8000d6e:	f06f 0001 	mvn.w	r0, #1
 8000d72:	f000 facc 	bl	800130e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	@ (8000da0 <HAL_MspInit+0x6c>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_MspInit+0x6c>)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010000 	.word	0x40010000

08000da4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a09      	ldr	r2, [pc, #36]	@ (8000dd8 <HAL_CRC_MspInit+0x34>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10b      	bne.n	8000dce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <HAL_CRC_MspInit+0x38>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <HAL_CRC_MspInit+0x38>)
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_CRC_MspInit+0x38>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	40023000 	.word	0x40023000
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000e78 <HAL_SPI_MspInit+0x98>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d137      	bne.n	8000e70 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e00:	4b1e      	ldr	r3, [pc, #120]	@ (8000e7c <HAL_SPI_MspInit+0x9c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a1d      	ldr	r2, [pc, #116]	@ (8000e7c <HAL_SPI_MspInit+0x9c>)
 8000e06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_SPI_MspInit+0x9c>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_SPI_MspInit+0x9c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <HAL_SPI_MspInit+0x9c>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_SPI_MspInit+0x9c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e30:	23a0      	movs	r3, #160	@ 0xa0
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <HAL_SPI_MspInit+0xa0>)
 8000e44:	f000 fd4c 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e48:	2340      	movs	r3, #64	@ 0x40
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <HAL_SPI_MspInit+0xa0>)
 8000e5c:	f000 fd40 	bl	80018e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2105      	movs	r1, #5
 8000e64:	2023      	movs	r0, #35	@ 0x23
 8000e66:	f000 fa52 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e6a:	2023      	movs	r0, #35	@ 0x23
 8000e6c:	f000 fa6b 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3720      	adds	r7, #32
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40013000 	.word	0x40013000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010800 	.word	0x40010800

08000e84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a33      	ldr	r2, [pc, #204]	@ (8000f6c <HAL_UART_MspInit+0xe8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d15f      	bne.n	8000f64 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea4:	4b32      	ldr	r3, [pc, #200]	@ (8000f70 <HAL_UART_MspInit+0xec>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a31      	ldr	r2, [pc, #196]	@ (8000f70 <HAL_UART_MspInit+0xec>)
 8000eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f70 <HAL_UART_MspInit+0xec>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <HAL_UART_MspInit+0xec>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f70 <HAL_UART_MspInit+0xec>)
 8000ec2:	f043 0304 	orr.w	r3, r3, #4
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <HAL_UART_MspInit+0xec>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ed4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4822      	ldr	r0, [pc, #136]	@ (8000f74 <HAL_UART_MspInit+0xf0>)
 8000eea:	f000 fcf9 	bl	80018e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	481c      	ldr	r0, [pc, #112]	@ (8000f74 <HAL_UART_MspInit+0xf0>)
 8000f04:	f000 fcec 	bl	80018e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f7c <HAL_UART_MspInit+0xf8>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f3a:	f000 fa2f 	bl	800139c <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000f44:	f7ff fef0 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <HAL_UART_MspInit+0xf4>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2105      	movs	r1, #5
 8000f58:	2025      	movs	r0, #37	@ 0x25
 8000f5a:	f000 f9d8 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5e:	2025      	movs	r0, #37	@ 0x25
 8000f60:	f000 f9f1 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40013800 	.word	0x40013800
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010800 	.word	0x40010800
 8000f78:	200003c8 	.word	0x200003c8
 8000f7c:	40020058 	.word	0x40020058

08000f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	@ 0x30
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f96:	4b2e      	ldr	r3, [pc, #184]	@ (8001050 <HAL_InitTick+0xd0>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001050 <HAL_InitTick+0xd0>)
 8000f9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <HAL_InitTick+0xd0>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fae:	f107 020c 	add.w	r2, r7, #12
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fa07 	bl	80023cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fbe:	f001 f9f1 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8000fc2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc6:	4a23      	ldr	r2, [pc, #140]	@ (8001054 <HAL_InitTick+0xd4>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fd4:	4a21      	ldr	r2, [pc, #132]	@ (800105c <HAL_InitTick+0xdc>)
 8000fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fde:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <HAL_InitTick+0xd8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <HAL_InitTick+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000ff8:	4817      	ldr	r0, [pc, #92]	@ (8001058 <HAL_InitTick+0xd8>)
 8000ffa:	f002 f8e8 	bl	80031ce <HAL_TIM_Base_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001004:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001008:	2b00      	cmp	r3, #0
 800100a:	d11b      	bne.n	8001044 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800100c:	4812      	ldr	r0, [pc, #72]	@ (8001058 <HAL_InitTick+0xd8>)
 800100e:	f002 f937 	bl	8003280 <HAL_TIM_Base_Start_IT>
 8001012:	4603      	mov	r3, r0
 8001014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800101c:	2b00      	cmp	r3, #0
 800101e:	d111      	bne.n	8001044 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001020:	2019      	movs	r0, #25
 8001022:	f000 f990 	bl	8001346 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	d808      	bhi.n	800103e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800102c:	2200      	movs	r2, #0
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	2019      	movs	r0, #25
 8001032:	f000 f96c 	bl	800130e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <HAL_InitTick+0xe0>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e002      	b.n	8001044 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001044:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001048:	4618      	mov	r0, r3
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	431bde83 	.word	0x431bde83
 8001058:	20000444 	.word	0x20000444
 800105c:	40012c00 	.word	0x40012c00
 8001060:	20000008 	.word	0x20000008

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Channel5_IRQHandler+0x10>)
 800109e:	f000 faeb 	bl	8001678 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003c8 	.word	0x200003c8

080010ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <TIM1_UP_IRQHandler+0x10>)
 80010b2:	f002 f937 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000444 	.word	0x20000444

080010c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <SPI1_IRQHandler+0x10>)
 80010c6:	f001 fcc9 	bl	8002a5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000328 	.word	0x20000328

080010d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <USART1_IRQHandler+0x10>)
 80010da:	f002 fbf3 	bl	80038c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000380 	.word	0x20000380

080010e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff fff8 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480b      	ldr	r0, [pc, #44]	@ (8001128 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010fa:	490c      	ldr	r1, [pc, #48]	@ (800112c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a09      	ldr	r2, [pc, #36]	@ (8001134 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001110:	4c09      	ldr	r4, [pc, #36]	@ (8001138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f004 ff73 	bl	8006008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001122:	f7ff fc2b 	bl	800097c <main>
  bx lr
 8001126:	4770      	bx	lr
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001130:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8001134:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001138:	20001340 	.word	0x20001340

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_Init+0x28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <HAL_Init+0x28>)
 800114a:	f043 0310 	orr.w	r3, r3, #16
 800114e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f8d1 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	200f      	movs	r0, #15
 8001158:	f7ff ff12 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800115c:	f7ff fdea 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40022000 	.word	0x40022000

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	2000000c 	.word	0x2000000c
 800118c:	2000048c 	.word	0x2000048c

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	@ (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	2000048c 	.word	0x2000048c

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4906      	ldr	r1, [pc, #24]	@ (800123c <__NVIC_EnableIRQ+0x34>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff4f 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff64 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ffb2 	bl	8001294 <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff81 	bl	8001240 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff57 	bl	8001208 <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e00e      	b.n	8001392 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	795b      	ldrb	r3, [r3, #5]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d105      	bne.n	800138a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff fd0d 	bl	8000da4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e043      	b.n	800143a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <HAL_DMA_Init+0xa8>)
 80013ba:	4413      	add	r3, r2
 80013bc:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <HAL_DMA_Init+0xac>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	009a      	lsls	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a1f      	ldr	r2, [pc, #124]	@ (800144c <HAL_DMA_Init+0xb0>)
 80013ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	bffdfff8 	.word	0xbffdfff8
 8001448:	cccccccd 	.word	0xcccccccd
 800144c:	40020000 	.word	0x40020000

08001450 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_DMA_Start_IT+0x20>
 800146c:	2302      	movs	r3, #2
 800146e:	e04b      	b.n	8001508 <HAL_DMA_Start_IT+0xb8>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d13a      	bne.n	80014fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	68b9      	ldr	r1, [r7, #8]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f000 f9eb 	bl	8001884 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d008      	beq.n	80014c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 020e 	orr.w	r2, r2, #14
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e00f      	b.n	80014e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0204 	bic.w	r2, r2, #4
 80014d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 020a 	orr.w	r2, r2, #10
 80014e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e005      	b.n	8001506 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001506:	7dfb      	ldrb	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d008      	beq.n	800153a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2204      	movs	r2, #4
 800152c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e020      	b.n	800157c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 020e 	bic.w	r2, r2, #14
 8001548:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0201 	bic.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800157a:	7bfb      	ldrb	r3, [r7, #15]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d005      	beq.n	80015ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2204      	movs	r2, #4
 80015a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	e051      	b.n	8001650 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 020e 	bic.w	r2, r2, #14
 80015ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f022 0201 	bic.w	r2, r2, #1
 80015ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a22      	ldr	r2, [pc, #136]	@ (800165c <HAL_DMA_Abort_IT+0xd4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d029      	beq.n	800162a <HAL_DMA_Abort_IT+0xa2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a21      	ldr	r2, [pc, #132]	@ (8001660 <HAL_DMA_Abort_IT+0xd8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d022      	beq.n	8001626 <HAL_DMA_Abort_IT+0x9e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <HAL_DMA_Abort_IT+0xdc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_Abort_IT+0x98>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001668 <HAL_DMA_Abort_IT+0xe0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d012      	beq.n	800161a <HAL_DMA_Abort_IT+0x92>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <HAL_DMA_Abort_IT+0xe4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00a      	beq.n	8001614 <HAL_DMA_Abort_IT+0x8c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <HAL_DMA_Abort_IT+0xe8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d102      	bne.n	800160e <HAL_DMA_Abort_IT+0x86>
 8001608:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800160c:	e00e      	b.n	800162c <HAL_DMA_Abort_IT+0xa4>
 800160e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001612:	e00b      	b.n	800162c <HAL_DMA_Abort_IT+0xa4>
 8001614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001618:	e008      	b.n	800162c <HAL_DMA_Abort_IT+0xa4>
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	e005      	b.n	800162c <HAL_DMA_Abort_IT+0xa4>
 8001620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001624:	e002      	b.n	800162c <HAL_DMA_Abort_IT+0xa4>
 8001626:	2310      	movs	r3, #16
 8001628:	e000      	b.n	800162c <HAL_DMA_Abort_IT+0xa4>
 800162a:	2301      	movs	r3, #1
 800162c:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <HAL_DMA_Abort_IT+0xec>)
 800162e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
    } 
  }
  return status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40020008 	.word	0x40020008
 8001660:	4002001c 	.word	0x4002001c
 8001664:	40020030 	.word	0x40020030
 8001668:	40020044 	.word	0x40020044
 800166c:	40020058 	.word	0x40020058
 8001670:	4002006c 	.word	0x4002006c
 8001674:	40020000 	.word	0x40020000

08001678 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	2204      	movs	r2, #4
 8001696:	409a      	lsls	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d04f      	beq.n	8001740 <HAL_DMA_IRQHandler+0xc8>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04a      	beq.n	8001740 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d107      	bne.n	80016c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0204 	bic.w	r2, r2, #4
 80016c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a66      	ldr	r2, [pc, #408]	@ (8001868 <HAL_DMA_IRQHandler+0x1f0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d029      	beq.n	8001726 <HAL_DMA_IRQHandler+0xae>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a65      	ldr	r2, [pc, #404]	@ (800186c <HAL_DMA_IRQHandler+0x1f4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d022      	beq.n	8001722 <HAL_DMA_IRQHandler+0xaa>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a63      	ldr	r2, [pc, #396]	@ (8001870 <HAL_DMA_IRQHandler+0x1f8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01a      	beq.n	800171c <HAL_DMA_IRQHandler+0xa4>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a62      	ldr	r2, [pc, #392]	@ (8001874 <HAL_DMA_IRQHandler+0x1fc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d012      	beq.n	8001716 <HAL_DMA_IRQHandler+0x9e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a60      	ldr	r2, [pc, #384]	@ (8001878 <HAL_DMA_IRQHandler+0x200>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00a      	beq.n	8001710 <HAL_DMA_IRQHandler+0x98>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a5f      	ldr	r2, [pc, #380]	@ (800187c <HAL_DMA_IRQHandler+0x204>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <HAL_DMA_IRQHandler+0x92>
 8001704:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001708:	e00e      	b.n	8001728 <HAL_DMA_IRQHandler+0xb0>
 800170a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800170e:	e00b      	b.n	8001728 <HAL_DMA_IRQHandler+0xb0>
 8001710:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001714:	e008      	b.n	8001728 <HAL_DMA_IRQHandler+0xb0>
 8001716:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800171a:	e005      	b.n	8001728 <HAL_DMA_IRQHandler+0xb0>
 800171c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001720:	e002      	b.n	8001728 <HAL_DMA_IRQHandler+0xb0>
 8001722:	2340      	movs	r3, #64	@ 0x40
 8001724:	e000      	b.n	8001728 <HAL_DMA_IRQHandler+0xb0>
 8001726:	2304      	movs	r3, #4
 8001728:	4a55      	ldr	r2, [pc, #340]	@ (8001880 <HAL_DMA_IRQHandler+0x208>)
 800172a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8094 	beq.w	800185e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800173e:	e08e      	b.n	800185e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	2202      	movs	r2, #2
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d056      	beq.n	80017fe <HAL_DMA_IRQHandler+0x186>
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d051      	beq.n	80017fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10b      	bne.n	8001780 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 020a 	bic.w	r2, r2, #10
 8001776:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a38      	ldr	r2, [pc, #224]	@ (8001868 <HAL_DMA_IRQHandler+0x1f0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d029      	beq.n	80017de <HAL_DMA_IRQHandler+0x166>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a37      	ldr	r2, [pc, #220]	@ (800186c <HAL_DMA_IRQHandler+0x1f4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <HAL_DMA_IRQHandler+0x162>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a35      	ldr	r2, [pc, #212]	@ (8001870 <HAL_DMA_IRQHandler+0x1f8>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01a      	beq.n	80017d4 <HAL_DMA_IRQHandler+0x15c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a34      	ldr	r2, [pc, #208]	@ (8001874 <HAL_DMA_IRQHandler+0x1fc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d012      	beq.n	80017ce <HAL_DMA_IRQHandler+0x156>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <HAL_DMA_IRQHandler+0x200>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00a      	beq.n	80017c8 <HAL_DMA_IRQHandler+0x150>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a31      	ldr	r2, [pc, #196]	@ (800187c <HAL_DMA_IRQHandler+0x204>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d102      	bne.n	80017c2 <HAL_DMA_IRQHandler+0x14a>
 80017bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80017c0:	e00e      	b.n	80017e0 <HAL_DMA_IRQHandler+0x168>
 80017c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017c6:	e00b      	b.n	80017e0 <HAL_DMA_IRQHandler+0x168>
 80017c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017cc:	e008      	b.n	80017e0 <HAL_DMA_IRQHandler+0x168>
 80017ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d2:	e005      	b.n	80017e0 <HAL_DMA_IRQHandler+0x168>
 80017d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017d8:	e002      	b.n	80017e0 <HAL_DMA_IRQHandler+0x168>
 80017da:	2320      	movs	r3, #32
 80017dc:	e000      	b.n	80017e0 <HAL_DMA_IRQHandler+0x168>
 80017de:	2302      	movs	r3, #2
 80017e0:	4a27      	ldr	r2, [pc, #156]	@ (8001880 <HAL_DMA_IRQHandler+0x208>)
 80017e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d034      	beq.n	800185e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017fc:	e02f      	b.n	800185e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2208      	movs	r2, #8
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d028      	beq.n	8001860 <HAL_DMA_IRQHandler+0x1e8>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d023      	beq.n	8001860 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 020e 	bic.w	r2, r2, #14
 8001826:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
    }
  }
  return;
 800185e:	bf00      	nop
 8001860:	bf00      	nop
}
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40020008 	.word	0x40020008
 800186c:	4002001c 	.word	0x4002001c
 8001870:	40020030 	.word	0x40020030
 8001874:	40020044 	.word	0x40020044
 8001878:	40020058 	.word	0x40020058
 800187c:	4002006c 	.word	0x4002006c
 8001880:	40020000 	.word	0x40020000

08001884 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800189a:	2101      	movs	r1, #1
 800189c:	fa01 f202 	lsl.w	r2, r1, r2
 80018a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d108      	bne.n	80018c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018c2:	e007      	b.n	80018d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b08b      	sub	sp, #44	@ 0x2c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e169      	b.n	8001bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f4:	2201      	movs	r2, #1
 80018f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8158 	bne.w	8001bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a9a      	ldr	r2, [pc, #616]	@ (8001b80 <HAL_GPIO_Init+0x2a0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d05e      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800191c:	4a98      	ldr	r2, [pc, #608]	@ (8001b80 <HAL_GPIO_Init+0x2a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d875      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001922:	4a98      	ldr	r2, [pc, #608]	@ (8001b84 <HAL_GPIO_Init+0x2a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d058      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001928:	4a96      	ldr	r2, [pc, #600]	@ (8001b84 <HAL_GPIO_Init+0x2a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d86f      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800192e:	4a96      	ldr	r2, [pc, #600]	@ (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d052      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001934:	4a94      	ldr	r2, [pc, #592]	@ (8001b88 <HAL_GPIO_Init+0x2a8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d869      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800193a:	4a94      	ldr	r2, [pc, #592]	@ (8001b8c <HAL_GPIO_Init+0x2ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d04c      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 8001940:	4a92      	ldr	r2, [pc, #584]	@ (8001b8c <HAL_GPIO_Init+0x2ac>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d863      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001946:	4a92      	ldr	r2, [pc, #584]	@ (8001b90 <HAL_GPIO_Init+0x2b0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d046      	beq.n	80019da <HAL_GPIO_Init+0xfa>
 800194c:	4a90      	ldr	r2, [pc, #576]	@ (8001b90 <HAL_GPIO_Init+0x2b0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d85d      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 8001952:	2b12      	cmp	r3, #18
 8001954:	d82a      	bhi.n	80019ac <HAL_GPIO_Init+0xcc>
 8001956:	2b12      	cmp	r3, #18
 8001958:	d859      	bhi.n	8001a0e <HAL_GPIO_Init+0x12e>
 800195a:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <HAL_GPIO_Init+0x80>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	080019db 	.word	0x080019db
 8001964:	080019b5 	.word	0x080019b5
 8001968:	080019c7 	.word	0x080019c7
 800196c:	08001a09 	.word	0x08001a09
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a0f 	.word	0x08001a0f
 8001978:	08001a0f 	.word	0x08001a0f
 800197c:	08001a0f 	.word	0x08001a0f
 8001980:	08001a0f 	.word	0x08001a0f
 8001984:	08001a0f 	.word	0x08001a0f
 8001988:	08001a0f 	.word	0x08001a0f
 800198c:	08001a0f 	.word	0x08001a0f
 8001990:	08001a0f 	.word	0x08001a0f
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	08001a0f 	.word	0x08001a0f
 800199c:	08001a0f 	.word	0x08001a0f
 80019a0:	08001a0f 	.word	0x08001a0f
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	4a79      	ldr	r2, [pc, #484]	@ (8001b94 <HAL_GPIO_Init+0x2b4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e02c      	b.n	8001a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e029      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	3304      	adds	r3, #4
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e024      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	3308      	adds	r3, #8
 80019cc:	623b      	str	r3, [r7, #32]
          break;
 80019ce:	e01f      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	330c      	adds	r3, #12
 80019d6:	623b      	str	r3, [r7, #32]
          break;
 80019d8:	e01a      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019e2:	2304      	movs	r3, #4
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e013      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	611a      	str	r2, [r3, #16]
          break;
 80019fa:	e009      	b.n	8001a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019fc:	2308      	movs	r3, #8
 80019fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	615a      	str	r2, [r3, #20]
          break;
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e000      	b.n	8001a10 <HAL_GPIO_Init+0x130>
          break;
 8001a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2bff      	cmp	r3, #255	@ 0xff
 8001a14:	d801      	bhi.n	8001a1a <HAL_GPIO_Init+0x13a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	e001      	b.n	8001a1e <HAL_GPIO_Init+0x13e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	2bff      	cmp	r3, #255	@ 0xff
 8001a24:	d802      	bhi.n	8001a2c <HAL_GPIO_Init+0x14c>
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	e002      	b.n	8001a32 <HAL_GPIO_Init+0x152>
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	3b08      	subs	r3, #8
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	210f      	movs	r1, #15
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80b1 	beq.w	8001bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a60:	4b4d      	ldr	r3, [pc, #308]	@ (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a4c      	ldr	r2, [pc, #304]	@ (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <HAL_GPIO_Init+0x2b8>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a78:	4a48      	ldr	r2, [pc, #288]	@ (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ba0 <HAL_GPIO_Init+0x2c0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d013      	beq.n	8001acc <HAL_GPIO_Init+0x1ec>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ba4 <HAL_GPIO_Init+0x2c4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1e8>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba8 <HAL_GPIO_Init+0x2c8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1e4>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a3d      	ldr	r2, [pc, #244]	@ (8001bac <HAL_GPIO_Init+0x2cc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1e0>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e006      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1ee>
 8001acc:	2300      	movs	r3, #0
 8001ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ade:	492f      	ldr	r1, [pc, #188]	@ (8001b9c <HAL_GPIO_Init+0x2bc>)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	492c      	ldr	r1, [pc, #176]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b06:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4928      	ldr	r1, [pc, #160]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4922      	ldr	r1, [pc, #136]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2e:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	491e      	ldr	r1, [pc, #120]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	4918      	ldr	r1, [pc, #96]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b56:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4914      	ldr	r1, [pc, #80]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d021      	beq.n	8001bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	490e      	ldr	r1, [pc, #56]	@ (8001bb0 <HAL_GPIO_Init+0x2d0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x2e2>
 8001b7e:	bf00      	nop
 8001b80:	10320000 	.word	0x10320000
 8001b84:	10310000 	.word	0x10310000
 8001b88:	10220000 	.word	0x10220000
 8001b8c:	10210000 	.word	0x10210000
 8001b90:	10120000 	.word	0x10120000
 8001b94:	10110000 	.word	0x10110000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010000 	.word	0x40010000
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40011000 	.word	0x40011000
 8001bac:	40011400 	.word	0x40011400
 8001bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4909      	ldr	r1, [pc, #36]	@ (8001be4 <HAL_GPIO_Init+0x304>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f47f ae8e 	bne.w	80018f4 <HAL_GPIO_Init+0x14>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	372c      	adds	r7, #44	@ 0x2c
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40010400 	.word	0x40010400

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e272      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b92      	ldr	r3, [pc, #584]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
 8001c20:	4b8c      	ldr	r3, [pc, #560]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b89      	ldr	r3, [pc, #548]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x12c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e24c      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x76>
 8001c50:	4b80      	ldr	r3, [pc, #512]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b78      	ldr	r3, [pc, #480]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
 8001c8a:	4b72      	ldr	r3, [pc, #456]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a71      	ldr	r2, [pc, #452]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b68      	ldr	r3, [pc, #416]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fa64 	bl	8001190 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fa60 	bl	8001190 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e200      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe4>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fa50 	bl	8001190 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fa4c 	bl	8001190 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1ec      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x10c>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b49      	ldr	r3, [pc, #292]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
 8001d3a:	4b46      	ldr	r3, [pc, #280]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4939      	ldr	r1, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fa05 	bl	8001190 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fa01 	bl	8001190 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1a1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4927      	ldr	r1, [pc, #156]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f9e4 	bl	8001190 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f9e0 	bl	8001190 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e180      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03a      	beq.n	8001e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff f9c4 	bl	8001190 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff f9c0 	bl	8001190 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e160      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fafe 	bl	800242c <RCC_Delay>
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7ff f9aa 	bl	8001190 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f9a6 	bl	8001190 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e146      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e9      	bne.n	8001e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b88      	ldr	r3, [pc, #544]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a87      	ldr	r2, [pc, #540]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b85      	ldr	r3, [pc, #532]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff f967 	bl	8001190 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7ff f963 	bl	8001190 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e103      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001eec:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x334>
 8001f02:	4b6a      	ldr	r3, [pc, #424]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a69      	ldr	r2, [pc, #420]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b67      	ldr	r3, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x356>
 8001f24:	4b61      	ldr	r3, [pc, #388]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b5e      	ldr	r3, [pc, #376]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a5a      	ldr	r2, [pc, #360]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a57      	ldr	r2, [pc, #348]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f917 	bl	8001190 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff f913 	bl	8001190 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0b1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x37e>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f901 	bl	8001190 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7ff f8fd 	bl	8001190 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d061      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff f8d1 	bl	8001190 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f8cd 	bl	8001190 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4921      	ldr	r1, [pc, #132]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a19      	ldr	r1, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	430b      	orrs	r3, r1
 800203e:	491b      	ldr	r1, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff f8a1 	bl	8001190 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7ff f89d 	bl	8001190 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e03d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
 8002070:	e035      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f88a 	bl	8001190 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f886 	bl	8001190 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e026      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x498>
 800209e:	e01e      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e019      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_OscConfig+0x500>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe ffd8 	bl	8001190 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe ffd4 	bl	8001190 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fe70 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	0800618c 	.word	0x0800618c
 80022b8:	20000004 	.word	0x20000004
 80022bc:	20000008 	.word	0x20000008

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ee:	e027      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	e027      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002322:	fb03 f202 	mul.w	r2, r3, r2
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e004      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	613b      	str	r3, [r7, #16]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	613b      	str	r3, [r7, #16]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	693b      	ldr	r3, [r7, #16]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	080061a4 	.word	0x080061a4
 8002360:	080061b4 	.word	0x080061b4
 8002364:	003d0900 	.word	0x003d0900

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <HAL_RCC_GetHCLKFreq+0x10>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002380:	f7ff fff2 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	0800619c 	.word	0x0800619c

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a8:	f7ff ffde 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0adb      	lsrs	r3, r3, #11
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	0800619c 	.word	0x0800619c

080023cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	220f      	movs	r2, #15
 80023da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000

0800242c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <RCC_Delay+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <RCC_Delay+0x38>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002448:	bf00      	nop
  }
  while (Delay --);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <RCC_Delay+0x1c>
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	20000004 	.word	0x20000004
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e076      	b.n	8002568 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800248a:	d009      	beq.n	80024a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
 8002492:	e005      	b.n	80024a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe fc90 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80024e8:	431a      	orrs	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	0c1a      	lsrs	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f002 0204 	and.w	r2, r2, #4
 8002546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_SPI_Transmit+0x22>
 800258e:	2302      	movs	r3, #2
 8002590:	e12d      	b.n	80027ee <HAL_SPI_Transmit+0x27e>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800259a:	f7fe fdf9 	bl	8001190 <HAL_GetTick>
 800259e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
 80025b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025b4:	e116      	b.n	80027e4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_SPI_Transmit+0x52>
 80025bc:	88fb      	ldrh	r3, [r7, #6]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d102      	bne.n	80025c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025c6:	e10d      	b.n	80027e4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2203      	movs	r2, #3
 80025cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	88fa      	ldrh	r2, [r7, #6]
 80025e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800260e:	d10f      	bne.n	8002630 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800261e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800262e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263a:	2b40      	cmp	r3, #64	@ 0x40
 800263c:	d007      	beq.n	800264e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002656:	d14f      	bne.n	80026f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <HAL_SPI_Transmit+0xf6>
 8002660:	8afb      	ldrh	r3, [r7, #22]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d142      	bne.n	80026ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	881a      	ldrh	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	1c9a      	adds	r2, r3, #2
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800268a:	e02f      	b.n	80026ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d112      	bne.n	80026c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	1c9a      	adds	r2, r3, #2
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026be:	e015      	b.n	80026ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026c0:	f7fe fd66 	bl	8001190 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d803      	bhi.n	80026d8 <HAL_SPI_Transmit+0x168>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d102      	bne.n	80026de <HAL_SPI_Transmit+0x16e>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80026ea:	e07b      	b.n	80027e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ca      	bne.n	800268c <HAL_SPI_Transmit+0x11c>
 80026f6:	e050      	b.n	800279a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_Transmit+0x196>
 8002700:	8afb      	ldrh	r3, [r7, #22]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d144      	bne.n	8002790 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	330c      	adds	r3, #12
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800272c:	e030      	b.n	8002790 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d113      	bne.n	8002764 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002762:	e015      	b.n	8002790 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002764:	f7fe fd14 	bl	8001190 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d803      	bhi.n	800277c <HAL_SPI_Transmit+0x20c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277a:	d102      	bne.n	8002782 <HAL_SPI_Transmit+0x212>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800278e:	e029      	b.n	80027e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1c9      	bne.n	800272e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fc44 	bl	800302c <SPI_EndRxTxTransaction>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	77fb      	strb	r3, [r7, #31]
 80027da:	e003      	b.n	80027e4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80027ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d002      	beq.n	800281c <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	75fb      	strb	r3, [r7, #23]
    goto error;
 800281a:	e07d      	b.n	8002918 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d110      	bne.n	8002846 <HAL_SPI_Receive_IT+0x4e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800282c:	d10b      	bne.n	8002846 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2204      	movs	r2, #4
 8002832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f879 	bl	8002934 <HAL_SPI_TransmitReceive_IT>
 8002842:	4603      	mov	r3, r0
 8002844:	e06d      	b.n	8002922 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_SPI_Receive_IT+0x5c>
 8002850:	2302      	movs	r3, #2
 8002852:	e066      	b.n	8002922 <HAL_SPI_Receive_IT+0x12a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Receive_IT+0x70>
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d102      	bne.n	800286e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800286c:	e054      	b.n	8002918 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2204      	movs	r2, #4
 8002872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	88fa      	ldrh	r2, [r7, #6]
 8002886:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	@ (800292c <HAL_SPI_Receive_IT+0x134>)
 80028b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80028b4:	e002      	b.n	80028bc <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002930 <HAL_SPI_Receive_IT+0x138>)
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028c4:	d10f      	bne.n	80028e6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80028f4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d008      	beq.n	8002916 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e000      	b.n	8002918 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8002916:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	08002e31 	.word	0x08002e31
 8002930:	08002de7 	.word	0x08002de7

08002934 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_SPI_TransmitReceive_IT+0x20>
 8002950:	2302      	movs	r3, #2
 8002952:	e075      	b.n	8002a40 <HAL_SPI_TransmitReceive_IT+0x10c>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002962:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800296a:	7dbb      	ldrb	r3, [r7, #22]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d00d      	beq.n	800298c <HAL_SPI_TransmitReceive_IT+0x58>
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002976:	d106      	bne.n	8002986 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <HAL_SPI_TransmitReceive_IT+0x52>
 8002980:	7dbb      	ldrb	r3, [r7, #22]
 8002982:	2b04      	cmp	r3, #4
 8002984:	d002      	beq.n	800298c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	75fb      	strb	r3, [r7, #23]
    goto error;
 800298a:	e054      	b.n	8002a36 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_SPI_TransmitReceive_IT+0x6a>
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029a2:	e048      	b.n	8002a36 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d003      	beq.n	80029b8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2205      	movs	r2, #5
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	887a      	ldrh	r2, [r7, #2]
 80029ce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <HAL_SPI_TransmitReceive_IT+0x118>)
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80029f6:	e005      	b.n	8002a04 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4a16      	ldr	r2, [pc, #88]	@ (8002a54 <HAL_SPI_TransmitReceive_IT+0x120>)
 80029fc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a15      	ldr	r2, [pc, #84]	@ (8002a58 <HAL_SPI_TransmitReceive_IT+0x124>)
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8002a12:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1e:	2b40      	cmp	r3, #64	@ 0x40
 8002a20:	d008      	beq.n	8002a34 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e000      	b.n	8002a36 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002a34:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	08002d29 	.word	0x08002d29
 8002a50:	08002d89 	.word	0x08002d89
 8002a54:	08002c65 	.word	0x08002c65
 8002a58:	08002cc9 	.word	0x08002cc9

08002a5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10e      	bne.n	8002a9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
    return;
 8002a9a:	e0b7      	b.n	8002c0c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_SPI_IRQHandler+0x5e>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
    return;
 8002ab8:	e0a8      	b.n	8002c0c <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_SPI_IRQHandler+0x74>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 809e 	beq.w	8002c0c <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8098 	beq.w	8002c0c <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d023      	beq.n	8002b2e <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d011      	beq.n	8002b16 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	f043 0204 	orr.w	r2, r3, #4
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	e00b      	b.n	8002b2e <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
        return;
 8002b2c:	e06e      	b.n	8002c0c <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d014      	beq.n	8002b62 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04f      	beq.n	8002c0a <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b78:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d104      	bne.n	8002b96 <HAL_SPI_IRQHandler+0x13a>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d034      	beq.n	8002c00 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0203 	bic.w	r2, r2, #3
 8002ba4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d011      	beq.n	8002bd2 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bb2:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <HAL_SPI_IRQHandler+0x1b8>)
 8002bb4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fce4 	bl	8001588 <HAL_DMA_Abort_IT>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bde:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <HAL_SPI_IRQHandler+0x1b8>)
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fcce 	bl	8001588 <HAL_DMA_Abort_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002bfe:	e003      	b.n	8002c08 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f812 	bl	8002c2a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c06:	e000      	b.n	8002c0a <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002c08:	bf00      	nop
    return;
 8002c0a:	bf00      	nop
  }
}
 8002c0c:	3720      	adds	r7, #32
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	08002c3d 	.word	0x08002c3d

08002c18 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff ffe7 	bl	8002c2a <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f103 020c 	add.w	r2, r3, #12
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002cae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9d4 	bl	8003068 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10f      	bne.n	8002d20 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d0e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d102      	bne.n	8002d20 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9a4 	bl	8003068 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3a:	b292      	uxth	r2, r2
 8002d3c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d42:	1c9a      	adds	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10f      	bne.n	8002d80 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f974 	bl	8003068 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	881a      	ldrh	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10f      	bne.n	8002dde <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002dcc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f945 	bl	8003068 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f103 020c 	add.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f994 	bl	8003150 <SPI_CloseRx_ISR>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	b292      	uxth	r2, r2
 8002e44:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	1c9a      	adds	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f971 	bl	8003150 <SPI_CloseRx_ISR>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e88:	f7fe f982 	bl	8001190 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e98:	f7fe f97a 	bl	8001190 <HAL_GetTick>
 8002e9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e9e:	4b39      	ldr	r3, [pc, #228]	@ (8002f84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	015b      	lsls	r3, r3, #5
 8002ea4:	0d1b      	lsrs	r3, r3, #20
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eae:	e054      	b.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d050      	beq.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002eb8:	f7fe f96a 	bl	8001190 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d902      	bls.n	8002ece <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13d      	bne.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ee6:	d111      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ef0:	d004      	beq.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d107      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f14:	d10f      	bne.n	8002f36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e017      	b.n	8002f7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d19b      	bne.n	8002eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000004 	.word	0x20000004

08002f88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f9c:	d111      	bne.n	8002fc2 <SPI_EndRxTransaction+0x3a>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa6:	d004      	beq.n	8002fb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb0:	d107      	bne.n	8002fc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fc0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fca:	d117      	bne.n	8002ffc <SPI_EndRxTransaction+0x74>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd4:	d112      	bne.n	8002ffc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2101      	movs	r1, #1
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7ff ff49 	bl	8002e78 <SPI_WaitFlagStateUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01a      	beq.n	8003022 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e013      	b.n	8003024 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	2180      	movs	r1, #128	@ 0x80
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f7ff ff36 	bl	8002e78 <SPI_WaitFlagStateUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e000      	b.n	8003024 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	@ 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff ff18 	bl	8002e78 <SPI_WaitFlagStateUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d007      	beq.n	800305e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e000      	b.n	8003060 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003070:	4b35      	ldr	r3, [pc, #212]	@ (8003148 <SPI_CloseRxTx_ISR+0xe0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a35      	ldr	r2, [pc, #212]	@ (800314c <SPI_CloseRxTx_ISR+0xe4>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	0a5b      	lsrs	r3, r3, #9
 800307c:	2264      	movs	r2, #100	@ 0x64
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003084:	f7fe f884 	bl	8001190 <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0220 	bic.w	r2, r2, #32
 8003098:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80030ac:	e009      	b.n	80030c2 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0eb      	beq.n	800309a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	2164      	movs	r1, #100	@ 0x64
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffb0 	bl	800302c <SPI_EndRxTxTransaction>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003100:	2b00      	cmp	r3, #0
 8003102:	d115      	bne.n	8003130 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b04      	cmp	r3, #4
 800310e:	d107      	bne.n	8003120 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd fdbf 	bl	8000c9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800311e:	e00e      	b.n	800313e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fd75 	bl	8002c18 <HAL_SPI_TxRxCpltCallback>
}
 800312e:	e006      	b.n	800313e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fd76 	bl	8002c2a <HAL_SPI_ErrorCallback>
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000004 	.word	0x20000004
 800314c:	057619f1 	.word	0x057619f1

08003150 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003166:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003168:	f7fe f812 	bl	8001190 <HAL_GetTick>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	2164      	movs	r1, #100	@ 0x64
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff ff08 	bl	8002f88 <SPI_EndRxTransaction>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd fd6f 	bl	8000c9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80031be:	e002      	b.n	80031c6 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fd32 	bl	8002c2a <HAL_SPI_ErrorCallback>
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e041      	b.n	8003264 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f839 	bl	800326c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	4619      	mov	r1, r3
 800320c:	4610      	mov	r0, r2
 800320e:	f000 f9b5 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr
	...

08003280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d001      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e03a      	b.n	800330e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a18      	ldr	r2, [pc, #96]	@ (8003318 <HAL_TIM_Base_Start_IT+0x98>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00e      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0x58>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c2:	d009      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0x58>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a14      	ldr	r2, [pc, #80]	@ (800331c <HAL_TIM_Base_Start_IT+0x9c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_TIM_Base_Start_IT+0x58>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <HAL_TIM_Base_Start_IT+0xa0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d111      	bne.n	80032fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d010      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fa:	e007      	b.n	800330c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0202 	mvn.w	r2, #2
 8003350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8ed 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8e0 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8ef 	bl	8003558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8c3 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8b6 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8c5 	bl	8003558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0208 	mvn.w	r2, #8
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f899 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f88c 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f89b 	bl	8003558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f86f 	bl	8003546 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f862 	bl	8003534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f871 	bl	8003558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fc2e 	bl	8000d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b2:	2b80      	cmp	r3, #128	@ 0x80
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c0:	2b80      	cmp	r3, #128	@ 0x80
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f8bf 	bl	8003652 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034de:	2b40      	cmp	r3, #64	@ 0x40
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ec:	2b40      	cmp	r3, #64	@ 0x40
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f835 	bl	800356a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b20      	cmp	r3, #32
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0220 	mvn.w	r2, #32
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f88a 	bl	8003640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr

08003546 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a29      	ldr	r2, [pc, #164]	@ (8003634 <TIM_Base_SetConfig+0xb8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00b      	beq.n	80035ac <TIM_Base_SetConfig+0x30>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0x30>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a26      	ldr	r2, [pc, #152]	@ (8003638 <TIM_Base_SetConfig+0xbc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0x30>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a25      	ldr	r2, [pc, #148]	@ (800363c <TIM_Base_SetConfig+0xc0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d108      	bne.n	80035be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1c      	ldr	r2, [pc, #112]	@ (8003634 <TIM_Base_SetConfig+0xb8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a19      	ldr	r2, [pc, #100]	@ (8003638 <TIM_Base_SetConfig+0xbc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a18      	ldr	r2, [pc, #96]	@ (800363c <TIM_Base_SetConfig+0xc0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a07      	ldr	r2, [pc, #28]	@ (8003634 <TIM_Base_SetConfig+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800

08003640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr

08003652 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e042      	b.n	80036fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fbfa 	bl	8000e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	@ 0x24
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 ff89 	bl	80045c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	@ 0x28
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b20      	cmp	r3, #32
 8003722:	d16d      	bne.n	8003800 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_UART_Transmit+0x2c>
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e066      	b.n	8003802 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2221      	movs	r2, #33	@ 0x21
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003742:	f7fd fd25 	bl	8001190 <HAL_GetTick>
 8003746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800375c:	d108      	bne.n	8003770 <HAL_UART_Transmit+0x6c>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d104      	bne.n	8003770 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e003      	b.n	8003778 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003778:	e02a      	b.n	80037d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	2180      	movs	r1, #128	@ 0x80
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fc51 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e036      	b.n	8003802 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	3302      	adds	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
 80037b0:	e007      	b.n	80037c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3301      	adds	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1cf      	bne.n	800377a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2140      	movs	r1, #64	@ 0x40
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fc21 	bl	800402c <UART_WaitOnFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e006      	b.n	8003802 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b08c      	sub	sp, #48	@ 0x30
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	4613      	mov	r3, r2
 8003816:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	d14a      	bne.n	80038ba <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e043      	b.n	80038bc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2201      	movs	r2, #1
 8003838:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	461a      	mov	r2, r3
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 fc5e 	bl	8004108 <UART_Start_Receive_DMA>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003852:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003856:	2b00      	cmp	r3, #0
 8003858:	d12c      	bne.n	80038b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	2b01      	cmp	r3, #1
 8003860:	d125      	bne.n	80038ae <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	617b      	str	r3, [r7, #20]
   return(result);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f043 0310 	orr.w	r3, r3, #16
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	330c      	adds	r3, #12
 8003896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003898:	627a      	str	r2, [r7, #36]	@ 0x24
 800389a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6a39      	ldr	r1, [r7, #32]
 800389e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80038ac:	e002      	b.n	80038b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80038b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038b8:	e000      	b.n	80038bc <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80038ba:	2302      	movs	r3, #2
  }
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3730      	adds	r7, #48	@ 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b0ba      	sub	sp, #232	@ 0xe8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_UART_IRQHandler+0x66>
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fd8e 	bl	8004444 <UART_Receive_IT>
      return;
 8003928:	e25b      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800392a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80de 	beq.w	8003af0 <HAL_UART_IRQHandler+0x22c>
 8003934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003944:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80d1 	beq.w	8003af0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_UART_IRQHandler+0xae>
 800395a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800395e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0201 	orr.w	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <HAL_UART_IRQHandler+0xd2>
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <HAL_UART_IRQHandler+0xf6>
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b2:	f043 0204 	orr.w	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d011      	beq.n	80039ea <HAL_UART_IRQHandler+0x126>
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d105      	bne.n	80039de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d005      	beq.n	80039ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e2:	f043 0208 	orr.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 81f2 	beq.w	8003dd8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_UART_IRQHandler+0x14e>
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fd19 	bl	8004444 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <HAL_UART_IRQHandler+0x17a>
 8003a36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04f      	beq.n	8003ade <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fc23 	bl	800428a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d041      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1d9      	bne.n	8003a52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d013      	beq.n	8003ace <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8003ca4 <HAL_UART_IRQHandler+0x3e0>)
 8003aac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fd68 	bl	8001588 <HAL_DMA_Abort_IT>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d016      	beq.n	8003aec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003acc:	e00e      	b.n	8003aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9a5 	bl	8003e1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	e00a      	b.n	8003aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f9a1 	bl	8003e1e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003adc:	e006      	b.n	8003aec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f99d 	bl	8003e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003aea:	e175      	b.n	8003dd8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	bf00      	nop
    return;
 8003aee:	e173      	b.n	8003dd8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	f040 814f 	bne.w	8003d98 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8148 	beq.w	8003d98 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b0c:	f003 0310 	and.w	r3, r3, #16
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8141 	beq.w	8003d98 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80b6 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8145 	beq.w	8003ddc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	f080 813e 	bcs.w	8003ddc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	f000 8088 	beq.w	8003c84 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ba0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ba4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003bac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1d9      	bne.n	8003b74 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3314      	adds	r3, #20
 8003be0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003be4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003bec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e1      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3314      	adds	r3, #20
 8003c02:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c20:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e3      	bne.n	8003bfc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c54:	f023 0310 	bic.w	r3, r3, #16
 8003c58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c68:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd fc46 	bl	8001510 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7fc ffd6 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca0:	e09c      	b.n	8003ddc <HAL_UART_IRQHandler+0x518>
 8003ca2:	bf00      	nop
 8003ca4:	0800434f 	.word	0x0800434f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 808e 	beq.w	8003de0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8089 	beq.w	8003de0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ce4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cf2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3314      	adds	r3, #20
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	e853 3f00 	ldrex	r3, [r3]
 8003d14:	623b      	str	r3, [r7, #32]
   return(result);
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f023 0301 	bic.w	r3, r3, #1
 8003d1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	3314      	adds	r3, #20
 8003d26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e3      	bne.n	8003d06 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0310 	bic.w	r3, r3, #16
 8003d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	330c      	adds	r3, #12
 8003d6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d70:	61fa      	str	r2, [r7, #28]
 8003d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e3      	bne.n	8003d4c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fc ff5b 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d96:	e023      	b.n	8003de0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_UART_IRQHandler+0x4f4>
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fae0 	bl	8004376 <UART_Transmit_IT>
    return;
 8003db6:	e014      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <HAL_UART_IRQHandler+0x51e>
 8003dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fb1f 	bl	8004414 <UART_EndTransmit_IT>
    return;
 8003dd6:	e004      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003dd8:	bf00      	nop
 8003dda:	e002      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ddc:	bf00      	nop
 8003dde:	e000      	b.n	8003de2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003de0:	bf00      	nop
  }
}
 8003de2:	37e8      	adds	r7, #232	@ 0xe8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bc80      	pop	{r7}
 8003e0a:	4770      	bx	lr

08003e0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr

08003e1e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b09c      	sub	sp, #112	@ 0x70
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d172      	bne.n	8003f32 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e4e:	2200      	movs	r2, #0
 8003e50:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e5      	bne.n	8003e52 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ea6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ea8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3314      	adds	r3, #20
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	623b      	str	r3, [r7, #32]
   return(result);
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ed2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3314      	adds	r3, #20
 8003ed8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003eda:	633a      	str	r2, [r7, #48]	@ 0x30
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d119      	bne.n	8003f32 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f023 0310 	bic.w	r3, r3, #16
 8003f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003f1e:	61fa      	str	r2, [r7, #28]
 8003f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f34:	2200      	movs	r2, #0
 8003f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d106      	bne.n	8003f4e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f44:	4619      	mov	r1, r3
 8003f46:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003f48:	f7fc fe80 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f4c:	e002      	b.n	8003f54 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003f4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003f50:	f7ff ff53 	bl	8003dfa <HAL_UART_RxCpltCallback>
}
 8003f54:	bf00      	nop
 8003f56:	3770      	adds	r7, #112	@ 0x70
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d108      	bne.n	8003f8a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4619      	mov	r1, r3
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7fc fe62 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f88:	e002      	b.n	8003f90 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff ff3e 	bl	8003e0c <HAL_UART_RxHalfCpltCallback>
}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b21      	cmp	r3, #33	@ 0x21
 8003fca:	d108      	bne.n	8003fde <UART_DMAError+0x46>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003fd8:	68b8      	ldr	r0, [r7, #8]
 8003fda:	f000 f92f 	bl	800423c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b22      	cmp	r3, #34	@ 0x22
 8003ffe:	d108      	bne.n	8004012 <UART_DMAError+0x7a>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800400c:	68b8      	ldr	r0, [r7, #8]
 800400e:	f000 f93c 	bl	800428a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f043 0210 	orr.w	r2, r3, #16
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f7ff fefd 	bl	8003e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b090      	sub	sp, #64	@ 0x40
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403c:	e050      	b.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d04c      	beq.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0x30>
 800404c:	f7fd f8a0 	bl	8001190 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004058:	429a      	cmp	r2, r3
 800405a:	d241      	bcs.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	330c      	adds	r3, #12
 800407a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800407c:	637a      	str	r2, [r7, #52]	@ 0x34
 800407e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	613b      	str	r3, [r7, #16]
   return(result);
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f023 0301 	bic.w	r3, r3, #1
 80040a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040b0:	623a      	str	r2, [r7, #32]
 80040b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69f9      	ldr	r1, [r7, #28]
 80040b6:	6a3a      	ldr	r2, [r7, #32]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e00f      	b.n	8004100 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d09f      	beq.n	800403e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3740      	adds	r7, #64	@ 0x40
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b098      	sub	sp, #96	@ 0x60
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4613      	mov	r3, r2
 8004114:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2222      	movs	r2, #34	@ 0x22
 800412c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	4a3e      	ldr	r2, [pc, #248]	@ (8004230 <UART_Start_Receive_DMA+0x128>)
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	4a3d      	ldr	r2, [pc, #244]	@ (8004234 <UART_Start_Receive_DMA+0x12c>)
 800413e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	4a3c      	ldr	r2, [pc, #240]	@ (8004238 <UART_Start_Receive_DMA+0x130>)
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414c:	2200      	movs	r2, #0
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3304      	adds	r3, #4
 8004160:	4619      	mov	r1, r3
 8004162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	f7fd f972 	bl	8001450 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d019      	beq.n	80041be <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	330c      	adds	r3, #12
 8004190:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800419a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800419c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041aa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80041b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80041b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e5      	bne.n	800418a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3314      	adds	r3, #20
 80041c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3314      	adds	r3, #20
 80041dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041de:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80041e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1e5      	bne.n	80041be <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3314      	adds	r3, #20
 80041f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	617b      	str	r3, [r7, #20]
   return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004208:	653b      	str	r3, [r7, #80]	@ 0x50
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3314      	adds	r3, #20
 8004210:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004212:	627a      	str	r2, [r7, #36]	@ 0x24
 8004214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6a39      	ldr	r1, [r7, #32]
 8004218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e5      	bne.n	80041f2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3760      	adds	r7, #96	@ 0x60
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	08003e31 	.word	0x08003e31
 8004234:	08003f5d 	.word	0x08003f5d
 8004238:	08003f99 	.word	0x08003f99

0800423c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	60bb      	str	r3, [r7, #8]
   return(result);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	61ba      	str	r2, [r7, #24]
 8004266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6979      	ldr	r1, [r7, #20]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	613b      	str	r3, [r7, #16]
   return(result);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004280:	bf00      	nop
 8004282:	3724      	adds	r7, #36	@ 0x24
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b095      	sub	sp, #84	@ 0x54
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	330c      	adds	r3, #12
 8004298:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80042b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f023 0301 	bic.w	r3, r3, #1
 80042dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d119      	bne.n	8004336 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	60bb      	str	r3, [r7, #8]
   return(result);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	330c      	adds	r3, #12
 8004320:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004322:	61ba      	str	r2, [r7, #24]
 8004324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e5      	bne.n	8004302 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004344:	bf00      	nop
 8004346:	3754      	adds	r7, #84	@ 0x54
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff fd58 	bl	8003e1e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b21      	cmp	r3, #33	@ 0x21
 8004388:	d13e      	bne.n	8004408 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004392:	d114      	bne.n	80043be <UART_Transmit_IT+0x48>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d110      	bne.n	80043be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	621a      	str	r2, [r3, #32]
 80043bc:	e008      	b.n	80043d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6211      	str	r1, [r2, #32]
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4619      	mov	r1, r3
 80043de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10f      	bne.n	8004404 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004402:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fcd7 	bl	8003de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	@ 0x30
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b22      	cmp	r3, #34	@ 0x22
 8004456:	f040 80ae 	bne.w	80045b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004462:	d117      	bne.n	8004494 <UART_Receive_IT+0x50>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d113      	bne.n	8004494 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004474:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	b29a      	uxth	r2, r3
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	629a      	str	r2, [r3, #40]	@ 0x28
 8004492:	e026      	b.n	80044e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a6:	d007      	beq.n	80044b8 <UART_Receive_IT+0x74>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <UART_Receive_IT+0x82>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e008      	b.n	80044d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4619      	mov	r1, r3
 80044f0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d15d      	bne.n	80045b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0220 	bic.w	r2, r2, #32
 8004504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004514:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d135      	bne.n	80045a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	613b      	str	r3, [r7, #16]
   return(result);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004562:	623a      	str	r2, [r7, #32]
 8004564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	69f9      	ldr	r1, [r7, #28]
 8004568:	6a3a      	ldr	r2, [r7, #32]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d10a      	bne.n	800459a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800459e:	4619      	mov	r1, r3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fc fb53 	bl	8000c4c <HAL_UARTEx_RxEventCallback>
 80045a6:	e002      	b.n	80045ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fc26 	bl	8003dfa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e002      	b.n	80045b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3730      	adds	r7, #48	@ 0x30
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80045fa:	f023 030c 	bic.w	r3, r3, #12
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	430b      	orrs	r3, r1
 8004606:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2c      	ldr	r2, [pc, #176]	@ (80046d4 <UART_SetConfig+0x114>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004628:	f7fd febc 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	e002      	b.n	8004636 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004630:	f7fd fea4 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8004634:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	4a22      	ldr	r2, [pc, #136]	@ (80046d8 <UART_SetConfig+0x118>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	0119      	lsls	r1, r3, #4
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009a      	lsls	r2, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	fbb2 f2f3 	udiv	r2, r2, r3
 800466c:	4b1a      	ldr	r3, [pc, #104]	@ (80046d8 <UART_SetConfig+0x118>)
 800466e:	fba3 0302 	umull	r0, r3, r3, r2
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2064      	movs	r0, #100	@ 0x64
 8004676:	fb00 f303 	mul.w	r3, r0, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	3332      	adds	r3, #50	@ 0x32
 8004680:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <UART_SetConfig+0x118>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800468c:	4419      	add	r1, r3
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009a      	lsls	r2, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a4:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <UART_SetConfig+0x118>)
 80046a6:	fba3 0302 	umull	r0, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2064      	movs	r0, #100	@ 0x64
 80046ae:	fb00 f303 	mul.w	r3, r0, r3
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	3332      	adds	r3, #50	@ 0x32
 80046b8:	4a07      	ldr	r2, [pc, #28]	@ (80046d8 <UART_SetConfig+0x118>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	f003 020f 	and.w	r2, r3, #15
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	440a      	add	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40013800 	.word	0x40013800
 80046d8:	51eb851f 	.word	0x51eb851f

080046dc <HAL_COMH_Receive>:
uint16_t  pTxData = 0;

Return_Type HAL_COMH_Init(void);


Return_Type HAL_COMH_Receive(void){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
	Return_Type Return_Result = Return_NOT_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	71fb      	strb	r3, [r7, #7]
	if (HAL_DCM_Receive() == Return_OK){
 80046e6:	f7fb fd33 	bl	8000150 <HAL_DCM_Receive>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_COMH_Receive+0x18>
		Return_Result = Return_OK;
 80046f0:	2301      	movs	r3, #1
 80046f2:	71fb      	strb	r3, [r7, #7]
	}
	return Return_Result;
 80046f4:	79fb      	ldrb	r3, [r7, #7]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_COMH_Send>:


Return_Type HAL_COMH_Send(void){
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
	Return_Type Return_Result = Return_NOT_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	71fb      	strb	r3, [r7, #7]
	uint8_t check = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	71bb      	strb	r3, [r7, #6]

	pTxData = DATA.sensor1; //Sensor1
 800470e:	4ba8      	ldr	r3, [pc, #672]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	4ba8      	ldr	r3, [pc, #672]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004714:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004716:	230a      	movs	r3, #10
 8004718:	2202      	movs	r2, #2
 800471a:	49a6      	ldr	r1, [pc, #664]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800471c:	48a6      	ldr	r0, [pc, #664]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 800471e:	f7fd ff27 	bl	8002570 <HAL_SPI_Transmit>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_COMH_Send+0x2c>
		check &= 0;
 8004728:	2300      	movs	r3, #0
 800472a:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor2; //Sensor2
 800472c:	4ba0      	ldr	r3, [pc, #640]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 800472e:	885a      	ldrh	r2, [r3, #2]
 8004730:	4ba0      	ldr	r3, [pc, #640]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004732:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004734:	230a      	movs	r3, #10
 8004736:	2202      	movs	r2, #2
 8004738:	499e      	ldr	r1, [pc, #632]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800473a:	489f      	ldr	r0, [pc, #636]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 800473c:	f7fd ff18 	bl	8002570 <HAL_SPI_Transmit>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_COMH_Send+0x4a>
		check &= 0;
 8004746:	2300      	movs	r3, #0
 8004748:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor3; //Sensor3
 800474a:	4b99      	ldr	r3, [pc, #612]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 800474c:	889a      	ldrh	r2, [r3, #4]
 800474e:	4b99      	ldr	r3, [pc, #612]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004750:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004752:	230a      	movs	r3, #10
 8004754:	2202      	movs	r2, #2
 8004756:	4997      	ldr	r1, [pc, #604]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004758:	4897      	ldr	r0, [pc, #604]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 800475a:	f7fd ff09 	bl	8002570 <HAL_SPI_Transmit>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <HAL_COMH_Send+0x68>
		check &= 0;
 8004764:	2300      	movs	r3, #0
 8004766:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor4; //Sensor4
 8004768:	4b91      	ldr	r3, [pc, #580]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 800476a:	88da      	ldrh	r2, [r3, #6]
 800476c:	4b91      	ldr	r3, [pc, #580]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800476e:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004770:	230a      	movs	r3, #10
 8004772:	2202      	movs	r2, #2
 8004774:	498f      	ldr	r1, [pc, #572]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004776:	4890      	ldr	r0, [pc, #576]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004778:	f7fd fefa 	bl	8002570 <HAL_SPI_Transmit>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_COMH_Send+0x86>
		check &= 0;
 8004782:	2300      	movs	r3, #0
 8004784:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor5; //Sensor5
 8004786:	4b8a      	ldr	r3, [pc, #552]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004788:	891a      	ldrh	r2, [r3, #8]
 800478a:	4b8a      	ldr	r3, [pc, #552]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800478c:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 800478e:	230a      	movs	r3, #10
 8004790:	2202      	movs	r2, #2
 8004792:	4988      	ldr	r1, [pc, #544]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004794:	4888      	ldr	r0, [pc, #544]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004796:	f7fd feeb 	bl	8002570 <HAL_SPI_Transmit>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_COMH_Send+0xa4>
		check &= 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor6; //Sensor6
 80047a4:	4b82      	ldr	r3, [pc, #520]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80047a6:	895a      	ldrh	r2, [r3, #10]
 80047a8:	4b82      	ldr	r3, [pc, #520]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80047aa:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80047ac:	230a      	movs	r3, #10
 80047ae:	2202      	movs	r2, #2
 80047b0:	4980      	ldr	r1, [pc, #512]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80047b2:	4881      	ldr	r0, [pc, #516]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 80047b4:	f7fd fedc 	bl	8002570 <HAL_SPI_Transmit>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_COMH_Send+0xc2>
		check &= 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor7; //Sensor7
 80047c2:	4b7b      	ldr	r3, [pc, #492]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80047c4:	899a      	ldrh	r2, [r3, #12]
 80047c6:	4b7b      	ldr	r3, [pc, #492]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80047c8:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80047ca:	230a      	movs	r3, #10
 80047cc:	2202      	movs	r2, #2
 80047ce:	4979      	ldr	r1, [pc, #484]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80047d0:	4879      	ldr	r0, [pc, #484]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 80047d2:	f7fd fecd 	bl	8002570 <HAL_SPI_Transmit>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_COMH_Send+0xe0>
		check &= 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.sensor8; //Sensor8
 80047e0:	4b73      	ldr	r3, [pc, #460]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80047e2:	89da      	ldrh	r2, [r3, #14]
 80047e4:	4b73      	ldr	r3, [pc, #460]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80047e6:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80047e8:	230a      	movs	r3, #10
 80047ea:	2202      	movs	r2, #2
 80047ec:	4971      	ldr	r1, [pc, #452]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80047ee:	4872      	ldr	r0, [pc, #456]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 80047f0:	f7fd febe 	bl	8002570 <HAL_SPI_Transmit>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_COMH_Send+0xfe>
		check &= 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	71bb      	strb	r3, [r7, #6]
	}

	///////////////////////////////////////

	pTxData = DATA.DTC_1[0];
 80047fe:	4b6c      	ldr	r3, [pc, #432]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004800:	7c1b      	ldrb	r3, [r3, #16]
 8004802:	461a      	mov	r2, r3
 8004804:	4b6b      	ldr	r3, [pc, #428]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004806:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004808:	230a      	movs	r3, #10
 800480a:	2202      	movs	r2, #2
 800480c:	4969      	ldr	r1, [pc, #420]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800480e:	486a      	ldr	r0, [pc, #424]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004810:	f7fd feae 	bl	8002570 <HAL_SPI_Transmit>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_COMH_Send+0x11e>
		check &= 0;
 800481a:	2300      	movs	r3, #0
 800481c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_1[1];
 800481e:	4b64      	ldr	r3, [pc, #400]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004820:	7c5b      	ldrb	r3, [r3, #17]
 8004822:	461a      	mov	r2, r3
 8004824:	4b63      	ldr	r3, [pc, #396]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004826:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004828:	230a      	movs	r3, #10
 800482a:	2202      	movs	r2, #2
 800482c:	4961      	ldr	r1, [pc, #388]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800482e:	4862      	ldr	r0, [pc, #392]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004830:	f7fd fe9e 	bl	8002570 <HAL_SPI_Transmit>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_COMH_Send+0x13e>
		check &= 0;
 800483a:	2300      	movs	r3, #0
 800483c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_1[2];
 800483e:	4b5c      	ldr	r3, [pc, #368]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004840:	7c9b      	ldrb	r3, [r3, #18]
 8004842:	461a      	mov	r2, r3
 8004844:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004846:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004848:	230a      	movs	r3, #10
 800484a:	2202      	movs	r2, #2
 800484c:	4959      	ldr	r1, [pc, #356]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800484e:	485a      	ldr	r0, [pc, #360]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004850:	f7fd fe8e 	bl	8002570 <HAL_SPI_Transmit>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_COMH_Send+0x15e>
		check &= 0;
 800485a:	2300      	movs	r3, #0
 800485c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_1[3];
 800485e:	4b54      	ldr	r3, [pc, #336]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004860:	7cdb      	ldrb	r3, [r3, #19]
 8004862:	461a      	mov	r2, r3
 8004864:	4b53      	ldr	r3, [pc, #332]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004866:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004868:	230a      	movs	r3, #10
 800486a:	2202      	movs	r2, #2
 800486c:	4951      	ldr	r1, [pc, #324]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800486e:	4852      	ldr	r0, [pc, #328]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004870:	f7fd fe7e 	bl	8002570 <HAL_SPI_Transmit>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_COMH_Send+0x17e>
		check &= 0;
 800487a:	2300      	movs	r3, #0
 800487c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_1[4];
 800487e:	4b4c      	ldr	r3, [pc, #304]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004880:	7d1b      	ldrb	r3, [r3, #20]
 8004882:	461a      	mov	r2, r3
 8004884:	4b4b      	ldr	r3, [pc, #300]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004886:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004888:	230a      	movs	r3, #10
 800488a:	2202      	movs	r2, #2
 800488c:	4949      	ldr	r1, [pc, #292]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800488e:	484a      	ldr	r0, [pc, #296]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004890:	f7fd fe6e 	bl	8002570 <HAL_SPI_Transmit>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_COMH_Send+0x19e>
		check &= 0;
 800489a:	2300      	movs	r3, #0
 800489c:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.DTC_2[0];
 800489e:	4b44      	ldr	r3, [pc, #272]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80048a0:	7d5b      	ldrb	r3, [r3, #21]
 80048a2:	461a      	mov	r2, r3
 80048a4:	4b43      	ldr	r3, [pc, #268]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80048a6:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80048a8:	230a      	movs	r3, #10
 80048aa:	2202      	movs	r2, #2
 80048ac:	4941      	ldr	r1, [pc, #260]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80048ae:	4842      	ldr	r0, [pc, #264]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 80048b0:	f7fd fe5e 	bl	8002570 <HAL_SPI_Transmit>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_COMH_Send+0x1be>
		check &= 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_2[1];
 80048be:	4b3c      	ldr	r3, [pc, #240]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80048c0:	7d9b      	ldrb	r3, [r3, #22]
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b3b      	ldr	r3, [pc, #236]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80048c6:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80048c8:	230a      	movs	r3, #10
 80048ca:	2202      	movs	r2, #2
 80048cc:	4939      	ldr	r1, [pc, #228]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80048ce:	483a      	ldr	r0, [pc, #232]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 80048d0:	f7fd fe4e 	bl	8002570 <HAL_SPI_Transmit>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_COMH_Send+0x1de>
		check &= 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_2[2];
 80048de:	4b34      	ldr	r3, [pc, #208]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80048e0:	7ddb      	ldrb	r3, [r3, #23]
 80048e2:	461a      	mov	r2, r3
 80048e4:	4b33      	ldr	r3, [pc, #204]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80048e6:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80048e8:	230a      	movs	r3, #10
 80048ea:	2202      	movs	r2, #2
 80048ec:	4931      	ldr	r1, [pc, #196]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80048ee:	4832      	ldr	r0, [pc, #200]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 80048f0:	f7fd fe3e 	bl	8002570 <HAL_SPI_Transmit>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_COMH_Send+0x1fe>
		check &= 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_2[3];
 80048fe:	4b2c      	ldr	r3, [pc, #176]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004900:	7e1b      	ldrb	r3, [r3, #24]
 8004902:	461a      	mov	r2, r3
 8004904:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004906:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004908:	230a      	movs	r3, #10
 800490a:	2202      	movs	r2, #2
 800490c:	4929      	ldr	r1, [pc, #164]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800490e:	482a      	ldr	r0, [pc, #168]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004910:	f7fd fe2e 	bl	8002570 <HAL_SPI_Transmit>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_COMH_Send+0x21e>
		check &= 0;
 800491a:	2300      	movs	r3, #0
 800491c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_2[4];
 800491e:	4b24      	ldr	r3, [pc, #144]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004920:	7e5b      	ldrb	r3, [r3, #25]
 8004922:	461a      	mov	r2, r3
 8004924:	4b23      	ldr	r3, [pc, #140]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004926:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004928:	230a      	movs	r3, #10
 800492a:	2202      	movs	r2, #2
 800492c:	4921      	ldr	r1, [pc, #132]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800492e:	4822      	ldr	r0, [pc, #136]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004930:	f7fd fe1e 	bl	8002570 <HAL_SPI_Transmit>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_COMH_Send+0x23e>
		check &= 0;
 800493a:	2300      	movs	r3, #0
 800493c:	71bb      	strb	r3, [r7, #6]
	}

	pTxData = DATA.DTC_3[0];
 800493e:	4b1c      	ldr	r3, [pc, #112]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004940:	7e9b      	ldrb	r3, [r3, #26]
 8004942:	461a      	mov	r2, r3
 8004944:	4b1b      	ldr	r3, [pc, #108]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004946:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004948:	230a      	movs	r3, #10
 800494a:	2202      	movs	r2, #2
 800494c:	4919      	ldr	r1, [pc, #100]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800494e:	481a      	ldr	r0, [pc, #104]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004950:	f7fd fe0e 	bl	8002570 <HAL_SPI_Transmit>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_COMH_Send+0x25e>
		check &= 0;
 800495a:	2300      	movs	r3, #0
 800495c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_3[1];
 800495e:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004960:	7edb      	ldrb	r3, [r3, #27]
 8004962:	461a      	mov	r2, r3
 8004964:	4b13      	ldr	r3, [pc, #76]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004966:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004968:	230a      	movs	r3, #10
 800496a:	2202      	movs	r2, #2
 800496c:	4911      	ldr	r1, [pc, #68]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800496e:	4812      	ldr	r0, [pc, #72]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004970:	f7fd fdfe 	bl	8002570 <HAL_SPI_Transmit>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_COMH_Send+0x27e>
		check &= 0;
 800497a:	2300      	movs	r3, #0
 800497c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_3[2];
 800497e:	4b0c      	ldr	r3, [pc, #48]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 8004980:	7f1b      	ldrb	r3, [r3, #28]
 8004982:	461a      	mov	r2, r3
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 8004986:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 8004988:	230a      	movs	r3, #10
 800498a:	2202      	movs	r2, #2
 800498c:	4909      	ldr	r1, [pc, #36]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 800498e:	480a      	ldr	r0, [pc, #40]	@ (80049b8 <HAL_COMH_Send+0x2b8>)
 8004990:	f7fd fdee 	bl	8002570 <HAL_SPI_Transmit>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_COMH_Send+0x29e>
		check &= 0;
 800499a:	2300      	movs	r3, #0
 800499c:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_3[3];
 800499e:	4b04      	ldr	r3, [pc, #16]	@ (80049b0 <HAL_COMH_Send+0x2b0>)
 80049a0:	7f5b      	ldrb	r3, [r3, #29]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <HAL_COMH_Send+0x2b4>)
 80049a6:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80049a8:	230a      	movs	r3, #10
 80049aa:	2202      	movs	r2, #2
 80049ac:	e006      	b.n	80049bc <HAL_COMH_Send+0x2bc>
 80049ae:	bf00      	nop
 80049b0:	20000494 	.word	0x20000494
 80049b4:	20000490 	.word	0x20000490
 80049b8:	20000328 	.word	0x20000328
 80049bc:	4912      	ldr	r1, [pc, #72]	@ (8004a08 <HAL_COMH_Send+0x308>)
 80049be:	4813      	ldr	r0, [pc, #76]	@ (8004a0c <HAL_COMH_Send+0x30c>)
 80049c0:	f7fd fdd6 	bl	8002570 <HAL_SPI_Transmit>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_COMH_Send+0x2ce>
		check &= 0;
 80049ca:	2300      	movs	r3, #0
 80049cc:	71bb      	strb	r3, [r7, #6]
	}
	pTxData = DATA.DTC_3[4];
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <HAL_COMH_Send+0x310>)
 80049d0:	7f9b      	ldrb	r3, [r3, #30]
 80049d2:	461a      	mov	r2, r3
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <HAL_COMH_Send+0x308>)
 80049d6:	801a      	strh	r2, [r3, #0]
	if(HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10) != HAL_OK){
 80049d8:	230a      	movs	r3, #10
 80049da:	2202      	movs	r2, #2
 80049dc:	490a      	ldr	r1, [pc, #40]	@ (8004a08 <HAL_COMH_Send+0x308>)
 80049de:	480b      	ldr	r0, [pc, #44]	@ (8004a0c <HAL_COMH_Send+0x30c>)
 80049e0:	f7fd fdc6 	bl	8002570 <HAL_SPI_Transmit>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_COMH_Send+0x2ee>
		check &= 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	71bb      	strb	r3, [r7, #6]
	}
	if(check == 1){
 80049ee:	79bb      	ldrb	r3, [r7, #6]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_COMH_Send+0x2f8>
		Return_Result = Return_OK;
 80049f4:	2301      	movs	r3, #1
 80049f6:	71fb      	strb	r3, [r7, #7]
	}

	pTxData = 0;
 80049f8:	4b03      	ldr	r3, [pc, #12]	@ (8004a08 <HAL_COMH_Send+0x308>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	801a      	strh	r2, [r3, #0]

	return Return_Result;
 80049fe:	79fb      	ldrb	r3, [r7, #7]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000490 	.word	0x20000490
 8004a0c:	20000328 	.word	0x20000328
 8004a10:	20000494 	.word	0x20000494

08004a14 <SERIAL_COM_Receive>:


Return_Type SERIAL_COM_Init(void);

///
Return_Type SERIAL_COM_Receive(uint8_t * RXBUFFER){
 8004a14:	b480      	push	{r7}
 8004a16:	b08b      	sub	sp, #44	@ 0x2c
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]

	uint16_t Temp_Convert = 0, Counter_array = 0,Counter_Sensor=0, char_array = 0, stop_value = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004a20:	2300      	movs	r3, #0
 8004a22:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004a24:	2300      	movs	r3, #0
 8004a26:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004a28:	2300      	movs	r3, #0
 8004a2a:	83fb      	strh	r3, [r7, #30]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	843b      	strh	r3, [r7, #32]
	uint16_t sensor[8];
	while(stop_value < 8){
 8004a30:	e034      	b.n	8004a9c <SERIAL_COM_Receive+0x88>
		if(RXBUFFER[Counter_array] >= '0' && RXBUFFER[Counter_array] <= '9'){  //(8)
 8004a32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8004a3c:	d916      	bls.n	8004a6c <SERIAL_COM_Receive+0x58>
 8004a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b39      	cmp	r3, #57	@ 0x39
 8004a48:	d810      	bhi.n	8004a6c <SERIAL_COM_Receive+0x58>
			Temp_Convert = Temp_Convert *10;
 8004a4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	0092      	lsls	r2, r2, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	84fb      	strh	r3, [r7, #38]	@ 0x26
			char_array =RXBUFFER[Counter_array]-'0';
 8004a56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	3b30      	subs	r3, #48	@ 0x30
 8004a60:	83fb      	strh	r3, [r7, #30]
			Temp_Convert = Temp_Convert + char_array;
 8004a62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004a64:	8bfb      	ldrh	r3, [r7, #30]
 8004a66:	4413      	add	r3, r2
 8004a68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004a6a:	e014      	b.n	8004a96 <SERIAL_COM_Receive+0x82>
		}else if(RXBUFFER[Counter_array] == ',' ){
 8004a6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b2c      	cmp	r3, #44	@ 0x2c
 8004a76:	d10e      	bne.n	8004a96 <SERIAL_COM_Receive+0x82>
			sensor[Counter_Sensor] = Temp_Convert;
 8004a78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	3328      	adds	r3, #40	@ 0x28
 8004a7e:	443b      	add	r3, r7
 8004a80:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004a82:	f823 2c1c 	strh.w	r2, [r3, #-28]
			Counter_Sensor++;
 8004a86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a88:	3301      	adds	r3, #1
 8004a8a:	847b      	strh	r3, [r7, #34]	@ 0x22
			Temp_Convert = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
			stop_value++;
 8004a90:	8c3b      	ldrh	r3, [r7, #32]
 8004a92:	3301      	adds	r3, #1
 8004a94:	843b      	strh	r3, [r7, #32]
		}
		Counter_array++;
 8004a96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a98:	3301      	adds	r3, #1
 8004a9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	while(stop_value < 8){
 8004a9c:	8c3b      	ldrh	r3, [r7, #32]
 8004a9e:	2b07      	cmp	r3, #7
 8004aa0:	d9c7      	bls.n	8004a32 <SERIAL_COM_Receive+0x1e>
	}

	DATA.sensor1 = sensor[0];
 8004aa2:	89ba      	ldrh	r2, [r7, #12]
 8004aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004aa6:	801a      	strh	r2, [r3, #0]
	DATA.sensor2 = sensor[1];
 8004aa8:	89fa      	ldrh	r2, [r7, #14]
 8004aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004aac:	805a      	strh	r2, [r3, #2]
	DATA.sensor3 = sensor[2];
 8004aae:	8a3a      	ldrh	r2, [r7, #16]
 8004ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004ab2:	809a      	strh	r2, [r3, #4]
	DATA.sensor4 = sensor[3];
 8004ab4:	8a7a      	ldrh	r2, [r7, #18]
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004ab8:	80da      	strh	r2, [r3, #6]
	DATA.sensor5 = sensor[4];
 8004aba:	8aba      	ldrh	r2, [r7, #20]
 8004abc:	4b08      	ldr	r3, [pc, #32]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004abe:	811a      	strh	r2, [r3, #8]
	DATA.sensor6 = sensor[5];
 8004ac0:	8afa      	ldrh	r2, [r7, #22]
 8004ac2:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004ac4:	815a      	strh	r2, [r3, #10]
	DATA.sensor7 = sensor[6];
 8004ac6:	8b3a      	ldrh	r2, [r7, #24]
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004aca:	819a      	strh	r2, [r3, #12]
	DATA.sensor8 = sensor[7];
 8004acc:	8b7a      	ldrh	r2, [r7, #26]
 8004ace:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <SERIAL_COM_Receive+0xcc>)
 8004ad0:	81da      	strh	r2, [r3, #14]

	return Return_OK;
 8004ad2:	2301      	movs	r3, #1
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	372c      	adds	r7, #44	@ 0x2c
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	20000494 	.word	0x20000494

08004ae4 <SERIAL_COM_Send>:

///send uart
Return_Type SERIAL_COM_Send(uint8_t  *TXBUFFER , uint8_t size){
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
	Return_Type Return_Result = Return_NOT_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	73fb      	strb	r3, [r7, #15]
	if (HAL_UART_Transmit(&huart1, TXBUFFER, size, 10) == HAL_OK){
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	230a      	movs	r3, #10
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4806      	ldr	r0, [pc, #24]	@ (8004b18 <SERIAL_COM_Send+0x34>)
 8004afe:	f7fe fe01 	bl	8003704 <HAL_UART_Transmit>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <SERIAL_COM_Send+0x28>
		Return_Result = Return_OK;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
	}
	return Return_Result;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000380 	.word	0x20000380

08004b1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b2e:	2b84      	cmp	r3, #132	@ 0x84
 8004b30:	d005      	beq.n	8004b3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004b32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	3303      	adds	r3, #3
 8004b3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004b4e:	f000 faef 	bl	8005130 <vTaskStartScheduler>
  
  return osOK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b5a:	b089      	sub	sp, #36	@ 0x24
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d020      	beq.n	8004bac <osThreadCreate+0x54>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d01c      	beq.n	8004bac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685c      	ldr	r4, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691e      	ldr	r6, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff ffc9 	bl	8004b1c <makeFreeRtosPriority>
 8004b8a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b94:	9202      	str	r2, [sp, #8]
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	9100      	str	r1, [sp, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 f8e8 	bl	8004d76 <xTaskCreateStatic>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e01c      	b.n	8004be6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685c      	ldr	r4, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bb8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ffab 	bl	8004b1c <makeFreeRtosPriority>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	9200      	str	r2, [sp, #0]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 f92c 	bl	8004e34 <xTaskCreate>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d001      	beq.n	8004be6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <osDelay+0x16>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	e000      	b.n	8004c08 <osDelay+0x18>
 8004c06:	2301      	movs	r3, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fa5b 	bl	80050c4 <vTaskDelay>
  
  return osOK;
 8004c0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f103 0208 	add.w	r2, r3, #8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 0208 	add.w	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f103 0208 	add.w	r2, r3, #8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr

08004c56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d103      	bne.n	8004cd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e00c      	b.n	8004cee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e002      	b.n	8004ce2 <vListInsert+0x2e>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d2f6      	bcs.n	8004cdc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bc80      	pop	{r7}
 8004d22:	4770      	bx	lr

08004d24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6892      	ldr	r2, [r2, #8]
 8004d3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6852      	ldr	r2, [r2, #4]
 8004d44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d103      	bne.n	8004d58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b08e      	sub	sp, #56	@ 0x38
 8004d7a:	af04      	add	r7, sp, #16
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
 8004d82:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	61fb      	str	r3, [r7, #28]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004dc0:	23a0      	movs	r3, #160	@ 0xa0
 8004dc2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dc8:	d00b      	beq.n	8004de2 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	61bb      	str	r3, [r7, #24]
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	e7fd      	b.n	8004dde <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01e      	beq.n	8004e26 <xTaskCreateStatic+0xb0>
 8004de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01b      	beq.n	8004e26 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004df6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e00:	2300      	movs	r3, #0
 8004e02:	9303      	str	r3, [sp, #12]
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	9302      	str	r3, [sp, #8]
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f851 	bl	8004ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004e20:	f000 f8e6 	bl	8004ff0 <prvAddNewTaskToReadyList>
 8004e24:	e001      	b.n	8004e2a <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e2a:	697b      	ldr	r3, [r7, #20]
	}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3728      	adds	r7, #40	@ 0x28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08c      	sub	sp, #48	@ 0x30
 8004e38:	af04      	add	r7, sp, #16
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e44:	88fb      	ldrh	r3, [r7, #6]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fea1 	bl	8005b90 <pvPortMalloc>
 8004e4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e56:	20a0      	movs	r0, #160	@ 0xa0
 8004e58:	f000 fe9a 	bl	8005b90 <pvPortMalloc>
 8004e5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e6a:	e005      	b.n	8004e78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	f000 ff57 	bl	8005d20 <vPortFree>
 8004e72:	e001      	b.n	8004e78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e86:	88fa      	ldrh	r2, [r7, #6]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	9303      	str	r3, [sp, #12]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	9302      	str	r3, [sp, #8]
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f80f 	bl	8004ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ea2:	69f8      	ldr	r0, [r7, #28]
 8004ea4:	f000 f8a4 	bl	8004ff0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	61bb      	str	r3, [r7, #24]
 8004eac:	e002      	b.n	8004eb4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004eb4:	69bb      	ldr	r3, [r7, #24]
	}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f023 0307 	bic.w	r3, r3, #7
 8004ee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00b      	beq.n	8004f0a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	617b      	str	r3, [r7, #20]
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	e7fd      	b.n	8004f06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	e012      	b.n	8004f36 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	7819      	ldrb	r1, [r3, #0]
 8004f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3334      	adds	r3, #52	@ 0x34
 8004f20:	460a      	mov	r2, r1
 8004f22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	4413      	add	r3, r2
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	2b0f      	cmp	r3, #15
 8004f3a:	d9e9      	bls.n	8004f10 <prvInitialiseNewTask+0x50>
 8004f3c:	e000      	b.n	8004f40 <prvInitialiseNewTask+0x80>
		{
			break;
 8004f3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	2b06      	cmp	r3, #6
 8004f4c:	d901      	bls.n	8004f52 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f4e:	2306      	movs	r3, #6
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f56:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	2200      	movs	r2, #0
 8004f62:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	3304      	adds	r3, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fe74 	bl	8004c56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f70:	3318      	adds	r3, #24
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff fe6f 	bl	8004c56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	f1c3 0207 	rsb	r2, r3, #7
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f8c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	334c      	adds	r3, #76	@ 0x4c
 8004fa2:	224c      	movs	r2, #76	@ 0x4c
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 ffd0 	bl	8005f4c <memset>
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <prvInitialiseNewTask+0x124>)
 8004fb0:	651a      	str	r2, [r3, #80]	@ 0x50
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe8 <prvInitialiseNewTask+0x128>)
 8004fb6:	655a      	str	r2, [r3, #84]	@ 0x54
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	4a0c      	ldr	r2, [pc, #48]	@ (8004fec <prvInitialiseNewTask+0x12c>)
 8004fbc:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	68f9      	ldr	r1, [r7, #12]
 8004fc2:	69b8      	ldr	r0, [r7, #24]
 8004fc4:	f000 fc30 	bl	8005828 <pxPortInitialiseStack>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20001200 	.word	0x20001200
 8004fe8:	20001268 	.word	0x20001268
 8004fec:	200012d0 	.word	0x200012d0

08004ff0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ff8:	f000 fd08 	bl	8005a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80050a8 <prvAddNewTaskToReadyList+0xb8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	4a29      	ldr	r2, [pc, #164]	@ (80050a8 <prvAddNewTaskToReadyList+0xb8>)
 8005004:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005006:	4b29      	ldr	r3, [pc, #164]	@ (80050ac <prvAddNewTaskToReadyList+0xbc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800500e:	4a27      	ldr	r2, [pc, #156]	@ (80050ac <prvAddNewTaskToReadyList+0xbc>)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005014:	4b24      	ldr	r3, [pc, #144]	@ (80050a8 <prvAddNewTaskToReadyList+0xb8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d110      	bne.n	800503e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800501c:	f000 fad6 	bl	80055cc <prvInitialiseTaskLists>
 8005020:	e00d      	b.n	800503e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005022:	4b23      	ldr	r3, [pc, #140]	@ (80050b0 <prvAddNewTaskToReadyList+0xc0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800502a:	4b20      	ldr	r3, [pc, #128]	@ (80050ac <prvAddNewTaskToReadyList+0xbc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	429a      	cmp	r2, r3
 8005036:	d802      	bhi.n	800503e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005038:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <prvAddNewTaskToReadyList+0xbc>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800503e:	4b1d      	ldr	r3, [pc, #116]	@ (80050b4 <prvAddNewTaskToReadyList+0xc4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a1b      	ldr	r2, [pc, #108]	@ (80050b4 <prvAddNewTaskToReadyList+0xc4>)
 8005046:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	2201      	movs	r2, #1
 800504e:	409a      	lsls	r2, r3
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4313      	orrs	r3, r2
 8005056:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <prvAddNewTaskToReadyList+0xc8>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a15      	ldr	r2, [pc, #84]	@ (80050bc <prvAddNewTaskToReadyList+0xcc>)
 8005068:	441a      	add	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f7ff fdfc 	bl	8004c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005076:	f000 fcf9 	bl	8005a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800507a:	4b0d      	ldr	r3, [pc, #52]	@ (80050b0 <prvAddNewTaskToReadyList+0xc0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00e      	beq.n	80050a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <prvAddNewTaskToReadyList+0xbc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	429a      	cmp	r2, r3
 800508e:	d207      	bcs.n	80050a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005090:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <prvAddNewTaskToReadyList+0xd0>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200005b4 	.word	0x200005b4
 80050ac:	200004b4 	.word	0x200004b4
 80050b0:	200005c0 	.word	0x200005c0
 80050b4:	200005d0 	.word	0x200005d0
 80050b8:	200005bc 	.word	0x200005bc
 80050bc:	200004b8 	.word	0x200004b8
 80050c0:	e000ed04 	.word	0xe000ed04

080050c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050d6:	4b14      	ldr	r3, [pc, #80]	@ (8005128 <vTaskDelay+0x64>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <vTaskDelay+0x32>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60bb      	str	r3, [r7, #8]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050f6:	f000 f885 	bl	8005204 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050fa:	2100      	movs	r1, #0
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fb2d 	bl	800575c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005102:	f000 f88d 	bl	8005220 <xTaskResumeAll>
 8005106:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800510e:	4b07      	ldr	r3, [pc, #28]	@ (800512c <vTaskDelay+0x68>)
 8005110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200005dc 	.word	0x200005dc
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800513e:	463a      	mov	r2, r7
 8005140:	1d39      	adds	r1, r7, #4
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb fc00 	bl	800094c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	9202      	str	r2, [sp, #8]
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	2300      	movs	r3, #0
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	2300      	movs	r3, #0
 800515c:	460a      	mov	r2, r1
 800515e:	4921      	ldr	r1, [pc, #132]	@ (80051e4 <vTaskStartScheduler+0xb4>)
 8005160:	4821      	ldr	r0, [pc, #132]	@ (80051e8 <vTaskStartScheduler+0xb8>)
 8005162:	f7ff fe08 	bl	8004d76 <xTaskCreateStatic>
 8005166:	4603      	mov	r3, r0
 8005168:	4a20      	ldr	r2, [pc, #128]	@ (80051ec <vTaskStartScheduler+0xbc>)
 800516a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800516c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ec <vTaskStartScheduler+0xbc>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005174:	2301      	movs	r3, #1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e001      	b.n	800517e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d11b      	bne.n	80051bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	613b      	str	r3, [r7, #16]
}
 8005196:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005198:	4b15      	ldr	r3, [pc, #84]	@ (80051f0 <vTaskStartScheduler+0xc0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	334c      	adds	r3, #76	@ 0x4c
 800519e:	4a15      	ldr	r2, [pc, #84]	@ (80051f4 <vTaskStartScheduler+0xc4>)
 80051a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051a2:	4b15      	ldr	r3, [pc, #84]	@ (80051f8 <vTaskStartScheduler+0xc8>)
 80051a4:	f04f 32ff 	mov.w	r2, #4294967295
 80051a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051aa:	4b14      	ldr	r3, [pc, #80]	@ (80051fc <vTaskStartScheduler+0xcc>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051b0:	4b13      	ldr	r3, [pc, #76]	@ (8005200 <vTaskStartScheduler+0xd0>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051b6:	f000 fbb7 	bl	8005928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ba:	e00f      	b.n	80051dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d10b      	bne.n	80051dc <vTaskStartScheduler+0xac>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <vTaskStartScheduler+0xa8>
}
 80051dc:	bf00      	nop
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	08006184 	.word	0x08006184
 80051e8:	0800559d 	.word	0x0800559d
 80051ec:	200005d8 	.word	0x200005d8
 80051f0:	200004b4 	.word	0x200004b4
 80051f4:	20000014 	.word	0x20000014
 80051f8:	200005d4 	.word	0x200005d4
 80051fc:	200005c0 	.word	0x200005c0
 8005200:	200005b8 	.word	0x200005b8

08005204 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005208:	4b04      	ldr	r3, [pc, #16]	@ (800521c <vTaskSuspendAll+0x18>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a03      	ldr	r2, [pc, #12]	@ (800521c <vTaskSuspendAll+0x18>)
 8005210:	6013      	str	r3, [r2, #0]
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200005dc 	.word	0x200005dc

08005220 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800522e:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <xTaskResumeAll+0x118>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <xTaskResumeAll+0x2e>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	603b      	str	r3, [r7, #0]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800524e:	f000 fbdd 	bl	8005a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005252:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <xTaskResumeAll+0x118>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3b01      	subs	r3, #1
 8005258:	4a37      	ldr	r2, [pc, #220]	@ (8005338 <xTaskResumeAll+0x118>)
 800525a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800525c:	4b36      	ldr	r3, [pc, #216]	@ (8005338 <xTaskResumeAll+0x118>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d161      	bne.n	8005328 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005264:	4b35      	ldr	r3, [pc, #212]	@ (800533c <xTaskResumeAll+0x11c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d05d      	beq.n	8005328 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800526c:	e02e      	b.n	80052cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800526e:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <xTaskResumeAll+0x120>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3318      	adds	r3, #24
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fd52 	bl	8004d24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3304      	adds	r3, #4
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff fd4d 	bl	8004d24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	2201      	movs	r2, #1
 8005290:	409a      	lsls	r2, r3
 8005292:	4b2c      	ldr	r3, [pc, #176]	@ (8005344 <xTaskResumeAll+0x124>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	4a2a      	ldr	r2, [pc, #168]	@ (8005344 <xTaskResumeAll+0x124>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4a27      	ldr	r2, [pc, #156]	@ (8005348 <xTaskResumeAll+0x128>)
 80052aa:	441a      	add	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7ff fcdb 	bl	8004c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052bc:	4b23      	ldr	r3, [pc, #140]	@ (800534c <xTaskResumeAll+0x12c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80052c6:	4b22      	ldr	r3, [pc, #136]	@ (8005350 <xTaskResumeAll+0x130>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005340 <xTaskResumeAll+0x120>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1cc      	bne.n	800526e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052da:	f000 fa1b 	bl	8005714 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052de:	4b1d      	ldr	r3, [pc, #116]	@ (8005354 <xTaskResumeAll+0x134>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d010      	beq.n	800530c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052ea:	f000 f837 	bl	800535c <xTaskIncrementTick>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052f4:	4b16      	ldr	r3, [pc, #88]	@ (8005350 <xTaskResumeAll+0x130>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f1      	bne.n	80052ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005306:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <xTaskResumeAll+0x134>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800530c:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <xTaskResumeAll+0x130>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d009      	beq.n	8005328 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005318:	4b0f      	ldr	r3, [pc, #60]	@ (8005358 <xTaskResumeAll+0x138>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005328:	f000 fba0 	bl	8005a6c <vPortExitCritical>

	return xAlreadyYielded;
 800532c:	68bb      	ldr	r3, [r7, #8]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200005dc 	.word	0x200005dc
 800533c:	200005b4 	.word	0x200005b4
 8005340:	20000574 	.word	0x20000574
 8005344:	200005bc 	.word	0x200005bc
 8005348:	200004b8 	.word	0x200004b8
 800534c:	200004b4 	.word	0x200004b4
 8005350:	200005c8 	.word	0x200005c8
 8005354:	200005c4 	.word	0x200005c4
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005366:	4b51      	ldr	r3, [pc, #324]	@ (80054ac <xTaskIncrementTick+0x150>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 808e 	bne.w	800548c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005370:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <xTaskIncrementTick+0x154>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005378:	4a4d      	ldr	r2, [pc, #308]	@ (80054b0 <xTaskIncrementTick+0x154>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d121      	bne.n	80053c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005384:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <xTaskIncrementTick+0x158>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xTaskIncrementTick+0x46>
 80053a6:	4b43      	ldr	r3, [pc, #268]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <xTaskIncrementTick+0x15c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a40      	ldr	r2, [pc, #256]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4a40      	ldr	r2, [pc, #256]	@ (80054b8 <xTaskIncrementTick+0x15c>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b40      	ldr	r3, [pc, #256]	@ (80054bc <xTaskIncrementTick+0x160>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	4a3e      	ldr	r2, [pc, #248]	@ (80054bc <xTaskIncrementTick+0x160>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	f000 f9a6 	bl	8005714 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c8:	4b3d      	ldr	r3, [pc, #244]	@ (80054c0 <xTaskIncrementTick+0x164>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d34d      	bcc.n	800546e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	4b38      	ldr	r3, [pc, #224]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <xTaskIncrementTick+0x84>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <xTaskIncrementTick+0x86>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e6:	4b36      	ldr	r3, [pc, #216]	@ (80054c0 <xTaskIncrementTick+0x164>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	601a      	str	r2, [r3, #0]
					break;
 80053ee:	e03e      	b.n	800546e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f0:	4b30      	ldr	r3, [pc, #192]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d203      	bcs.n	8005410 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005408:	4a2d      	ldr	r2, [pc, #180]	@ (80054c0 <xTaskIncrementTick+0x164>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6013      	str	r3, [r2, #0]
						break;
 800540e:	e02e      	b.n	800546e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3304      	adds	r3, #4
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fc85 	bl	8004d24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	3318      	adds	r3, #24
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fc7c 	bl	8004d24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	4b23      	ldr	r3, [pc, #140]	@ (80054c4 <xTaskIncrementTick+0x168>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4313      	orrs	r3, r2
 800543a:	4a22      	ldr	r2, [pc, #136]	@ (80054c4 <xTaskIncrementTick+0x168>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <xTaskIncrementTick+0x16c>)
 800544c:	441a      	add	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7ff fc0a 	bl	8004c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545e:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <xTaskIncrementTick+0x170>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d3b4      	bcc.n	80053d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546c:	e7b1      	b.n	80053d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800546e:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <xTaskIncrementTick+0x170>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005474:	4914      	ldr	r1, [pc, #80]	@ (80054c8 <xTaskIncrementTick+0x16c>)
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d907      	bls.n	8005496 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e004      	b.n	8005496 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800548c:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <xTaskIncrementTick+0x174>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	4a0f      	ldr	r2, [pc, #60]	@ (80054d0 <xTaskIncrementTick+0x174>)
 8005494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005496:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <xTaskIncrementTick+0x178>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054a2:	697b      	ldr	r3, [r7, #20]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	200005dc 	.word	0x200005dc
 80054b0:	200005b8 	.word	0x200005b8
 80054b4:	2000056c 	.word	0x2000056c
 80054b8:	20000570 	.word	0x20000570
 80054bc:	200005cc 	.word	0x200005cc
 80054c0:	200005d4 	.word	0x200005d4
 80054c4:	200005bc 	.word	0x200005bc
 80054c8:	200004b8 	.word	0x200004b8
 80054cc:	200004b4 	.word	0x200004b4
 80054d0:	200005c4 	.word	0x200005c4
 80054d4:	200005c8 	.word	0x200005c8

080054d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054de:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <vTaskSwitchContext+0xac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054e6:	4b28      	ldr	r3, [pc, #160]	@ (8005588 <vTaskSwitchContext+0xb0>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ec:	e045      	b.n	800557a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <vTaskSwitchContext+0xb0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054f4:	4b25      	ldr	r3, [pc, #148]	@ (800558c <vTaskSwitchContext+0xb4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	fab3 f383 	clz	r3, r3
 8005500:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f1c3 031f 	rsb	r3, r3, #31
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	4921      	ldr	r1, [pc, #132]	@ (8005590 <vTaskSwitchContext+0xb8>)
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <vTaskSwitchContext+0x5e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <vTaskSwitchContext+0x5a>
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a13      	ldr	r2, [pc, #76]	@ (8005590 <vTaskSwitchContext+0xb8>)
 8005542:	4413      	add	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3308      	adds	r3, #8
 8005558:	429a      	cmp	r2, r3
 800555a:	d104      	bne.n	8005566 <vTaskSwitchContext+0x8e>
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a09      	ldr	r2, [pc, #36]	@ (8005594 <vTaskSwitchContext+0xbc>)
 800556e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005570:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <vTaskSwitchContext+0xbc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	334c      	adds	r3, #76	@ 0x4c
 8005576:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <vTaskSwitchContext+0xc0>)
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	200005dc 	.word	0x200005dc
 8005588:	200005c8 	.word	0x200005c8
 800558c:	200005bc 	.word	0x200005bc
 8005590:	200004b8 	.word	0x200004b8
 8005594:	200004b4 	.word	0x200004b4
 8005598:	20000014 	.word	0x20000014

0800559c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055a4:	f000 f852 	bl	800564c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <prvIdleTask+0x28>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d9f9      	bls.n	80055a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055b0:	4b05      	ldr	r3, [pc, #20]	@ (80055c8 <prvIdleTask+0x2c>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055c0:	e7f0      	b.n	80055a4 <prvIdleTask+0x8>
 80055c2:	bf00      	nop
 80055c4:	200004b8 	.word	0x200004b8
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d2:	2300      	movs	r3, #0
 80055d4:	607b      	str	r3, [r7, #4]
 80055d6:	e00c      	b.n	80055f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4a12      	ldr	r2, [pc, #72]	@ (800562c <prvInitialiseTaskLists+0x60>)
 80055e4:	4413      	add	r3, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff fb16 	bl	8004c18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3301      	adds	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d9ef      	bls.n	80055d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055f8:	480d      	ldr	r0, [pc, #52]	@ (8005630 <prvInitialiseTaskLists+0x64>)
 80055fa:	f7ff fb0d 	bl	8004c18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055fe:	480d      	ldr	r0, [pc, #52]	@ (8005634 <prvInitialiseTaskLists+0x68>)
 8005600:	f7ff fb0a 	bl	8004c18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005604:	480c      	ldr	r0, [pc, #48]	@ (8005638 <prvInitialiseTaskLists+0x6c>)
 8005606:	f7ff fb07 	bl	8004c18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800560a:	480c      	ldr	r0, [pc, #48]	@ (800563c <prvInitialiseTaskLists+0x70>)
 800560c:	f7ff fb04 	bl	8004c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005610:	480b      	ldr	r0, [pc, #44]	@ (8005640 <prvInitialiseTaskLists+0x74>)
 8005612:	f7ff fb01 	bl	8004c18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005616:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <prvInitialiseTaskLists+0x78>)
 8005618:	4a05      	ldr	r2, [pc, #20]	@ (8005630 <prvInitialiseTaskLists+0x64>)
 800561a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <prvInitialiseTaskLists+0x7c>)
 800561e:	4a05      	ldr	r2, [pc, #20]	@ (8005634 <prvInitialiseTaskLists+0x68>)
 8005620:	601a      	str	r2, [r3, #0]
}
 8005622:	bf00      	nop
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	200004b8 	.word	0x200004b8
 8005630:	20000544 	.word	0x20000544
 8005634:	20000558 	.word	0x20000558
 8005638:	20000574 	.word	0x20000574
 800563c:	20000588 	.word	0x20000588
 8005640:	200005a0 	.word	0x200005a0
 8005644:	2000056c 	.word	0x2000056c
 8005648:	20000570 	.word	0x20000570

0800564c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005652:	e019      	b.n	8005688 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005654:	f000 f9da 	bl	8005a0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005658:	4b10      	ldr	r3, [pc, #64]	@ (800569c <prvCheckTasksWaitingTermination+0x50>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff fb5d 	bl	8004d24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <prvCheckTasksWaitingTermination+0x54>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3b01      	subs	r3, #1
 8005670:	4a0b      	ldr	r2, [pc, #44]	@ (80056a0 <prvCheckTasksWaitingTermination+0x54>)
 8005672:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005674:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <prvCheckTasksWaitingTermination+0x58>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3b01      	subs	r3, #1
 800567a:	4a0a      	ldr	r2, [pc, #40]	@ (80056a4 <prvCheckTasksWaitingTermination+0x58>)
 800567c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800567e:	f000 f9f5 	bl	8005a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f810 	bl	80056a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005688:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <prvCheckTasksWaitingTermination+0x58>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e1      	bne.n	8005654 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000588 	.word	0x20000588
 80056a0:	200005b4 	.word	0x200005b4
 80056a4:	2000059c 	.word	0x2000059c

080056a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	334c      	adds	r3, #76	@ 0x4c
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fc51 	bl	8005f5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d108      	bne.n	80056d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fb29 	bl	8005d20 <vPortFree>
				vPortFree( pxTCB );
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fb26 	bl	8005d20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056d4:	e019      	b.n	800570a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d103      	bne.n	80056e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fb1d 	bl	8005d20 <vPortFree>
	}
 80056e6:	e010      	b.n	800570a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d00b      	beq.n	800570a <prvDeleteTCB+0x62>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60fb      	str	r3, [r7, #12]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <prvDeleteTCB+0x5e>
	}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800571a:	4b0e      	ldr	r3, [pc, #56]	@ (8005754 <prvResetNextTaskUnblockTime+0x40>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <prvResetNextTaskUnblockTime+0x14>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <prvResetNextTaskUnblockTime+0x16>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800572e:	4b0a      	ldr	r3, [pc, #40]	@ (8005758 <prvResetNextTaskUnblockTime+0x44>)
 8005730:	f04f 32ff 	mov.w	r2, #4294967295
 8005734:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005736:	e008      	b.n	800574a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005738:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <prvResetNextTaskUnblockTime+0x40>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	4a04      	ldr	r2, [pc, #16]	@ (8005758 <prvResetNextTaskUnblockTime+0x44>)
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	2000056c 	.word	0x2000056c
 8005758:	200005d4 	.word	0x200005d4

0800575c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005766:	4b29      	ldr	r3, [pc, #164]	@ (800580c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576c:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xb4>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff fad6 	bl	8004d24 <uxListRemove>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800577e:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	2201      	movs	r2, #1
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	43da      	mvns	r2, r3
 800578c:	4b21      	ldr	r3, [pc, #132]	@ (8005814 <prvAddCurrentTaskToDelayedList+0xb8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4013      	ands	r3, r2
 8005792:	4a20      	ldr	r2, [pc, #128]	@ (8005814 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005794:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d10a      	bne.n	80057b4 <prvAddCurrentTaskToDelayedList+0x58>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	481a      	ldr	r0, [pc, #104]	@ (8005818 <prvAddCurrentTaskToDelayedList+0xbc>)
 80057ae:	f7ff fa5e 	bl	8004c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057b2:	e026      	b.n	8005802 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4413      	add	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057bc:	4b14      	ldr	r3, [pc, #80]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d209      	bcs.n	80057e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057cc:	4b13      	ldr	r3, [pc, #76]	@ (800581c <prvAddCurrentTaskToDelayedList+0xc0>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7ff fa6b 	bl	8004cb4 <vListInsert>
}
 80057de:	e010      	b.n	8005802 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <prvAddCurrentTaskToDelayedList+0xc4>)
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005810 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f7ff fa61 	bl	8004cb4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d202      	bcs.n	8005802 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80057fc:	4a09      	ldr	r2, [pc, #36]	@ (8005824 <prvAddCurrentTaskToDelayedList+0xc8>)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6013      	str	r3, [r2, #0]
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	200005b8 	.word	0x200005b8
 8005810:	200004b4 	.word	0x200004b4
 8005814:	200005bc 	.word	0x200005bc
 8005818:	200005a0 	.word	0x200005a0
 800581c:	20000570 	.word	0x20000570
 8005820:	2000056c 	.word	0x2000056c
 8005824:	200005d4 	.word	0x200005d4

08005828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3b04      	subs	r3, #4
 8005838:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	3b04      	subs	r3, #4
 8005846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f023 0201 	bic.w	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b04      	subs	r3, #4
 8005856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005858:	4a08      	ldr	r2, [pc, #32]	@ (800587c <pxPortInitialiseStack+0x54>)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b14      	subs	r3, #20
 8005862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3b20      	subs	r3, #32
 800586e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr
 800587c:	08005881 	.word	0x08005881

08005880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005886:	2300      	movs	r3, #0
 8005888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800588a:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <prvTaskExitError+0x54>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d00b      	beq.n	80058ac <prvTaskExitError+0x2c>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	60fb      	str	r3, [r7, #12]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <prvTaskExitError+0x28>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	60bb      	str	r3, [r7, #8]
}
 80058be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058c0:	bf00      	nop
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0fc      	beq.n	80058c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	20000010 	.word	0x20000010
	...

080058e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058e0:	4b07      	ldr	r3, [pc, #28]	@ (8005900 <pxCurrentTCBConst2>)
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058ea:	f380 8809 	msr	PSP, r0
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8811 	msr	BASEPRI, r0
 80058fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80058fe:	4770      	bx	lr

08005900 <pxCurrentTCBConst2>:
 8005900:	200004b4 	.word	0x200004b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005908:	4806      	ldr	r0, [pc, #24]	@ (8005924 <prvPortStartFirstTask+0x1c>)
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f380 8808 	msr	MSP, r0
 8005912:	b662      	cpsie	i
 8005914:	b661      	cpsie	f
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	df00      	svc	0
 8005920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005922:	bf00      	nop
 8005924:	e000ed08 	.word	0xe000ed08

08005928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800592e:	4b32      	ldr	r3, [pc, #200]	@ (80059f8 <xPortStartScheduler+0xd0>)
 8005930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	22ff      	movs	r2, #255	@ 0xff
 800593e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005950:	b2da      	uxtb	r2, r3
 8005952:	4b2a      	ldr	r3, [pc, #168]	@ (80059fc <xPortStartScheduler+0xd4>)
 8005954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005956:	4b2a      	ldr	r3, [pc, #168]	@ (8005a00 <xPortStartScheduler+0xd8>)
 8005958:	2207      	movs	r2, #7
 800595a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800595c:	e009      	b.n	8005972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800595e:	4b28      	ldr	r3, [pc, #160]	@ (8005a00 <xPortStartScheduler+0xd8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3b01      	subs	r3, #1
 8005964:	4a26      	ldr	r2, [pc, #152]	@ (8005a00 <xPortStartScheduler+0xd8>)
 8005966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597a:	2b80      	cmp	r3, #128	@ 0x80
 800597c:	d0ef      	beq.n	800595e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800597e:	4b20      	ldr	r3, [pc, #128]	@ (8005a00 <xPortStartScheduler+0xd8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1c3 0307 	rsb	r3, r3, #7
 8005986:	2b04      	cmp	r3, #4
 8005988:	d00b      	beq.n	80059a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60bb      	str	r3, [r7, #8]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059a2:	4b17      	ldr	r3, [pc, #92]	@ (8005a00 <xPortStartScheduler+0xd8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	4a15      	ldr	r2, [pc, #84]	@ (8005a00 <xPortStartScheduler+0xd8>)
 80059aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059ac:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <xPortStartScheduler+0xd8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059b4:	4a12      	ldr	r2, [pc, #72]	@ (8005a00 <xPortStartScheduler+0xd8>)
 80059b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059c0:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <xPortStartScheduler+0xdc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005a04 <xPortStartScheduler+0xdc>)
 80059c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a04 <xPortStartScheduler+0xdc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a04 <xPortStartScheduler+0xdc>)
 80059d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059d8:	f000 f8b8 	bl	8005b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a08 <xPortStartScheduler+0xe0>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059e2:	f7ff ff91 	bl	8005908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059e6:	f7ff fd77 	bl	80054d8 <vTaskSwitchContext>
	prvTaskExitError();
 80059ea:	f7ff ff49 	bl	8005880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000e400 	.word	0xe000e400
 80059fc:	200005e0 	.word	0x200005e0
 8005a00:	200005e4 	.word	0x200005e4
 8005a04:	e000ed20 	.word	0xe000ed20
 8005a08:	20000010 	.word	0x20000010

08005a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
	__asm volatile
 8005a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	607b      	str	r3, [r7, #4]
}
 8005a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a26:	4b0f      	ldr	r3, [pc, #60]	@ (8005a64 <vPortEnterCritical+0x58>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005a64 <vPortEnterCritical+0x58>)
 8005a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a30:	4b0c      	ldr	r3, [pc, #48]	@ (8005a64 <vPortEnterCritical+0x58>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d110      	bne.n	8005a5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a38:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <vPortEnterCritical+0x5c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <vPortEnterCritical+0x4e>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	603b      	str	r3, [r7, #0]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <vPortEnterCritical+0x4a>
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr
 8005a64:	20000010 	.word	0x20000010
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a72:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <vPortExitCritical+0x26>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4a08      	ldr	r2, [pc, #32]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a9c:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <vPortExitCritical+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000010 	.word	0x20000010

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ad0:	6010      	str	r0, [r2, #0]
 8005ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ad6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ada:	f380 8811 	msr	BASEPRI, r0
 8005ade:	f7ff fcfb 	bl	80054d8 <vTaskSwitchContext>
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	6808      	ldr	r0, [r1, #0]
 8005af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005af6:	f380 8809 	msr	PSP, r0
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	4770      	bx	lr

08005b00 <pxCurrentTCBConst>:
 8005b00:	200004b4 	.word	0x200004b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	607b      	str	r3, [r7, #4]
}
 8005b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b22:	f7ff fc1b 	bl	800535c <xTaskIncrementTick>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	@ (8005b48 <SysTick_Handler+0x40>)
 8005b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b32:	601a      	str	r2, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f383 8811 	msr	BASEPRI, r3
}
 8005b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	e000ed04 	.word	0xe000ed04

08005b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <vPortSetupTimerInterrupt+0x30>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b56:	4b0a      	ldr	r3, [pc, #40]	@ (8005b80 <vPortSetupTimerInterrupt+0x34>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b5c:	4b09      	ldr	r3, [pc, #36]	@ (8005b84 <vPortSetupTimerInterrupt+0x38>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a09      	ldr	r2, [pc, #36]	@ (8005b88 <vPortSetupTimerInterrupt+0x3c>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	4a08      	ldr	r2, [pc, #32]	@ (8005b8c <vPortSetupTimerInterrupt+0x40>)
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b6e:	4b03      	ldr	r3, [pc, #12]	@ (8005b7c <vPortSetupTimerInterrupt+0x30>)
 8005b70:	2207      	movs	r2, #7
 8005b72:	601a      	str	r2, [r3, #0]
}
 8005b74:	bf00      	nop
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr
 8005b7c:	e000e010 	.word	0xe000e010
 8005b80:	e000e018 	.word	0xe000e018
 8005b84:	20000004 	.word	0x20000004
 8005b88:	10624dd3 	.word	0x10624dd3
 8005b8c:	e000e014 	.word	0xe000e014

08005b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b9c:	f7ff fb32 	bl	8005204 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8005d0c <pvPortMalloc+0x17c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ba8:	f000 f916 	bl	8005dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bac:	4b58      	ldr	r3, [pc, #352]	@ (8005d10 <pvPortMalloc+0x180>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f040 8090 	bne.w	8005cda <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d015      	beq.n	8005bfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	3308      	adds	r3, #8
 8005bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <pvPortMalloc+0x6e>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	617b      	str	r3, [r7, #20]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d06a      	beq.n	8005cda <pvPortMalloc+0x14a>
 8005c04:	4b43      	ldr	r3, [pc, #268]	@ (8005d14 <pvPortMalloc+0x184>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d865      	bhi.n	8005cda <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c0e:	4b42      	ldr	r3, [pc, #264]	@ (8005d18 <pvPortMalloc+0x188>)
 8005c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c12:	4b41      	ldr	r3, [pc, #260]	@ (8005d18 <pvPortMalloc+0x188>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c18:	e004      	b.n	8005c24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d903      	bls.n	8005c36 <pvPortMalloc+0xa6>
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f1      	bne.n	8005c1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c36:	4b35      	ldr	r3, [pc, #212]	@ (8005d0c <pvPortMalloc+0x17c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d04c      	beq.n	8005cda <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2208      	movs	r2, #8
 8005c46:	4413      	add	r3, r2
 8005c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d920      	bls.n	8005ca4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4413      	add	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <pvPortMalloc+0xfc>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	613b      	str	r3, [r7, #16]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	1ad2      	subs	r2, r2, r3
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c9e:	69b8      	ldr	r0, [r7, #24]
 8005ca0:	f000 f8fc 	bl	8005e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d14 <pvPortMalloc+0x184>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	4a19      	ldr	r2, [pc, #100]	@ (8005d14 <pvPortMalloc+0x184>)
 8005cb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cb2:	4b18      	ldr	r3, [pc, #96]	@ (8005d14 <pvPortMalloc+0x184>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b19      	ldr	r3, [pc, #100]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d203      	bcs.n	8005cc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cbe:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <pvPortMalloc+0x184>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005cc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <pvPortMalloc+0x180>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005cda:	f7ff faa1 	bl	8005220 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <pvPortMalloc+0x170>
	__asm volatile
 8005ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	60fb      	str	r3, [r7, #12]
}
 8005cfa:	bf00      	nop
 8005cfc:	bf00      	nop
 8005cfe:	e7fd      	b.n	8005cfc <pvPortMalloc+0x16c>
	return pvReturn;
 8005d00:	69fb      	ldr	r3, [r7, #28]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3728      	adds	r7, #40	@ 0x28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200011f0 	.word	0x200011f0
 8005d10:	200011fc 	.word	0x200011fc
 8005d14:	200011f4 	.word	0x200011f4
 8005d18:	200011e8 	.word	0x200011e8
 8005d1c:	200011f8 	.word	0x200011f8

08005d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d04a      	beq.n	8005dc8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d32:	2308      	movs	r3, #8
 8005d34:	425b      	negs	r3, r3
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4b22      	ldr	r3, [pc, #136]	@ (8005dd0 <vPortFree+0xb0>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <vPortFree+0x46>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60fb      	str	r3, [r7, #12]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <vPortFree+0x66>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	60bb      	str	r3, [r7, #8]
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	4b11      	ldr	r3, [pc, #68]	@ (8005dd0 <vPortFree+0xb0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d019      	beq.n	8005dc8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d115      	bne.n	8005dc8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd0 <vPortFree+0xb0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	43db      	mvns	r3, r3
 8005da6:	401a      	ands	r2, r3
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005dac:	f7ff fa2a 	bl	8005204 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	4b07      	ldr	r3, [pc, #28]	@ (8005dd4 <vPortFree+0xb4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4413      	add	r3, r2
 8005dba:	4a06      	ldr	r2, [pc, #24]	@ (8005dd4 <vPortFree+0xb4>)
 8005dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dbe:	6938      	ldr	r0, [r7, #16]
 8005dc0:	f000 f86c 	bl	8005e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005dc4:	f7ff fa2c 	bl	8005220 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dc8:	bf00      	nop
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	200011fc 	.word	0x200011fc
 8005dd4:	200011f4 	.word	0x200011f4

08005dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dde:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005de4:	4b27      	ldr	r3, [pc, #156]	@ (8005e84 <prvHeapInit+0xac>)
 8005de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00c      	beq.n	8005e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3307      	adds	r3, #7
 8005df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	4a1f      	ldr	r2, [pc, #124]	@ (8005e84 <prvHeapInit+0xac>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e10:	4a1d      	ldr	r2, [pc, #116]	@ (8005e88 <prvHeapInit+0xb0>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e16:	4b1c      	ldr	r3, [pc, #112]	@ (8005e88 <prvHeapInit+0xb0>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	4413      	add	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e24:	2208      	movs	r2, #8
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1a9b      	subs	r3, r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0307 	bic.w	r3, r3, #7
 8005e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a15      	ldr	r2, [pc, #84]	@ (8005e8c <prvHeapInit+0xb4>)
 8005e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e3a:	4b14      	ldr	r3, [pc, #80]	@ (8005e8c <prvHeapInit+0xb4>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e42:	4b12      	ldr	r3, [pc, #72]	@ (8005e8c <prvHeapInit+0xb4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	1ad2      	subs	r2, r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e58:	4b0c      	ldr	r3, [pc, #48]	@ (8005e8c <prvHeapInit+0xb4>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	@ (8005e90 <prvHeapInit+0xb8>)
 8005e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4a09      	ldr	r2, [pc, #36]	@ (8005e94 <prvHeapInit+0xbc>)
 8005e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e70:	4b09      	ldr	r3, [pc, #36]	@ (8005e98 <prvHeapInit+0xc0>)
 8005e72:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e76:	601a      	str	r2, [r3, #0]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	200005e8 	.word	0x200005e8
 8005e88:	200011e8 	.word	0x200011e8
 8005e8c:	200011f0 	.word	0x200011f0
 8005e90:	200011f8 	.word	0x200011f8
 8005e94:	200011f4 	.word	0x200011f4
 8005e98:	200011fc 	.word	0x200011fc

08005e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ea4:	4b27      	ldr	r3, [pc, #156]	@ (8005f44 <prvInsertBlockIntoFreeList+0xa8>)
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e002      	b.n	8005eb0 <prvInsertBlockIntoFreeList+0x14>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d8f7      	bhi.n	8005eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d108      	bne.n	8005ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	441a      	add	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d118      	bne.n	8005f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b14      	ldr	r3, [pc, #80]	@ (8005f48 <prvInsertBlockIntoFreeList+0xac>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d00d      	beq.n	8005f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	441a      	add	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e008      	b.n	8005f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f48 <prvInsertBlockIntoFreeList+0xac>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e003      	b.n	8005f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d002      	beq.n	8005f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	200011e8 	.word	0x200011e8
 8005f48:	200011f0 	.word	0x200011f0

08005f4c <memset>:
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	4402      	add	r2, r0
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d100      	bne.n	8005f56 <memset+0xa>
 8005f54:	4770      	bx	lr
 8005f56:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5a:	e7f9      	b.n	8005f50 <memset+0x4>

08005f5c <_reclaim_reent>:
 8005f5c:	4b29      	ldr	r3, [pc, #164]	@ (8006004 <_reclaim_reent+0xa8>)
 8005f5e:	b570      	push	{r4, r5, r6, lr}
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4604      	mov	r4, r0
 8005f64:	4283      	cmp	r3, r0
 8005f66:	d04b      	beq.n	8006000 <_reclaim_reent+0xa4>
 8005f68:	69c3      	ldr	r3, [r0, #28]
 8005f6a:	b1ab      	cbz	r3, 8005f98 <_reclaim_reent+0x3c>
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	b16b      	cbz	r3, 8005f8c <_reclaim_reent+0x30>
 8005f70:	2500      	movs	r5, #0
 8005f72:	69e3      	ldr	r3, [r4, #28]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	5959      	ldr	r1, [r3, r5]
 8005f78:	2900      	cmp	r1, #0
 8005f7a:	d13b      	bne.n	8005ff4 <_reclaim_reent+0x98>
 8005f7c:	3504      	adds	r5, #4
 8005f7e:	2d80      	cmp	r5, #128	@ 0x80
 8005f80:	d1f7      	bne.n	8005f72 <_reclaim_reent+0x16>
 8005f82:	69e3      	ldr	r3, [r4, #28]
 8005f84:	4620      	mov	r0, r4
 8005f86:	68d9      	ldr	r1, [r3, #12]
 8005f88:	f000 f864 	bl	8006054 <_free_r>
 8005f8c:	69e3      	ldr	r3, [r4, #28]
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	b111      	cbz	r1, 8005f98 <_reclaim_reent+0x3c>
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 f85e 	bl	8006054 <_free_r>
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	b111      	cbz	r1, 8005fa2 <_reclaim_reent+0x46>
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 f859 	bl	8006054 <_free_r>
 8005fa2:	69e1      	ldr	r1, [r4, #28]
 8005fa4:	b111      	cbz	r1, 8005fac <_reclaim_reent+0x50>
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f000 f854 	bl	8006054 <_free_r>
 8005fac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fae:	b111      	cbz	r1, 8005fb6 <_reclaim_reent+0x5a>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 f84f 	bl	8006054 <_free_r>
 8005fb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fb8:	b111      	cbz	r1, 8005fc0 <_reclaim_reent+0x64>
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f84a 	bl	8006054 <_free_r>
 8005fc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fc2:	b111      	cbz	r1, 8005fca <_reclaim_reent+0x6e>
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	f000 f845 	bl	8006054 <_free_r>
 8005fca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005fcc:	b111      	cbz	r1, 8005fd4 <_reclaim_reent+0x78>
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 f840 	bl	8006054 <_free_r>
 8005fd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005fd6:	b111      	cbz	r1, 8005fde <_reclaim_reent+0x82>
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f000 f83b 	bl	8006054 <_free_r>
 8005fde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005fe0:	b111      	cbz	r1, 8005fe8 <_reclaim_reent+0x8c>
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 f836 	bl	8006054 <_free_r>
 8005fe8:	6a23      	ldr	r3, [r4, #32]
 8005fea:	b14b      	cbz	r3, 8006000 <_reclaim_reent+0xa4>
 8005fec:	4620      	mov	r0, r4
 8005fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ff2:	4718      	bx	r3
 8005ff4:	680e      	ldr	r6, [r1, #0]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 f82c 	bl	8006054 <_free_r>
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	e7bb      	b.n	8005f78 <_reclaim_reent+0x1c>
 8006000:	bd70      	pop	{r4, r5, r6, pc}
 8006002:	bf00      	nop
 8006004:	20000014 	.word	0x20000014

08006008 <__libc_init_array>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	2600      	movs	r6, #0
 800600c:	4d0c      	ldr	r5, [pc, #48]	@ (8006040 <__libc_init_array+0x38>)
 800600e:	4c0d      	ldr	r4, [pc, #52]	@ (8006044 <__libc_init_array+0x3c>)
 8006010:	1b64      	subs	r4, r4, r5
 8006012:	10a4      	asrs	r4, r4, #2
 8006014:	42a6      	cmp	r6, r4
 8006016:	d109      	bne.n	800602c <__libc_init_array+0x24>
 8006018:	f000 f870 	bl	80060fc <_init>
 800601c:	2600      	movs	r6, #0
 800601e:	4d0a      	ldr	r5, [pc, #40]	@ (8006048 <__libc_init_array+0x40>)
 8006020:	4c0a      	ldr	r4, [pc, #40]	@ (800604c <__libc_init_array+0x44>)
 8006022:	1b64      	subs	r4, r4, r5
 8006024:	10a4      	asrs	r4, r4, #2
 8006026:	42a6      	cmp	r6, r4
 8006028:	d105      	bne.n	8006036 <__libc_init_array+0x2e>
 800602a:	bd70      	pop	{r4, r5, r6, pc}
 800602c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006030:	4798      	blx	r3
 8006032:	3601      	adds	r6, #1
 8006034:	e7ee      	b.n	8006014 <__libc_init_array+0xc>
 8006036:	f855 3b04 	ldr.w	r3, [r5], #4
 800603a:	4798      	blx	r3
 800603c:	3601      	adds	r6, #1
 800603e:	e7f2      	b.n	8006026 <__libc_init_array+0x1e>
 8006040:	080061b8 	.word	0x080061b8
 8006044:	080061b8 	.word	0x080061b8
 8006048:	080061b8 	.word	0x080061b8
 800604c:	080061bc 	.word	0x080061bc

08006050 <__retarget_lock_acquire_recursive>:
 8006050:	4770      	bx	lr

08006052 <__retarget_lock_release_recursive>:
 8006052:	4770      	bx	lr

08006054 <_free_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4605      	mov	r5, r0
 8006058:	2900      	cmp	r1, #0
 800605a:	d040      	beq.n	80060de <_free_r+0x8a>
 800605c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006060:	1f0c      	subs	r4, r1, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	bfb8      	it	lt
 8006066:	18e4      	addlt	r4, r4, r3
 8006068:	f000 f83c 	bl	80060e4 <__malloc_lock>
 800606c:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <_free_r+0x8c>)
 800606e:	6813      	ldr	r3, [r2, #0]
 8006070:	b933      	cbnz	r3, 8006080 <_free_r+0x2c>
 8006072:	6063      	str	r3, [r4, #4]
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	4628      	mov	r0, r5
 8006078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800607c:	f000 b838 	b.w	80060f0 <__malloc_unlock>
 8006080:	42a3      	cmp	r3, r4
 8006082:	d908      	bls.n	8006096 <_free_r+0x42>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	1821      	adds	r1, r4, r0
 8006088:	428b      	cmp	r3, r1
 800608a:	bf01      	itttt	eq
 800608c:	6819      	ldreq	r1, [r3, #0]
 800608e:	685b      	ldreq	r3, [r3, #4]
 8006090:	1809      	addeq	r1, r1, r0
 8006092:	6021      	streq	r1, [r4, #0]
 8006094:	e7ed      	b.n	8006072 <_free_r+0x1e>
 8006096:	461a      	mov	r2, r3
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b10b      	cbz	r3, 80060a0 <_free_r+0x4c>
 800609c:	42a3      	cmp	r3, r4
 800609e:	d9fa      	bls.n	8006096 <_free_r+0x42>
 80060a0:	6811      	ldr	r1, [r2, #0]
 80060a2:	1850      	adds	r0, r2, r1
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d10b      	bne.n	80060c0 <_free_r+0x6c>
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	4401      	add	r1, r0
 80060ac:	1850      	adds	r0, r2, r1
 80060ae:	4283      	cmp	r3, r0
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	d1e0      	bne.n	8006076 <_free_r+0x22>
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	4408      	add	r0, r1
 80060ba:	6010      	str	r0, [r2, #0]
 80060bc:	6053      	str	r3, [r2, #4]
 80060be:	e7da      	b.n	8006076 <_free_r+0x22>
 80060c0:	d902      	bls.n	80060c8 <_free_r+0x74>
 80060c2:	230c      	movs	r3, #12
 80060c4:	602b      	str	r3, [r5, #0]
 80060c6:	e7d6      	b.n	8006076 <_free_r+0x22>
 80060c8:	6820      	ldr	r0, [r4, #0]
 80060ca:	1821      	adds	r1, r4, r0
 80060cc:	428b      	cmp	r3, r1
 80060ce:	bf01      	itttt	eq
 80060d0:	6819      	ldreq	r1, [r3, #0]
 80060d2:	685b      	ldreq	r3, [r3, #4]
 80060d4:	1809      	addeq	r1, r1, r0
 80060d6:	6021      	streq	r1, [r4, #0]
 80060d8:	6063      	str	r3, [r4, #4]
 80060da:	6054      	str	r4, [r2, #4]
 80060dc:	e7cb      	b.n	8006076 <_free_r+0x22>
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	2000133c 	.word	0x2000133c

080060e4 <__malloc_lock>:
 80060e4:	4801      	ldr	r0, [pc, #4]	@ (80060ec <__malloc_lock+0x8>)
 80060e6:	f7ff bfb3 	b.w	8006050 <__retarget_lock_acquire_recursive>
 80060ea:	bf00      	nop
 80060ec:	20001338 	.word	0x20001338

080060f0 <__malloc_unlock>:
 80060f0:	4801      	ldr	r0, [pc, #4]	@ (80060f8 <__malloc_unlock+0x8>)
 80060f2:	f7ff bfae 	b.w	8006052 <__retarget_lock_release_recursive>
 80060f6:	bf00      	nop
 80060f8:	20001338 	.word	0x20001338

080060fc <_init>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr

08006108 <_fini>:
 8006108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610a:	bf00      	nop
 800610c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610e:	bc08      	pop	{r3}
 8006110:	469e      	mov	lr, r3
 8006112:	4770      	bx	lr
