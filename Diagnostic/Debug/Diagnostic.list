
Diagnostic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b3c  08005b3c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b3c  08005b3c  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b3c  08005b3c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b3c  08005b3c  00015b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012d4  2000007c  08005bc0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001350  08005bc0  00021350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015548  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e5  00000000  00000000  00035630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  00038b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef6  00000000  00000000  00039e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bd6  00000000  00000000  0003ad66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170bf  00000000  00000000  0005493c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094061  00000000  00000000  0006b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005210  00000000  00000000  000ffa5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00104c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005aa0 	.word	0x08005aa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005aa0 	.word	0x08005aa0

08000150 <HAL_DCM_MainFunction>:

extern SYSTEM_Data DATA;

Return_Type HAL_DCM_Init(void);

Return_Type HAL_DCM_MainFunction(void){
 8000150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000152:	b085      	sub	sp, #20
 8000154:	af04      	add	r7, sp, #16
	if (HAL_COMH_Send(DATA) == Return_OK){
 8000156:	4b10      	ldr	r3, [pc, #64]	; (8000198 <HAL_DCM_MainFunction+0x48>)
 8000158:	681a      	ldr	r2, [r3, #0]
 800015a:	4696      	mov	lr, r2
 800015c:	685a      	ldr	r2, [r3, #4]
 800015e:	4694      	mov	ip, r2
 8000160:	689a      	ldr	r2, [r3, #8]
 8000162:	4616      	mov	r6, r2
 8000164:	68da      	ldr	r2, [r3, #12]
 8000166:	4615      	mov	r5, r2
 8000168:	466c      	mov	r4, sp
 800016a:	3310      	adds	r3, #16
 800016c:	6818      	ldr	r0, [r3, #0]
 800016e:	6859      	ldr	r1, [r3, #4]
 8000170:	689a      	ldr	r2, [r3, #8]
 8000172:	68db      	ldr	r3, [r3, #12]
 8000174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000176:	4670      	mov	r0, lr
 8000178:	4661      	mov	r1, ip
 800017a:	4632      	mov	r2, r6
 800017c:	462b      	mov	r3, r5
 800017e:	f004 f843 	bl	8004208 <HAL_COMH_Send>
 8000182:	4603      	mov	r3, r0
 8000184:	2b01      	cmp	r3, #1
 8000186:	d101      	bne.n	800018c <HAL_DCM_MainFunction+0x3c>
		return Return_OK;
 8000188:	2301      	movs	r3, #1
 800018a:	e000      	b.n	800018e <HAL_DCM_MainFunction+0x3e>
	}
	return Return_NOT_OK;
 800018c:	2300      	movs	r3, #0
}
 800018e:	4618      	mov	r0, r3
 8000190:	3704      	adds	r7, #4
 8000192:	46bd      	mov	sp, r7
 8000194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000196:	bf00      	nop
 8000198:	20000098 	.word	0x20000098

0800019c <HAL_DEM_MainFunction>:

extern SYSTEM_Data DATA;

Return_Type HAL_DEM_Init(void);

Return_Type HAL_DEM_MainFunction(void){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	// Throttle Position Range
	if (DATA.sensor1 >= THROTTLE_POS_RANG1 && DATA.sensor1 <= THROTTLE_POS_RANG2) {
 80001a0:	4bb2      	ldr	r3, [pc, #712]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	f240 5231 	movw	r2, #1329	; 0x531
 80001a8:	4293      	cmp	r3, r2
 80001aa:	d932      	bls.n	8000212 <HAL_DEM_MainFunction+0x76>
 80001ac:	4baf      	ldr	r3, [pc, #700]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001ae:	881b      	ldrh	r3, [r3, #0]
 80001b0:	f241 22ac 	movw	r2, #4780	; 0x12ac
 80001b4:	4293      	cmp	r3, r2
 80001b6:	d82c      	bhi.n	8000212 <HAL_DEM_MainFunction+0x76>
		DATA.DTC_1[0] = 'P';
 80001b8:	4bac      	ldr	r3, [pc, #688]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001ba:	2250      	movs	r2, #80	; 0x50
 80001bc:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 80001be:	4bab      	ldr	r3, [pc, #684]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001c0:	2230      	movs	r2, #48	; 0x30
 80001c2:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80001c4:	4ba9      	ldr	r3, [pc, #676]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001c6:	2230      	movs	r2, #48	; 0x30
 80001c8:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 80001ca:	4ba8      	ldr	r3, [pc, #672]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001cc:	2237      	movs	r2, #55	; 0x37
 80001ce:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '9';
 80001d0:	4ba6      	ldr	r3, [pc, #664]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001d2:	2239      	movs	r2, #57	; 0x39
 80001d4:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'P';
 80001d6:	4ba5      	ldr	r3, [pc, #660]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001d8:	2250      	movs	r2, #80	; 0x50
 80001da:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '2';
 80001dc:	4ba3      	ldr	r3, [pc, #652]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001de:	2232      	movs	r2, #50	; 0x32
 80001e0:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 80001e2:	4ba2      	ldr	r3, [pc, #648]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001e4:	2230      	movs	r2, #48	; 0x30
 80001e6:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 80001e8:	4ba0      	ldr	r3, [pc, #640]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001ea:	2230      	movs	r2, #48	; 0x30
 80001ec:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '4';
 80001ee:	4b9f      	ldr	r3, [pc, #636]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001f0:	2234      	movs	r2, #52	; 0x34
 80001f2:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 80001f4:	4b9d      	ldr	r3, [pc, #628]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001f6:	2250      	movs	r2, #80	; 0x50
 80001f8:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '3';
 80001fa:	4b9c      	ldr	r3, [pc, #624]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80001fc:	2233      	movs	r2, #51	; 0x33
 80001fe:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 8000200:	4b9a      	ldr	r3, [pc, #616]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000202:	2230      	movs	r2, #48	; 0x30
 8000204:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 8000206:	4b99      	ldr	r3, [pc, #612]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000208:	2230      	movs	r2, #48	; 0x30
 800020a:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 800020c:	4b97      	ldr	r3, [pc, #604]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800020e:	2230      	movs	r2, #48	; 0x30
 8000210:	779a      	strb	r2, [r3, #30]
	}

	// Timing Advance Range
	if (DATA.sensor2 >= TIMING_ADVANCE_RANG1 && DATA.sensor2 <= TIMING_ADVANCE_RANG2) {
 8000212:	4b96      	ldr	r3, [pc, #600]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000214:	885b      	ldrh	r3, [r3, #2]
 8000216:	f640 6241 	movw	r2, #3649	; 0xe41
 800021a:	4293      	cmp	r3, r2
 800021c:	d932      	bls.n	8000284 <HAL_DEM_MainFunction+0xe8>
 800021e:	4b93      	ldr	r3, [pc, #588]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000220:	885b      	ldrh	r3, [r3, #2]
 8000222:	f641 5242 	movw	r2, #7490	; 0x1d42
 8000226:	4293      	cmp	r3, r2
 8000228:	d82c      	bhi.n	8000284 <HAL_DEM_MainFunction+0xe8>
		DATA.DTC_1[0] = 'P';
 800022a:	4b90      	ldr	r3, [pc, #576]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800022c:	2250      	movs	r2, #80	; 0x50
 800022e:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 8000230:	4b8e      	ldr	r3, [pc, #568]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000232:	2230      	movs	r2, #48	; 0x30
 8000234:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 8000236:	4b8d      	ldr	r3, [pc, #564]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000238:	2230      	movs	r2, #48	; 0x30
 800023a:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 800023c:	4b8b      	ldr	r3, [pc, #556]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800023e:	2237      	movs	r2, #55	; 0x37
 8000240:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '8';
 8000242:	4b8a      	ldr	r3, [pc, #552]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000244:	2238      	movs	r2, #56	; 0x38
 8000246:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'U';
 8000248:	4b88      	ldr	r3, [pc, #544]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800024a:	2255      	movs	r2, #85	; 0x55
 800024c:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '1';
 800024e:	4b87      	ldr	r3, [pc, #540]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000250:	2231      	movs	r2, #49	; 0x31
 8000252:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 8000254:	4b85      	ldr	r3, [pc, #532]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000256:	2230      	movs	r2, #48	; 0x30
 8000258:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 800025a:	4b84      	ldr	r3, [pc, #528]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800025c:	2230      	movs	r2, #48	; 0x30
 800025e:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '4';
 8000260:	4b82      	ldr	r3, [pc, #520]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000262:	2234      	movs	r2, #52	; 0x34
 8000264:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 8000266:	4b81      	ldr	r3, [pc, #516]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000268:	2250      	movs	r2, #80	; 0x50
 800026a:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '3';
 800026c:	4b7f      	ldr	r3, [pc, #508]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800026e:	2233      	movs	r2, #51	; 0x33
 8000270:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 8000272:	4b7e      	ldr	r3, [pc, #504]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000274:	2230      	movs	r2, #48	; 0x30
 8000276:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 8000278:	4b7c      	ldr	r3, [pc, #496]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800027a:	2230      	movs	r2, #48	; 0x30
 800027c:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 800027e:	4b7b      	ldr	r3, [pc, #492]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000280:	2230      	movs	r2, #48	; 0x30
 8000282:	779a      	strb	r2, [r3, #30]

	}

	// Air Intake Temperature Range
	if (DATA.sensor3 >= AIR_INTAKE_TEMP_RANG1 && DATA.sensor3 <= AIR_INTAKE_TEMP_RANG2) {
 8000284:	4b79      	ldr	r3, [pc, #484]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000286:	889b      	ldrh	r3, [r3, #4]
 8000288:	2b1b      	cmp	r3, #27
 800028a:	d930      	bls.n	80002ee <HAL_DEM_MainFunction+0x152>
 800028c:	4b77      	ldr	r3, [pc, #476]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800028e:	889b      	ldrh	r3, [r3, #4]
 8000290:	2b33      	cmp	r3, #51	; 0x33
 8000292:	d82c      	bhi.n	80002ee <HAL_DEM_MainFunction+0x152>
		DATA.DTC_1[0] = 'P';
 8000294:	4b75      	ldr	r3, [pc, #468]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000296:	2250      	movs	r2, #80	; 0x50
 8000298:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 800029a:	4b74      	ldr	r3, [pc, #464]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800029c:	2230      	movs	r2, #48	; 0x30
 800029e:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80002a0:	4b72      	ldr	r3, [pc, #456]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002a2:	2230      	movs	r2, #48	; 0x30
 80002a4:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 80002a6:	4b71      	ldr	r3, [pc, #452]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002a8:	2237      	movs	r2, #55	; 0x37
 80002aa:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '9';
 80002ac:	4b6f      	ldr	r3, [pc, #444]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002ae:	2239      	movs	r2, #57	; 0x39
 80002b0:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'C';
 80002b2:	4b6e      	ldr	r3, [pc, #440]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002b4:	2243      	movs	r2, #67	; 0x43
 80002b6:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '1';
 80002b8:	4b6c      	ldr	r3, [pc, #432]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002ba:	2231      	movs	r2, #49	; 0x31
 80002bc:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 80002be:	4b6b      	ldr	r3, [pc, #428]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002c0:	2230      	movs	r2, #48	; 0x30
 80002c2:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 80002c4:	4b69      	ldr	r3, [pc, #420]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002c6:	2230      	movs	r2, #48	; 0x30
 80002c8:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '4';
 80002ca:	4b68      	ldr	r3, [pc, #416]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002cc:	2234      	movs	r2, #52	; 0x34
 80002ce:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 80002d0:	4b66      	ldr	r3, [pc, #408]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002d2:	2250      	movs	r2, #80	; 0x50
 80002d4:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '3';
 80002d6:	4b65      	ldr	r3, [pc, #404]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002d8:	2233      	movs	r2, #51	; 0x33
 80002da:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 80002dc:	4b63      	ldr	r3, [pc, #396]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002de:	2230      	movs	r2, #48	; 0x30
 80002e0:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '0';
 80002e2:	4b62      	ldr	r3, [pc, #392]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002e4:	2230      	movs	r2, #48	; 0x30
 80002e6:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 80002e8:	4b60      	ldr	r3, [pc, #384]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002ea:	2230      	movs	r2, #48	; 0x30
 80002ec:	779a      	strb	r2, [r3, #30]

	}

	// Intake Manifold Pressure Range
	if (DATA.sensor4 >= INTAKE_MANIFOLD_PRESSURE_RANG1 && DATA.sensor4 <= INTAKE_MANIFOLD_PRESSURE_RANG2) {
 80002ee:	4b5f      	ldr	r3, [pc, #380]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002f0:	88db      	ldrh	r3, [r3, #6]
 80002f2:	2b19      	cmp	r3, #25
 80002f4:	d930      	bls.n	8000358 <HAL_DEM_MainFunction+0x1bc>
 80002f6:	4b5d      	ldr	r3, [pc, #372]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80002f8:	88db      	ldrh	r3, [r3, #6]
 80002fa:	2b65      	cmp	r3, #101	; 0x65
 80002fc:	d82c      	bhi.n	8000358 <HAL_DEM_MainFunction+0x1bc>
		DATA.DTC_1[0] = 'P';
 80002fe:	4b5b      	ldr	r3, [pc, #364]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000300:	2250      	movs	r2, #80	; 0x50
 8000302:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 8000304:	4b59      	ldr	r3, [pc, #356]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000306:	2230      	movs	r2, #48	; 0x30
 8000308:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 800030a:	4b58      	ldr	r3, [pc, #352]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800030c:	2230      	movs	r2, #48	; 0x30
 800030e:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 8000310:	4b56      	ldr	r3, [pc, #344]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000312:	2237      	movs	r2, #55	; 0x37
 8000314:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = 'E';
 8000316:	4b55      	ldr	r3, [pc, #340]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000318:	2245      	movs	r2, #69	; 0x45
 800031a:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'P';
 800031c:	4b53      	ldr	r3, [pc, #332]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800031e:	2250      	movs	r2, #80	; 0x50
 8000320:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '2';
 8000322:	4b52      	ldr	r3, [pc, #328]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000324:	2232      	movs	r2, #50	; 0x32
 8000326:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 8000328:	4b50      	ldr	r3, [pc, #320]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800032a:	2230      	movs	r2, #48	; 0x30
 800032c:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '3';
 800032e:	4b4f      	ldr	r3, [pc, #316]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000330:	2233      	movs	r2, #51	; 0x33
 8000332:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '6';
 8000334:	4b4d      	ldr	r3, [pc, #308]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000336:	2236      	movs	r2, #54	; 0x36
 8000338:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 800033a:	4b4c      	ldr	r3, [pc, #304]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800033c:	2250      	movs	r2, #80	; 0x50
 800033e:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '1';
 8000340:	4b4a      	ldr	r3, [pc, #296]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000342:	2231      	movs	r2, #49	; 0x31
 8000344:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '8';
 8000346:	4b49      	ldr	r3, [pc, #292]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000348:	2238      	movs	r2, #56	; 0x38
 800034a:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = 'E';
 800034c:	4b47      	ldr	r3, [pc, #284]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800034e:	2245      	movs	r2, #69	; 0x45
 8000350:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 8000352:	4b46      	ldr	r3, [pc, #280]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000354:	2230      	movs	r2, #48	; 0x30
 8000356:	779a      	strb	r2, [r3, #30]

	}

	// Engine RPM Range
	if (DATA.sensor5 >= ENGINE_RPM_RANG1 && DATA.sensor5 <= ENGINE_RPM_RANG2) {
 8000358:	4b44      	ldr	r3, [pc, #272]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800035a:	891b      	ldrh	r3, [r3, #8]
 800035c:	f240 22c2 	movw	r2, #706	; 0x2c2
 8000360:	4293      	cmp	r3, r2
 8000362:	d932      	bls.n	80003ca <HAL_DEM_MainFunction+0x22e>
 8000364:	4b41      	ldr	r3, [pc, #260]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000366:	891b      	ldrh	r3, [r3, #8]
 8000368:	f640 4231 	movw	r2, #3121	; 0xc31
 800036c:	4293      	cmp	r3, r2
 800036e:	d82c      	bhi.n	80003ca <HAL_DEM_MainFunction+0x22e>
		DATA.DTC_1[0] = 'P';
 8000370:	4b3e      	ldr	r3, [pc, #248]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000372:	2250      	movs	r2, #80	; 0x50
 8000374:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 8000376:	4b3d      	ldr	r3, [pc, #244]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000378:	2230      	movs	r2, #48	; 0x30
 800037a:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 800037c:	4b3b      	ldr	r3, [pc, #236]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800037e:	2230      	movs	r2, #48	; 0x30
 8000380:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 8000382:	4b3a      	ldr	r3, [pc, #232]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000384:	2237      	movs	r2, #55	; 0x37
 8000386:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = 'F';
 8000388:	4b38      	ldr	r3, [pc, #224]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800038a:	2246      	movs	r2, #70	; 0x46
 800038c:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'P';
 800038e:	4b37      	ldr	r3, [pc, #220]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000390:	2250      	movs	r2, #80	; 0x50
 8000392:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '2';
 8000394:	4b35      	ldr	r3, [pc, #212]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000396:	2232      	movs	r2, #50	; 0x32
 8000398:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 800039a:	4b34      	ldr	r3, [pc, #208]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800039c:	2230      	movs	r2, #48	; 0x30
 800039e:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '3';
 80003a0:	4b32      	ldr	r3, [pc, #200]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003a2:	2233      	movs	r2, #51	; 0x33
 80003a4:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '6';
 80003a6:	4b31      	ldr	r3, [pc, #196]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003a8:	2236      	movs	r2, #54	; 0x36
 80003aa:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 80003ac:	4b2f      	ldr	r3, [pc, #188]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003ae:	2250      	movs	r2, #80	; 0x50
 80003b0:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '1';
 80003b2:	4b2e      	ldr	r3, [pc, #184]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003b4:	2231      	movs	r2, #49	; 0x31
 80003b6:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '8';
 80003b8:	4b2c      	ldr	r3, [pc, #176]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003ba:	2238      	movs	r2, #56	; 0x38
 80003bc:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = 'D';
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003c0:	2244      	movs	r2, #68	; 0x44
 80003c2:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '0';
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003c6:	2230      	movs	r2, #48	; 0x30
 80003c8:	779a      	strb	r2, [r3, #30]

	}

	// Engine Load Range
	if (DATA.sensor6 >= ENGINE_LOAD_RANG1 && DATA.sensor6  <= ENGINE_LOAD_RANG2) {
 80003ca:	4b28      	ldr	r3, [pc, #160]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003cc:	895b      	ldrh	r3, [r3, #10]
 80003ce:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80003d2:	d332      	bcc.n	800043a <HAL_DEM_MainFunction+0x29e>
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003d6:	895b      	ldrh	r3, [r3, #10]
 80003d8:	f242 52da 	movw	r2, #9690	; 0x25da
 80003dc:	4293      	cmp	r3, r2
 80003de:	d82c      	bhi.n	800043a <HAL_DEM_MainFunction+0x29e>
		DATA.DTC_1[0] = 'P';
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003e2:	2250      	movs	r2, #80	; 0x50
 80003e4:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '0';
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003e8:	2230      	movs	r2, #48	; 0x30
 80003ea:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003ee:	2230      	movs	r2, #48	; 0x30
 80003f0:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '7';
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003f4:	2237      	movs	r2, #55	; 0x37
 80003f6:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '8';
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 80003fa:	2238      	movs	r2, #56	; 0x38
 80003fc:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'B';
 80003fe:	4b1b      	ldr	r3, [pc, #108]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000400:	2242      	movs	r2, #66	; 0x42
 8000402:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '3';
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000406:	2233      	movs	r2, #51	; 0x33
 8000408:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800040c:	2230      	movs	r2, #48	; 0x30
 800040e:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000412:	2230      	movs	r2, #48	; 0x30
 8000414:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000418:	2230      	movs	r2, #48	; 0x30
 800041a:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800041e:	2250      	movs	r2, #80	; 0x50
 8000420:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000424:	2230      	movs	r2, #48	; 0x30
 8000426:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800042a:	2230      	movs	r2, #48	; 0x30
 800042c:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '7';
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000430:	2237      	movs	r2, #55	; 0x37
 8000432:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = '9';
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000436:	2239      	movs	r2, #57	; 0x39
 8000438:	779a      	strb	r2, [r3, #30]

	}

	// Engine Power Range
	if (DATA.sensor7 >= ENGINE_POWER_RANG1 && DATA.sensor7 <= ENGINE_POWER_RANG2) {
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800043c:	899b      	ldrh	r3, [r3, #12]
 800043e:	2b0d      	cmp	r3, #13
 8000440:	d934      	bls.n	80004ac <HAL_DEM_MainFunction+0x310>
 8000442:	4b0a      	ldr	r3, [pc, #40]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000444:	899b      	ldrh	r3, [r3, #12]
 8000446:	2b0e      	cmp	r3, #14
 8000448:	d830      	bhi.n	80004ac <HAL_DEM_MainFunction+0x310>
		DATA.DTC_1[0] = 'P';
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800044c:	2250      	movs	r2, #80	; 0x50
 800044e:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '1';
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000452:	2231      	movs	r2, #49	; 0x31
 8000454:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000458:	2230      	movs	r2, #48	; 0x30
 800045a:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '0';
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 800045e:	2230      	movs	r2, #48	; 0x30
 8000460:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '4';
 8000462:	4b02      	ldr	r3, [pc, #8]	; (800046c <HAL_DEM_MainFunction+0x2d0>)
 8000464:	2234      	movs	r2, #52	; 0x34
 8000466:	751a      	strb	r2, [r3, #20]
 8000468:	e002      	b.n	8000470 <HAL_DEM_MainFunction+0x2d4>
 800046a:	bf00      	nop
 800046c:	20000098 	.word	0x20000098

		DATA.DTC_2[0] = 'P';
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000472:	2250      	movs	r2, #80	; 0x50
 8000474:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '3';
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000478:	2233      	movs	r2, #51	; 0x33
 800047a:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '0';
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 800047e:	2230      	movs	r2, #48	; 0x30
 8000480:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = '0';
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000484:	2230      	movs	r2, #48	; 0x30
 8000486:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 8000488:	4b25      	ldr	r3, [pc, #148]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 800048a:	2230      	movs	r2, #48	; 0x30
 800048c:	765a      	strb	r2, [r3, #25]

		DATA.DTC_3[0] = 'P';
 800048e:	4b24      	ldr	r3, [pc, #144]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000490:	2250      	movs	r2, #80	; 0x50
 8000492:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 8000494:	4b22      	ldr	r3, [pc, #136]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000496:	2230      	movs	r2, #48	; 0x30
 8000498:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 800049a:	4b21      	ldr	r3, [pc, #132]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 800049c:	2230      	movs	r2, #48	; 0x30
 800049e:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '7';
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004a2:	2237      	movs	r2, #55	; 0x37
 80004a4:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = 'E';
 80004a6:	4b1e      	ldr	r3, [pc, #120]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004a8:	2245      	movs	r2, #69	; 0x45
 80004aa:	779a      	strb	r2, [r3, #30]

	}

	// Engine Coolant Temperature Range
	if (DATA.sensor8 >= ENGINE_COOLANT_TEMP_RANG1 && DATA.sensor8 <= ENGINE_COOLANT_TEMP_RANG2) {
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004ae:	89db      	ldrh	r3, [r3, #14]
 80004b0:	2b2b      	cmp	r3, #43	; 0x2b
 80004b2:	d930      	bls.n	8000516 <HAL_DEM_MainFunction+0x37a>
 80004b4:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004b6:	89db      	ldrh	r3, [r3, #14]
 80004b8:	2b63      	cmp	r3, #99	; 0x63
 80004ba:	d82c      	bhi.n	8000516 <HAL_DEM_MainFunction+0x37a>
		DATA.DTC_3[0] = 'P';
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004be:	2250      	movs	r2, #80	; 0x50
 80004c0:	769a      	strb	r2, [r3, #26]
		DATA.DTC_3[1] = '0';
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004c4:	2230      	movs	r2, #48	; 0x30
 80004c6:	76da      	strb	r2, [r3, #27]
		DATA.DTC_3[2] = '0';
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004ca:	2230      	movs	r2, #48	; 0x30
 80004cc:	771a      	strb	r2, [r3, #28]
		DATA.DTC_3[3] = '7';
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004d0:	2237      	movs	r2, #55	; 0x37
 80004d2:	775a      	strb	r2, [r3, #29]
		DATA.DTC_3[4] = 'E';
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004d6:	2245      	movs	r2, #69	; 0x45
 80004d8:	779a      	strb	r2, [r3, #30]

		DATA.DTC_1[0] = 'P';
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004dc:	2250      	movs	r2, #80	; 0x50
 80004de:	741a      	strb	r2, [r3, #16]
		DATA.DTC_1[1] = '2';
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004e2:	2232      	movs	r2, #50	; 0x32
 80004e4:	745a      	strb	r2, [r3, #17]
		DATA.DTC_1[2] = '0';
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004e8:	2230      	movs	r2, #48	; 0x30
 80004ea:	749a      	strb	r2, [r3, #18]
		DATA.DTC_1[3] = '3';
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004ee:	2233      	movs	r2, #51	; 0x33
 80004f0:	74da      	strb	r2, [r3, #19]
		DATA.DTC_1[4] = '6';
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004f4:	2236      	movs	r2, #54	; 0x36
 80004f6:	751a      	strb	r2, [r3, #20]

		DATA.DTC_2[0] = 'P';
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 80004fa:	2250      	movs	r2, #80	; 0x50
 80004fc:	755a      	strb	r2, [r3, #21]
		DATA.DTC_2[1] = '1';
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000500:	2231      	movs	r2, #49	; 0x31
 8000502:	759a      	strb	r2, [r3, #22]
		DATA.DTC_2[2] = '8';
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000506:	2238      	movs	r2, #56	; 0x38
 8000508:	75da      	strb	r2, [r3, #23]
		DATA.DTC_2[3] = 'F';
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 800050c:	2246      	movs	r2, #70	; 0x46
 800050e:	761a      	strb	r2, [r3, #24]
		DATA.DTC_2[4] = '0';
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <HAL_DEM_MainFunction+0x384>)
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	765a      	strb	r2, [r3, #25]

	}

	return Return_OK;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	20000098 	.word	0x20000098

08000524 <HAL_MASTER_BUS_MainFunction>:

uint8_t TX_BUFFER[TX_BUFFER_SIZE]= "Remote frame";

Return_Type HAL_MASTER_BUS_Init(void);

Return_Type HAL_MASTER_BUS_MainFunction(void){
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	HAL_SERIAL_COMH_Send(TX_BUFFER,TX_BUFFER_SIZE);
 8000528:	2119      	movs	r1, #25
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <HAL_MASTER_BUS_MainFunction+0x14>)
 800052c:	f003 ffc2 	bl	80044b4 <HAL_SERIAL_COMH_Send>
	return Return_OK;
 8000530:	2301      	movs	r3, #1
}
 8000532:	4618      	mov	r0, r3
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000000 	.word	0x20000000

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <vApplicationGetIdleTaskMemory+0x28>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	200000b8 	.word	0x200000b8
 8000568:	20000158 	.word	0x20000158

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b08e      	sub	sp, #56	; 0x38
 8000570:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fb85 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f853 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f911 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800057e:	f000 f8f1 	bl	8000764 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f8c5 	bl	8000710 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000586:	f000 f891 	bl	80006ac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // UART
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RXBUFFER_SIZE, RX_BUFFER_SIZE);
 800058a:	2232      	movs	r2, #50	; 0x32
 800058c:	491b      	ldr	r1, [pc, #108]	; (80005fc <main+0x90>)
 800058e:	481c      	ldr	r0, [pc, #112]	; (8000600 <main+0x94>)
 8000590:	f002 febf 	bl	8003312 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <main+0x98>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <main+0x98>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f022 0204 	bic.w	r2, r2, #4
 80005a2:	601a      	str	r2, [r3, #0]


  // SPI
  HAL_SPI_Receive_IT(&hspi1, &pRxData, 2);
 80005a4:	2202      	movs	r2, #2
 80005a6:	4918      	ldr	r1, [pc, #96]	; (8000608 <main+0x9c>)
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <main+0xa0>)
 80005aa:	f001 fea9 	bl	8002300 <HAL_SPI_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of main_master */
  osThreadDef(main_master, Startmain_master, osPriorityNormal, 0, 128);
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <main+0xa4>)
 80005b0:	f107 041c 	add.w	r4, r7, #28
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_masterHandle = osThreadCreate(osThread(main_master), NULL);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 ffab 	bl	8004524 <osThreadCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <main+0xa8>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of main_Dem */
  osThreadDef(main_Dem, Startmain_Dem, osPriorityNormal, 0, 128);
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <main+0xac>)
 80005d6:	463c      	mov	r4, r7
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  main_DemHandle = osThreadCreate(osThread(main_Dem), NULL);
 80005e6:	463b      	mov	r3, r7
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 ff9a 	bl	8004524 <osThreadCreate>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a0a      	ldr	r2, [pc, #40]	; (800061c <main+0xb0>)
 80005f4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f6:	f003 ff8e 	bl	8004516 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x8e>
 80005fc:	20000444 	.word	0x20000444
 8000600:	200003b0 	.word	0x200003b0
 8000604:	200003f8 	.word	0x200003f8
 8000608:	20000476 	.word	0x20000476
 800060c:	20000358 	.word	0x20000358
 8000610:	08005ac4 	.word	0x08005ac4
 8000614:	2000043c 	.word	0x2000043c
 8000618:	08005aec 	.word	0x08005aec
 800061c:	20000440 	.word	0x20000440

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b090      	sub	sp, #64	; 0x40
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0318 	add.w	r3, r7, #24
 800062a:	2228      	movs	r2, #40	; 0x28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 f95e 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800065e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0318 	add.w	r3, r7, #24
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f841 	bl	80016f0 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000674:	f000 f918 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 faad 	bl	8001bf4 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a0:	f000 f902 	bl	80008a8 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3740      	adds	r7, #64	; 0x40
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006b2:	4a16      	ldr	r2, [pc, #88]	; (800070c <MX_SPI1_Init+0x60>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006f0:	220a      	movs	r2, #10
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_SPI1_Init+0x5c>)
 80006f6:	f001 fc3b 	bl	8001f70 <HAL_SPI_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f8d2 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000358 	.word	0x20000358
 800070c:	40013000 	.word	0x40013000

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART1_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000748:	f002 fd10 	bl	800316c <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f000 f8a9 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200003b0 	.word	0x200003b0
 8000760:	40013800 	.word	0x40013800

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_DMA_Init+0x38>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <MX_DMA_Init+0x38>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_DMA_Init+0x38>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2105      	movs	r1, #5
 8000786:	200f      	movs	r0, #15
 8000788:	f000 fb61 	bl	8000e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800078c:	200f      	movs	r0, #15
 800078e:	f000 fb7a 	bl	8000e86 <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40021000 	.word	0x40021000

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x40>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <MX_GPIO_Init+0x40>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_GPIO_Init+0x40>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0320 	and.w	r3, r3, #32
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x40>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <MX_GPIO_Init+0x40>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MX_GPIO_Init+0x40>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 4 */


/// CALL BACK UART
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	460b      	mov	r3, r1
 80007ee:	807b      	strh	r3, [r7, #2]
  if(huart->Instance == USART1){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0b      	ldr	r2, [pc, #44]	; (8000824 <HAL_UARTEx_RxEventCallback+0x40>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10f      	bne.n	800081a <HAL_UARTEx_RxEventCallback+0x36>
	  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RXBUFFER_SIZE, RX_BUFFER_SIZE);
 80007fa:	2232      	movs	r2, #50	; 0x32
 80007fc:	490a      	ldr	r1, [pc, #40]	; (8000828 <HAL_UARTEx_RxEventCallback+0x44>)
 80007fe:	480b      	ldr	r0, [pc, #44]	; (800082c <HAL_UARTEx_RxEventCallback+0x48>)
 8000800:	f002 fd87 	bl	8003312 <HAL_UARTEx_ReceiveToIdle_DMA>
	  HAL_SERIAL_COMH_Receive(RXBUFFER_SIZE);
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <HAL_UARTEx_RxEventCallback+0x44>)
 8000806:	f003 fde7 	bl	80043d8 <HAL_SERIAL_COMH_Receive>
	  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_UARTEx_RxEventCallback+0x4c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f022 0204 	bic.w	r2, r2, #4
 8000818:	601a      	str	r2, [r3, #0]
  }
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40013800 	.word	0x40013800
 8000828:	20000444 	.word	0x20000444
 800082c:	200003b0 	.word	0x200003b0
 8000830:	200003f8 	.word	0x200003f8

08000834 <HAL_SPI_RxCpltCallback>:


/// CALL BACK SPI
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	HAL_COMH_Receive(&pRxData);
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_SPI_RxCpltCallback+0x20>)
 800083e:	f003 fcd1 	bl	80041e4 <HAL_COMH_Receive>
	HAL_SPI_Receive_IT(&hspi1, &pRxData, 2);
 8000842:	2202      	movs	r2, #2
 8000844:	4903      	ldr	r1, [pc, #12]	; (8000854 <HAL_SPI_RxCpltCallback+0x20>)
 8000846:	4804      	ldr	r0, [pc, #16]	; (8000858 <HAL_SPI_RxCpltCallback+0x24>)
 8000848:	f001 fd5a 	bl	8002300 <HAL_SPI_Receive_IT>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000476 	.word	0x20000476
 8000858:	20000358 	.word	0x20000358

0800085c <Startmain_master>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Startmain_master */
void Startmain_master(void const * argument)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_MASTER_BUS_MainFunction();
 8000864:	f7ff fe5e 	bl	8000524 <HAL_MASTER_BUS_MainFunction>
	  osDelay(200);
 8000868:	20c8      	movs	r0, #200	; 0xc8
 800086a:	f003 fea7 	bl	80045bc <osDelay>
  {
 800086e:	e7f9      	b.n	8000864 <Startmain_master+0x8>

08000870 <Startmain_Dem>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startmain_Dem */
void Startmain_Dem(void const * argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startmain_Dem */
  /* Infinite loop */
  for(;;)
  {
	  HAL_DEM_MainFunction();
 8000878:	f7ff fc90 	bl	800019c <HAL_DEM_MainFunction>
	  osDelay(200);
 800087c:	20c8      	movs	r0, #200	; 0xc8
 800087e:	f003 fe9d 	bl	80045bc <osDelay>
  {
 8000882:	e7f9      	b.n	8000878 <Startmain_Dem+0x8>

08000884 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d101      	bne.n	800089a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000896:	f000 fa09 	bl	8000cac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_MspInit+0x68>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_MspInit+0x68>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_MspInit+0x68>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x68>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <HAL_MspInit+0x68>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008dc:	61d3      	str	r3, [r2, #28]
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x68>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	210f      	movs	r1, #15
 80008ee:	f06f 0001 	mvn.w	r0, #1
 80008f2:	f000 faac 	bl	8000e4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x6c>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_MspInit+0x6c>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	40010000 	.word	0x40010000

08000924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_SPI_MspInit+0x98>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d137      	bne.n	80009b4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <HAL_SPI_MspInit+0x9c>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_SPI_MspInit+0x9c>)
 800094a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <HAL_SPI_MspInit+0x9c>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <HAL_SPI_MspInit+0x9c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a17      	ldr	r2, [pc, #92]	; (80009c0 <HAL_SPI_MspInit+0x9c>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <HAL_SPI_MspInit+0x9c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000974:	23b0      	movs	r3, #176	; 0xb0
 8000976:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	480f      	ldr	r0, [pc, #60]	; (80009c4 <HAL_SPI_MspInit+0xa0>)
 8000988:	f000 fd2e 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_SPI_MspInit+0xa0>)
 80009a0:	f000 fd22 	bl	80013e8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2105      	movs	r1, #5
 80009a8:	2023      	movs	r0, #35	; 0x23
 80009aa:	f000 fa50 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80009ae:	2023      	movs	r0, #35	; 0x23
 80009b0:	f000 fa69 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009b4:	bf00      	nop
 80009b6:	3720      	adds	r7, #32
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800

080009c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a33      	ldr	r2, [pc, #204]	; (8000ab0 <HAL_UART_MspInit+0xe8>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d15f      	bne.n	8000aa8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a2b      	ldr	r2, [pc, #172]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <HAL_UART_MspInit+0xec>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0304 	and.w	r3, r3, #4
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 8000a2e:	f000 fcdb 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <HAL_UART_MspInit+0xf0>)
 8000a48:	f000 fcce 	bl	80013e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <HAL_UART_MspInit+0xf8>)
 8000a50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a7e:	f000 fa11 	bl	8000ea4 <HAL_DMA_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000a88:	f7ff ff0e 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <HAL_UART_MspInit+0xf4>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2105      	movs	r1, #5
 8000a9c:	2025      	movs	r0, #37	; 0x25
 8000a9e:	f000 f9d6 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa2:	2025      	movs	r0, #37	; 0x25
 8000aa4:	f000 f9ef 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	200003f8 	.word	0x200003f8
 8000ac0:	40020058 	.word	0x40020058

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ada:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <HAL_InitTick+0xd4>)
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <HAL_InitTick+0xd4>)
 8000ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ae4:	6193      	str	r3, [r2, #24]
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <HAL_InitTick+0xd4>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af2:	f107 020c 	add.w	r2, r7, #12
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f9e9 	bl	8001ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b02:	f001 f9d3 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8000b06:	4603      	mov	r3, r0
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <HAL_InitTick+0xd8>)
 8000b10:	fba2 2303 	umull	r2, r3, r2, r3
 8000b14:	0c9b      	lsrs	r3, r3, #18
 8000b16:	3b01      	subs	r3, #1
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b1c:	4a21      	ldr	r2, [pc, #132]	; (8000ba4 <HAL_InitTick+0xe0>)
 8000b1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b20:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b26:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b40:	4817      	ldr	r0, [pc, #92]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b42:	f002 f8c8 	bl	8002cd6 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d11b      	bne.n	8000b8c <HAL_InitTick+0xc8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <HAL_InitTick+0xdc>)
 8000b56:	f002 f917 	bl	8002d88 <HAL_TIM_Base_Start_IT>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d111      	bne.n	8000b8c <HAL_InitTick+0xc8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b68:	2019      	movs	r0, #25
 8000b6a:	f000 f98c 	bl	8000e86 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d808      	bhi.n	8000b86 <HAL_InitTick+0xc2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2019      	movs	r0, #25
 8000b7a:	f000 f968 	bl	8000e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_InitTick+0xe4>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e002      	b.n	8000b8c <HAL_InitTick+0xc8>
      }
      else
      {
        status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3730      	adds	r7, #48	; 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	431bde83 	.word	0x431bde83
 8000ba0:	20000478 	.word	0x20000478
 8000ba4:	40012c00 	.word	0x40012c00
 8000ba8:	20000020 	.word	0x20000020

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
	...

08000bd8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel5_IRQHandler+0x10>)
 8000bde:	f000 facf 	bl	8001180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200003f8 	.word	0x200003f8

08000bec <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM1_UP_IRQHandler+0x10>)
 8000bf2:	f002 f91b 	bl	8002e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000478 	.word	0x20000478

08000c00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <SPI1_IRQHandler+0x10>)
 8000c06:	f001 fcad 	bl	8002564 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000358 	.word	0x20000358

08000c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <USART1_IRQHandler+0x10>)
 8000c1a:	f002 fbd7 	bl	80033cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200003b0 	.word	0x200003b0

08000c28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c34:	f7ff fff8 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c3a:	490c      	ldr	r1, [pc, #48]	; (8000c6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c3c:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c50:	4c09      	ldr	r4, [pc, #36]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f004 fea5 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c62:	f7ff fc83 	bl	800056c <main>
  bx lr
 8000c66:	4770      	bx	lr
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c70:	08005b44 	.word	0x08005b44
  ldr r2, =_sbss
 8000c74:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c78:	20001350 	.word	0x20001350

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x28>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x28>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f8d1 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff ff14 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fe0a 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_IncTick+0x1c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a03      	ldr	r2, [pc, #12]	; (8000ccc <HAL_IncTick+0x20>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	20000024 	.word	0x20000024
 8000ccc:	200004c0 	.word	0x200004c0

08000cd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <HAL_GetTick+0x10>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	200004c0 	.word	0x200004c0

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4906      	ldr	r1, [pc, #24]	; (8000d7c <__NVIC_EnableIRQ+0x34>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff4f 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff64 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ffb2 	bl	8000dd4 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff81 	bl	8000d80 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff57 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e043      	b.n	8000f42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <HAL_DMA_Init+0xa8>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <HAL_DMA_Init+0xac>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	091b      	lsrs	r3, r3, #4
 8000ecc:	009a      	lsls	r2, r3, #2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_DMA_Init+0xb0>)
 8000ed6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2202      	movs	r2, #2
 8000edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000eee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ef2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	bffdfff8 	.word	0xbffdfff8
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <HAL_DMA_Start_IT+0x20>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e04b      	b.n	8001010 <HAL_DMA_Start_IT+0xb8>
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d13a      	bne.n	8001002 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2200      	movs	r2, #0
 8000f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f9eb 	bl	800138c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f042 020e 	orr.w	r2, r2, #14
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00f      	b.n	8000ff0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f022 0204 	bic.w	r2, r2, #4
 8000fde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 020a 	orr.w	r2, r2, #10
 8000fee:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e005      	b.n	800100e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800100a:	2302      	movs	r3, #2
 800100c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800100e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d008      	beq.n	8001042 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2204      	movs	r2, #4
 8001034:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e020      	b.n	8001084 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 020e 	bic.w	r2, r2, #14
 8001050:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0201 	bic.w	r2, r2, #1
 8001060:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106a:	2101      	movs	r1, #1
 800106c:	fa01 f202 	lsl.w	r2, r1, r2
 8001070:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
	...

08001090 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d005      	beq.n	80010b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2204      	movs	r2, #4
 80010ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e051      	b.n	8001158 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 020e 	bic.w	r2, r2, #14
 80010c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_DMA_Abort_IT+0xd4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d029      	beq.n	8001132 <HAL_DMA_Abort_IT+0xa2>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_DMA_Abort_IT+0xd8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d022      	beq.n	800112e <HAL_DMA_Abort_IT+0x9e>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_DMA_Abort_IT+0xdc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01a      	beq.n	8001128 <HAL_DMA_Abort_IT+0x98>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1e      	ldr	r2, [pc, #120]	; (8001170 <HAL_DMA_Abort_IT+0xe0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d012      	beq.n	8001122 <HAL_DMA_Abort_IT+0x92>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_DMA_Abort_IT+0xe4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00a      	beq.n	800111c <HAL_DMA_Abort_IT+0x8c>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_DMA_Abort_IT+0xe8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d102      	bne.n	8001116 <HAL_DMA_Abort_IT+0x86>
 8001110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001114:	e00e      	b.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 8001116:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111a:	e00b      	b.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 800111c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001120:	e008      	b.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	e005      	b.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	e002      	b.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 800112e:	2310      	movs	r3, #16
 8001130:	e000      	b.n	8001134 <HAL_DMA_Abort_IT+0xa4>
 8001132:	2301      	movs	r3, #1
 8001134:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_DMA_Abort_IT+0xec>)
 8001136:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	4798      	blx	r3
    } 
  }
  return status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40020008 	.word	0x40020008
 8001168:	4002001c 	.word	0x4002001c
 800116c:	40020030 	.word	0x40020030
 8001170:	40020044 	.word	0x40020044
 8001174:	40020058 	.word	0x40020058
 8001178:	4002006c 	.word	0x4002006c
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2204      	movs	r2, #4
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d04f      	beq.n	8001248 <HAL_DMA_IRQHandler+0xc8>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d04a      	beq.n	8001248 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d107      	bne.n	80011d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a66      	ldr	r2, [pc, #408]	; (8001370 <HAL_DMA_IRQHandler+0x1f0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d029      	beq.n	800122e <HAL_DMA_IRQHandler+0xae>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a65      	ldr	r2, [pc, #404]	; (8001374 <HAL_DMA_IRQHandler+0x1f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d022      	beq.n	800122a <HAL_DMA_IRQHandler+0xaa>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a63      	ldr	r2, [pc, #396]	; (8001378 <HAL_DMA_IRQHandler+0x1f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01a      	beq.n	8001224 <HAL_DMA_IRQHandler+0xa4>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a62      	ldr	r2, [pc, #392]	; (800137c <HAL_DMA_IRQHandler+0x1fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d012      	beq.n	800121e <HAL_DMA_IRQHandler+0x9e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_DMA_IRQHandler+0x200>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00a      	beq.n	8001218 <HAL_DMA_IRQHandler+0x98>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5f      	ldr	r2, [pc, #380]	; (8001384 <HAL_DMA_IRQHandler+0x204>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d102      	bne.n	8001212 <HAL_DMA_IRQHandler+0x92>
 800120c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001210:	e00e      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 8001212:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001216:	e00b      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 8001218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800121c:	e008      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 800121e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001222:	e005      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 8001224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001228:	e002      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	e000      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 800122e:	2304      	movs	r3, #4
 8001230:	4a55      	ldr	r2, [pc, #340]	; (8001388 <HAL_DMA_IRQHandler+0x208>)
 8001232:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8094 	beq.w	8001366 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001246:	e08e      	b.n	8001366 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2202      	movs	r2, #2
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d056      	beq.n	8001306 <HAL_DMA_IRQHandler+0x186>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d051      	beq.n	8001306 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10b      	bne.n	8001288 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 020a 	bic.w	r2, r2, #10
 800127e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a38      	ldr	r2, [pc, #224]	; (8001370 <HAL_DMA_IRQHandler+0x1f0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d029      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x166>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a37      	ldr	r2, [pc, #220]	; (8001374 <HAL_DMA_IRQHandler+0x1f4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d022      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x162>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a35      	ldr	r2, [pc, #212]	; (8001378 <HAL_DMA_IRQHandler+0x1f8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01a      	beq.n	80012dc <HAL_DMA_IRQHandler+0x15c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a34      	ldr	r2, [pc, #208]	; (800137c <HAL_DMA_IRQHandler+0x1fc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d012      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x156>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <HAL_DMA_IRQHandler+0x200>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00a      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x150>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_DMA_IRQHandler+0x204>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d102      	bne.n	80012ca <HAL_DMA_IRQHandler+0x14a>
 80012c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012c8:	e00e      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ce:	e00b      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d4:	e008      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	e005      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e0:	e002      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012e2:	2320      	movs	r3, #32
 80012e4:	e000      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012e6:	2302      	movs	r3, #2
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <HAL_DMA_IRQHandler+0x208>)
 80012ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d034      	beq.n	8001366 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001304:	e02f      	b.n	8001366 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2208      	movs	r2, #8
 800130c:	409a      	lsls	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d028      	beq.n	8001368 <HAL_DMA_IRQHandler+0x1e8>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 020e 	bic.w	r2, r2, #14
 800132e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    }
  }
  return;
 8001366:	bf00      	nop
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020008 	.word	0x40020008
 8001374:	4002001c 	.word	0x4002001c
 8001378:	40020030 	.word	0x40020030
 800137c:	40020044 	.word	0x40020044
 8001380:	40020058 	.word	0x40020058
 8001384:	4002006c 	.word	0x4002006c
 8001388:	40020000 	.word	0x40020000

0800138c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b10      	cmp	r3, #16
 80013b8:	d108      	bne.n	80013cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013ca:	e007      	b.n	80013dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e169      	b.n	80016d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013fc:	2201      	movs	r2, #1
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8158 	bne.w	80016ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a9a      	ldr	r2, [pc, #616]	; (8001688 <HAL_GPIO_Init+0x2a0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d05e      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001424:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d875      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800142a:	4a98      	ldr	r2, [pc, #608]	; (800168c <HAL_GPIO_Init+0x2a4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d058      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001430:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d86f      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001436:	4a96      	ldr	r2, [pc, #600]	; (8001690 <HAL_GPIO_Init+0x2a8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d052      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 800143c:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2a8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d869      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001442:	4a94      	ldr	r2, [pc, #592]	; (8001694 <HAL_GPIO_Init+0x2ac>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d04c      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001448:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2ac>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d863      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800144e:	4a92      	ldr	r2, [pc, #584]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d046      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001454:	4a90      	ldr	r2, [pc, #576]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d85d      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d82a      	bhi.n	80014b4 <HAL_GPIO_Init+0xcc>
 800145e:	2b12      	cmp	r3, #18
 8001460:	d859      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <HAL_GPIO_Init+0x80>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014bd 	.word	0x080014bd
 8001470:	080014cf 	.word	0x080014cf
 8001474:	08001511 	.word	0x08001511
 8001478:	08001517 	.word	0x08001517
 800147c:	08001517 	.word	0x08001517
 8001480:	08001517 	.word	0x08001517
 8001484:	08001517 	.word	0x08001517
 8001488:	08001517 	.word	0x08001517
 800148c:	08001517 	.word	0x08001517
 8001490:	08001517 	.word	0x08001517
 8001494:	08001517 	.word	0x08001517
 8001498:	08001517 	.word	0x08001517
 800149c:	08001517 	.word	0x08001517
 80014a0:	08001517 	.word	0x08001517
 80014a4:	08001517 	.word	0x08001517
 80014a8:	08001517 	.word	0x08001517
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014d9 	.word	0x080014d9
 80014b4:	4a79      	ldr	r2, [pc, #484]	; (800169c <HAL_GPIO_Init+0x2b4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ba:	e02c      	b.n	8001516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e029      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e024      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	3308      	adds	r3, #8
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e01f      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	330c      	adds	r3, #12
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e01a      	b.n	8001518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ea:	2304      	movs	r3, #4
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e013      	b.n	8001518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	611a      	str	r2, [r3, #16]
          break;
 8001502:	e009      	b.n	8001518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	615a      	str	r2, [r3, #20]
          break;
 800150e:	e003      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x130>
          break;
 8001516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d801      	bhi.n	8001522 <HAL_GPIO_Init+0x13a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_Init+0x13e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d802      	bhi.n	8001534 <HAL_GPIO_Init+0x14c>
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x152>
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	3b08      	subs	r3, #8
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	210f      	movs	r1, #15
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	6a39      	ldr	r1, [r7, #32]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80b1 	beq.w	80016ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001580:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x2c0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_GPIO_Init+0x1ec>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <HAL_GPIO_Init+0x2c4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00d      	beq.n	80015d0 <HAL_GPIO_Init+0x1e8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <HAL_GPIO_Init+0x2c8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x1e4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_Init+0x1e0>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e006      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e004      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4093      	lsls	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e6:	492f      	ldr	r1, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	492c      	ldr	r1, [pc, #176]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4928      	ldr	r1, [pc, #160]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4922      	ldr	r1, [pc, #136]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	60cb      	str	r3, [r1, #12]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	491e      	ldr	r1, [pc, #120]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4918      	ldr	r1, [pc, #96]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4914      	ldr	r1, [pc, #80]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e021      	b.n	80016ca <HAL_GPIO_Init+0x2e2>
 8001686:	bf00      	nop
 8001688:	10320000 	.word	0x10320000
 800168c:	10310000 	.word	0x10310000
 8001690:	10220000 	.word	0x10220000
 8001694:	10210000 	.word	0x10210000
 8001698:	10120000 	.word	0x10120000
 800169c:	10110000 	.word	0x10110000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40011400 	.word	0x40011400
 80016b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4909      	ldr	r1, [pc, #36]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	3301      	adds	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae8e 	bne.w	80013fc <HAL_GPIO_Init+0x14>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	372c      	adds	r7, #44	; 0x2c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e272      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8087 	beq.w	800181e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001710:	4b92      	ldr	r3, [pc, #584]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00c      	beq.n	8001736 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800171c:	4b8f      	ldr	r3, [pc, #572]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d112      	bne.n	800174e <HAL_RCC_OscConfig+0x5e>
 8001728:	4b8c      	ldr	r3, [pc, #560]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001734:	d10b      	bne.n	800174e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001736:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d06c      	beq.n	800181c <HAL_RCC_OscConfig+0x12c>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d168      	bne.n	800181c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e24c      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x76>
 8001758:	4b80      	ldr	r3, [pc, #512]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a7f      	ldr	r2, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e02e      	b.n	80017c4 <HAL_RCC_OscConfig+0xd4>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x98>
 800176e:	4b7b      	ldr	r3, [pc, #492]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7a      	ldr	r2, [pc, #488]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b78      	ldr	r3, [pc, #480]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a77      	ldr	r2, [pc, #476]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e01d      	b.n	80017c4 <HAL_RCC_OscConfig+0xd4>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0xbc>
 8001792:	4b72      	ldr	r3, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a71      	ldr	r2, [pc, #452]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b6f      	ldr	r3, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6e      	ldr	r2, [pc, #440]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xd4>
 80017ac:	4b6b      	ldr	r3, [pc, #428]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6a      	ldr	r2, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a67      	ldr	r2, [pc, #412]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fa80 	bl	8000cd0 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fa7c 	bl	8000cd0 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e200      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xe4>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fa6c 	bl	8000cd0 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fa68 	bl	8000cd0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1ec      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x10c>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d063      	beq.n	80018f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001836:	4b49      	ldr	r3, [pc, #292]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d11c      	bne.n	800187c <HAL_RCC_OscConfig+0x18c>
 8001842:	4b46      	ldr	r3, [pc, #280]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_RCC_OscConfig+0x176>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e1c0      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4939      	ldr	r1, [pc, #228]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	e03a      	b.n	80018f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d020      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_RCC_OscConfig+0x270>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fa21 	bl	8000cd0 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fa1d 	bl	8000cd0 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e1a1      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4927      	ldr	r1, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
 80018c4:	e015      	b.n	80018f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_OscConfig+0x270>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa00 	bl	8000cd0 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff f9fc 	bl	8000cd0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e180      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03a      	beq.n	8001974 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d019      	beq.n	800193a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_RCC_OscConfig+0x274>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff f9e0 	bl	8000cd0 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff f9dc 	bl	8000cd0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e160      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_RCC_OscConfig+0x26c>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f000 fafe 	bl	8001f34 <RCC_Delay>
 8001938:	e01c      	b.n	8001974 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_RCC_OscConfig+0x274>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001940:	f7ff f9c6 	bl	8000cd0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001946:	e00f      	b.n	8001968 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001948:	f7ff f9c2 	bl	8000cd0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d908      	bls.n	8001968 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e146      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	42420000 	.word	0x42420000
 8001964:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4b92      	ldr	r3, [pc, #584]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e9      	bne.n	8001948 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a6 	beq.w	8001ace <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a87      	ldr	r2, [pc, #540]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	4b82      	ldr	r3, [pc, #520]	; (8001bb8 <HAL_RCC_OscConfig+0x4c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x4c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x4c8>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c6:	f7ff f983 	bl	8000cd0 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff f97f 	bl	8000cd0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e103      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <HAL_RCC_OscConfig+0x4c8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x312>
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a6e      	ldr	r2, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	e02d      	b.n	8001a5e <HAL_RCC_OscConfig+0x36e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x334>
 8001a0a:	4b6a      	ldr	r3, [pc, #424]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a69      	ldr	r2, [pc, #420]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a66      	ldr	r2, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	e01c      	b.n	8001a5e <HAL_RCC_OscConfig+0x36e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x356>
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4a60      	ldr	r2, [pc, #384]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6213      	str	r3, [r2, #32]
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4a5d      	ldr	r2, [pc, #372]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6213      	str	r3, [r2, #32]
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x36e>
 8001a46:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6213      	str	r3, [r2, #32]
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d015      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a66:	f7ff f933 	bl	8000cd0 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f92f 	bl	8000cd0 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0b1      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	4b4b      	ldr	r3, [pc, #300]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ee      	beq.n	8001a6e <HAL_RCC_OscConfig+0x37e>
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f91d 	bl	8000cd0 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f919 	bl	8000cd0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e09b      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ee      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a3b      	ldr	r2, [pc, #236]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001acc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8087 	beq.w	8001be6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d061      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d146      	bne.n	8001b7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <HAL_RCC_OscConfig+0x4cc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff f8ed 	bl	8000cd0 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f8e9 	bl	8000cd0 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e06d      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d108      	bne.n	8001b34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b22:	4b24      	ldr	r3, [pc, #144]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	4921      	ldr	r1, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a19      	ldr	r1, [r3, #32]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	430b      	orrs	r3, r1
 8001b46:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff f8bd 	bl	8000cd0 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f8b9 	bl	8000cd0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e03d      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x46a>
 8001b78:	e035      	b.n	8001be6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x4cc>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff f8a6 	bl	8000cd0 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff f8a2 	bl	8000cd0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e026      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x498>
 8001ba6:	e01e      	b.n	8001be6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e019      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x500>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0d0      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d910      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 0207 	bic.w	r2, r3, #7
 8001c1e:	4965      	ldr	r1, [pc, #404]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d040      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d115      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e073      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06b      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd2:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f023 0203 	bic.w	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	4936      	ldr	r1, [pc, #216]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce4:	f7fe fff4 	bl	8000cd0 <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	e00a      	b.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cec:	f7fe fff0 	bl	8000cd0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e053      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 020c 	and.w	r2, r3, #12
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d1eb      	bne.n	8001cec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d210      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0207 	bic.w	r2, r3, #7
 8001d2a:	4922      	ldr	r1, [pc, #136]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	; (8001dbc <HAL_RCC_ClockConfig+0x1c8>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fe8e 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40022000 	.word	0x40022000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08005b10 	.word	0x08005b10
 8001dc0:	2000001c 	.word	0x2000001c
 8001dc4:	20000020 	.word	0x20000020

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d002      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x30>
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d003      	beq.n	8001dfe <HAL_RCC_GetSysClockFreq+0x36>
 8001df6:	e027      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfa:	613b      	str	r3, [r7, #16]
      break;
 8001dfc:	e027      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0c9b      	lsrs	r3, r3, #18
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
 8001e0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	0c5b      	lsrs	r3, r3, #17
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	4a11      	ldr	r2, [pc, #68]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e22:	5cd3      	ldrb	r3, [r2, r3]
 8001e24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e2a:	fb03 f202 	mul.w	r2, r3, r2
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e004      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	613b      	str	r3, [r7, #16]
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e4a:	613b      	str	r3, [r7, #16]
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	693b      	ldr	r3, [r7, #16]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	007a1200 	.word	0x007a1200
 8001e64:	08005b28 	.word	0x08005b28
 8001e68:	08005b38 	.word	0x08005b38
 8001e6c:	003d0900 	.word	0x003d0900

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	2000001c 	.word	0x2000001c

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e88:	f7ff fff2 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08005b20 	.word	0x08005b20

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0adb      	lsrs	r3, r3, #11
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08005b20 	.word	0x08005b20

08001ed4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0207 	and.w	r2, r3, #7
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40022000 	.word	0x40022000

08001f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <RCC_Delay+0x34>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <RCC_Delay+0x38>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0a5b      	lsrs	r3, r3, #9
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f50:	bf00      	nop
  }
  while (Delay --);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	60fa      	str	r2, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <RCC_Delay+0x1c>
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	2000001c 	.word	0x2000001c
 8001f6c:	10624dd3 	.word	0x10624dd3

08001f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e076      	b.n	8002070 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d108      	bne.n	8001f9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f92:	d009      	beq.n	8001fa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	e005      	b.n	8001fa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fcae 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202c:	ea42 0103 	orr.w	r1, r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	0c1a      	lsrs	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f002 0204 	and.w	r2, r2, #4
 800204e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800205e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	603b      	str	r3, [r7, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_SPI_Transmit+0x22>
 8002096:	2302      	movs	r3, #2
 8002098:	e12d      	b.n	80022f6 <HAL_SPI_Transmit+0x27e>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020a2:	f7fe fe15 	bl	8000cd0 <HAL_GetTick>
 80020a6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d002      	beq.n	80020be <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
 80020ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020bc:	e116      	b.n	80022ec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_Transmit+0x52>
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020ce:	e10d      	b.n	80022ec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2203      	movs	r2, #3
 80020d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	88fa      	ldrh	r2, [r7, #6]
 80020ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002116:	d10f      	bne.n	8002138 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002136:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b40      	cmp	r3, #64	; 0x40
 8002144:	d007      	beq.n	8002156 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800215e:	d14f      	bne.n	8002200 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_SPI_Transmit+0xf6>
 8002168:	8afb      	ldrh	r3, [r7, #22]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d142      	bne.n	80021f4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	1c9a      	adds	r2, r3, #2
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002192:	e02f      	b.n	80021f4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d112      	bne.n	80021c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	881a      	ldrh	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	1c9a      	adds	r2, r3, #2
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80021c6:	e015      	b.n	80021f4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c8:	f7fe fd82 	bl	8000cd0 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d803      	bhi.n	80021e0 <HAL_SPI_Transmit+0x168>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <HAL_SPI_Transmit+0x16e>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80021f2:	e07b      	b.n	80022ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1ca      	bne.n	8002194 <HAL_SPI_Transmit+0x11c>
 80021fe:	e050      	b.n	80022a2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_SPI_Transmit+0x196>
 8002208:	8afb      	ldrh	r3, [r7, #22]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d144      	bne.n	8002298 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	330c      	adds	r3, #12
 8002218:	7812      	ldrb	r2, [r2, #0]
 800221a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002234:	e030      	b.n	8002298 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d113      	bne.n	800226c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	330c      	adds	r3, #12
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	86da      	strh	r2, [r3, #54]	; 0x36
 800226a:	e015      	b.n	8002298 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226c:	f7fe fd30 	bl	8000cd0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d803      	bhi.n	8002284 <HAL_SPI_Transmit+0x20c>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002282:	d102      	bne.n	800228a <HAL_SPI_Transmit+0x212>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002296:	e029      	b.n	80022ec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1c9      	bne.n	8002236 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	6839      	ldr	r1, [r7, #0]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 fc44 	bl	8002b34 <SPI_EndRxTxTransaction>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	77fb      	strb	r3, [r7, #31]
 80022e2:	e003      	b.n	80022ec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d002      	beq.n	8002324 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800231e:	2302      	movs	r3, #2
 8002320:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002322:	e07d      	b.n	8002420 <HAL_SPI_Receive_IT+0x120>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d110      	bne.n	800234e <HAL_SPI_Receive_IT+0x4e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002334:	d10b      	bne.n	800234e <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2204      	movs	r2, #4
 800233a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f879 	bl	800243c <HAL_SPI_TransmitReceive_IT>
 800234a:	4603      	mov	r3, r0
 800234c:	e06d      	b.n	800242a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_SPI_Receive_IT+0x5c>
 8002358:	2302      	movs	r3, #2
 800235a:	e066      	b.n	800242a <HAL_SPI_Receive_IT+0x12a>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_SPI_Receive_IT+0x70>
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002374:	e054      	b.n	8002420 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2204      	movs	r2, #4
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	88fa      	ldrh	r2, [r7, #6]
 800238e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4a1e      	ldr	r2, [pc, #120]	; (8002434 <HAL_SPI_Receive_IT+0x134>)
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
 80023bc:	e002      	b.n	80023c4 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <HAL_SPI_Receive_IT+0x138>)
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023cc:	d10f      	bne.n	80023ee <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80023fc:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d008      	beq.n	800241e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e000      	b.n	8002420 <HAL_SPI_Receive_IT+0x120>
  }

error :
 800241e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002428:	7dfb      	ldrb	r3, [r7, #23]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	08002939 	.word	0x08002939
 8002438:	080028ef 	.word	0x080028ef

0800243c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
 8002448:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_SPI_TransmitReceive_IT+0x20>
 8002458:	2302      	movs	r3, #2
 800245a:	e075      	b.n	8002548 <HAL_SPI_TransmitReceive_IT+0x10c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800246a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00d      	beq.n	8002494 <HAL_SPI_TransmitReceive_IT+0x58>
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800247e:	d106      	bne.n	800248e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_SPI_TransmitReceive_IT+0x52>
 8002488:	7dbb      	ldrb	r3, [r7, #22]
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800248e:	2302      	movs	r3, #2
 8002490:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002492:	e054      	b.n	800253e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d102      	bne.n	80024ac <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024aa:	e048      	b.n	800253e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d003      	beq.n	80024c0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2205      	movs	r2, #5
 80024bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	887a      	ldrh	r2, [r7, #2]
 80024e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_SPI_TransmitReceive_IT+0x118>)
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
 80024fe:	e005      	b.n	800250c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_SPI_TransmitReceive_IT+0x120>)
 8002504:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4a15      	ldr	r2, [pc, #84]	; (8002560 <HAL_SPI_TransmitReceive_IT+0x124>)
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800251a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d008      	beq.n	800253c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e000      	b.n	800253e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800253c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002546:	7dfb      	ldrb	r3, [r7, #23]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	08002831 	.word	0x08002831
 8002558:	08002891 	.word	0x08002891
 800255c:	0800276d 	.word	0x0800276d
 8002560:	080027d1 	.word	0x080027d1

08002564 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
    return;
 80025a2:	e0b7      	b.n	8002714 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_SPI_IRQHandler+0x5e>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
    return;
 80025c0:	e0a8      	b.n	8002714 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_SPI_IRQHandler+0x74>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 809e 	beq.w	8002714 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8098 	beq.w	8002714 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d023      	beq.n	8002636 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d011      	beq.n	800261e <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	e00b      	b.n	8002636 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
        return;
 8002634:	e06e      	b.n	8002714 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	2b00      	cmp	r3, #0
 8002670:	d04f      	beq.n	8002712 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002680:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_SPI_IRQHandler+0x13a>
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d034      	beq.n	8002708 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0203 	bic.w	r2, r2, #3
 80026ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d011      	beq.n	80026da <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_SPI_IRQHandler+0x1b8>)
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fce4 	bl	8001090 <HAL_DMA_Abort_IT>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_SPI_IRQHandler+0x1b8>)
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fe fcce 	bl	8001090 <HAL_DMA_Abort_IT>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002706:	e003      	b.n	8002710 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f812 	bl	8002732 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800270e:	e000      	b.n	8002712 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002710:	bf00      	nop
    return;
 8002712:	bf00      	nop
  }
}
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	08002745 	.word	0x08002745

08002720 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff ffe7 	bl	8002732 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f103 020c 	add.w	r2, r3, #12
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027b6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f9d4 	bl	8002b70 <SPI_CloseRxTx_ISR>
    }
  }
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10f      	bne.n	8002828 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002816:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f9a4 	bl	8002b70 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	b292      	uxth	r2, r2
 8002844:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284a:	1c9a      	adds	r2, r3, #2
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002854:	b29b      	uxth	r3, r3
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10f      	bne.n	8002888 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002876:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f974 	bl	8002b70 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	881a      	ldrh	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	1c9a      	adds	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10f      	bne.n	80028e6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f945 	bl	8002b70 <SPI_CloseRxTx_ISR>
    }
  }
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f103 020c 	add.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002916:	b29b      	uxth	r3, r3
 8002918:	3b01      	subs	r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f994 	bl	8002c58 <SPI_CloseRx_ISR>
  }
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	b292      	uxth	r2, r2
 800294c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002952:	1c9a      	adds	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f971 	bl	8002c58 <SPI_CloseRx_ISR>
  }
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002990:	f7fe f99e 	bl	8000cd0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	4413      	add	r3, r2
 800299e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029a0:	f7fe f996 	bl	8000cd0 <HAL_GetTick>
 80029a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	0d1b      	lsrs	r3, r3, #20
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	fb02 f303 	mul.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b6:	e054      	b.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029be:	d050      	beq.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029c0:	f7fe f986 	bl	8000cd0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d902      	bls.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d13d      	bne.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ee:	d111      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029f8:	d004      	beq.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a02:	d107      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1c:	d10f      	bne.n	8002a3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e017      	b.n	8002a82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	461a      	mov	r2, r3
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d19b      	bne.n	80029b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000001c 	.word	0x2000001c

08002a90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002aa4:	d111      	bne.n	8002aca <SPI_EndRxTransaction+0x3a>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aae:	d004      	beq.n	8002aba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab8:	d107      	bne.n	8002aca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad2:	d117      	bne.n	8002b04 <SPI_EndRxTransaction+0x74>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d112      	bne.n	8002b04 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff ff49 	bl	8002980 <SPI_WaitFlagStateUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01a      	beq.n	8002b2a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e013      	b.n	8002b2c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff ff36 	bl	8002980 <SPI_WaitFlagStateUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f043 0220 	orr.w	r2, r3, #32
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e000      	b.n	8002b2c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff ff18 	bl	8002980 <SPI_WaitFlagStateUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	f043 0220 	orr.w	r2, r3, #32
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e000      	b.n	8002b68 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002b78:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <SPI_CloseRxTx_ISR+0xe0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <SPI_CloseRxTx_ISR+0xe4>)
 8002b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b82:	0a5b      	lsrs	r3, r3, #9
 8002b84:	2264      	movs	r2, #100	; 0x64
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b8c:	f7fe f8a0 	bl	8000cd0 <HAL_GetTick>
 8002b90:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0220 	bic.w	r2, r2, #32
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bac:	f043 0220 	orr.w	r2, r3, #32
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002bb4:	e009      	b.n	8002bca <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0eb      	beq.n	8002ba2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	2164      	movs	r1, #100	; 0x64
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffb0 	bl	8002b34 <SPI_EndRxTxTransaction>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d115      	bne.n	8002c38 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d107      	bne.n	8002c28 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fd fe07 	bl	8000834 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002c26:	e00e      	b.n	8002c46 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fd75 	bl	8002720 <HAL_SPI_TxRxCpltCallback>
}
 8002c36:	e006      	b.n	8002c46 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff fd76 	bl	8002732 <HAL_SPI_ErrorCallback>
}
 8002c46:	bf00      	nop
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000001c 	.word	0x2000001c
 8002c54:	057619f1 	.word	0x057619f1

08002c58 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002c70:	f7fe f82e 	bl	8000cd0 <HAL_GetTick>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	2164      	movs	r1, #100	; 0x64
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff08 	bl	8002a90 <SPI_EndRxTransaction>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0220 	orr.w	r2, r3, #32
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d103      	bne.n	8002cc8 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fd fdb7 	bl	8000834 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002cc6:	e002      	b.n	8002cce <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fd32 	bl	8002732 <HAL_SPI_ErrorCallback>
}
 8002cce:	bf00      	nop
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e041      	b.n	8002d6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 f839 	bl	8002d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2202      	movs	r2, #2
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f000 f9b5 	bl	8003084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d001      	beq.n	8002da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e03a      	b.n	8002e16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a18      	ldr	r2, [pc, #96]	; (8002e20 <HAL_TIM_Base_Start_IT+0x98>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x58>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dca:	d009      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x58>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_TIM_Base_Start_IT+0x9c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x58>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d010      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e02:	e007      	b.n	8002e14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800

08002e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0202 	mvn.w	r2, #2
 8002e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8ed 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f8e0 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8ef 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0204 	mvn.w	r2, #4
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8c3 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f8b6 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8c5 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d122      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d11b      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0208 	mvn.w	r2, #8
 8002f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2204      	movs	r2, #4
 8002f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f899 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002f1c:	e005      	b.n	8002f2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f88c 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f89b 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d122      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d11b      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0210 	mvn.w	r2, #16
 8002f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f86f 	bl	800304e <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f862 	bl	800303c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f871 	bl	8003060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0201 	mvn.w	r2, #1
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fc6a 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b80      	cmp	r3, #128	; 0x80
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8bf 	bl	800315a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b40      	cmp	r3, #64	; 0x40
 8002ff6:	d107      	bne.n	8003008 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f835 	bl	8003072 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d10e      	bne.n	8003034 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d107      	bne.n	8003034 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0220 	mvn.w	r2, #32
 800302c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f88a 	bl	8003148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a29      	ldr	r2, [pc, #164]	; (800313c <TIM_Base_SetConfig+0xb8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00b      	beq.n	80030b4 <TIM_Base_SetConfig+0x30>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0x30>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a26      	ldr	r2, [pc, #152]	; (8003140 <TIM_Base_SetConfig+0xbc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0x30>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a25      	ldr	r2, [pc, #148]	; (8003144 <TIM_Base_SetConfig+0xc0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <TIM_Base_SetConfig+0xb8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <TIM_Base_SetConfig+0x62>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d007      	beq.n	80030e6 <TIM_Base_SetConfig+0x62>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a19      	ldr	r2, [pc, #100]	; (8003140 <TIM_Base_SetConfig+0xbc>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0x62>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a18      	ldr	r2, [pc, #96]	; (8003144 <TIM_Base_SetConfig+0xc0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d108      	bne.n	80030f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a07      	ldr	r2, [pc, #28]	; (800313c <TIM_Base_SetConfig+0xb8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d103      	bne.n	800312c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	615a      	str	r2, [r3, #20]
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800

08003148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e042      	b.n	8003204 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fc18 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 ff89 	bl	80040c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	d16d      	bne.n	8003308 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_UART_Transmit+0x2c>
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e066      	b.n	800330a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2221      	movs	r2, #33	; 0x21
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324a:	f7fd fd41 	bl	8000cd0 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d108      	bne.n	8003278 <HAL_UART_Transmit+0x6c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d104      	bne.n	8003278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e003      	b.n	8003280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003280:	e02a      	b.n	80032d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2200      	movs	r2, #0
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc51 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e036      	b.n	800330a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	3302      	adds	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e007      	b.n	80032ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1cf      	bne.n	8003282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fc21 	bl	8003b34 <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e006      	b.n	800330a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b08c      	sub	sp, #48	; 0x30
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d14a      	bne.n	80033c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e043      	b.n	80033c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	461a      	mov	r2, r3
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fc5e 	bl	8003c10 <UART_Start_Receive_DMA>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800335a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800335e:	2b00      	cmp	r3, #0
 8003360:	d12c      	bne.n	80033bc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	2b01      	cmp	r3, #1
 8003368:	d125      	bne.n	80033b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	617b      	str	r3, [r7, #20]
   return(result);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f043 0310 	orr.w	r3, r3, #16
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033a0:	627a      	str	r2, [r7, #36]	; 0x24
 80033a2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6a39      	ldr	r1, [r7, #32]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e5      	bne.n	8003380 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80033b4:	e002      	b.n	80033bc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80033bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033c0:	e000      	b.n	80033c4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3730      	adds	r7, #48	; 0x30
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b0ba      	sub	sp, #232	; 0xe8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800340a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_UART_IRQHandler+0x66>
 800341e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fd8e 	bl	8003f4c <UART_Receive_IT>
      return;
 8003430:	e25b      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80de 	beq.w	80035f8 <HAL_UART_IRQHandler+0x22c>
 800343c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80d1 	beq.w	80035f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_UART_IRQHandler+0xae>
 8003462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_UART_IRQHandler+0xd2>
 8003486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f043 0202 	orr.w	r2, r3, #2
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_UART_IRQHandler+0xf6>
 80034aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d011      	beq.n	80034f2 <HAL_UART_IRQHandler+0x126>
 80034ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d105      	bne.n	80034e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f043 0208 	orr.w	r2, r3, #8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 81f2 	beq.w	80038e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_UART_IRQHandler+0x14e>
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fd19 	bl	8003f4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf14      	ite	ne
 8003528:	2301      	movne	r3, #1
 800352a:	2300      	moveq	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <HAL_UART_IRQHandler+0x17a>
 800353e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d04f      	beq.n	80035e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fc23 	bl	8003d92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d041      	beq.n	80035de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800358a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800359e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1d9      	bne.n	800355a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d013      	beq.n	80035d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_UART_IRQHandler+0x3e0>)
 80035b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fd68 	bl	8001090 <HAL_DMA_Abort_IT>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035d0:	4610      	mov	r0, r2
 80035d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e00e      	b.n	80035f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9a5 	bl	8003926 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e00a      	b.n	80035f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9a1 	bl	8003926 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e006      	b.n	80035f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f99d 	bl	8003926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80035f2:	e175      	b.n	80038e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	bf00      	nop
    return;
 80035f6:	e173      	b.n	80038e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	f040 814f 	bne.w	80038a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003606:	f003 0310 	and.w	r3, r3, #16
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 8148 	beq.w	80038a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8141 	beq.w	80038a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80b6 	beq.w	80037b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8145 	beq.w	80038e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800365e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003662:	429a      	cmp	r2, r3
 8003664:	f080 813e 	bcs.w	80038e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800366e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b20      	cmp	r3, #32
 8003678:	f000 8088 	beq.w	800378c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1d9      	bne.n	800367c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e1      	bne.n	80036c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3314      	adds	r3, #20
 800370a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003728:	66fa      	str	r2, [r7, #108]	; 0x6c
 800372a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800372e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e3      	bne.n	8003704 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	330c      	adds	r3, #12
 8003750:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375c:	f023 0310 	bic.w	r3, r3, #16
 8003760:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	330c      	adds	r3, #12
 800376a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800376e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003770:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800377c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e3      	bne.n	800374a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fc46 	bl	8001018 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800379a:	b29b      	uxth	r3, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	b29b      	uxth	r3, r3
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd f81e 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037a8:	e09c      	b.n	80038e4 <HAL_UART_IRQHandler+0x518>
 80037aa:	bf00      	nop
 80037ac:	08003e57 	.word	0x08003e57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 808e 	beq.w	80038e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8089 	beq.w	80038e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037fa:	647a      	str	r2, [r7, #68]	; 0x44
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003800:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e3      	bne.n	80037d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	e853 3f00 	ldrex	r3, [r3]
 800381c:	623b      	str	r3, [r7, #32]
   return(result);
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003832:	633a      	str	r2, [r7, #48]	; 0x30
 8003834:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e3      	bne.n	800380e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60fb      	str	r3, [r7, #12]
   return(result);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0310 	bic.w	r3, r3, #16
 800386a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003878:	61fa      	str	r2, [r7, #28]
 800387a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	617b      	str	r3, [r7, #20]
   return(result);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e3      	bne.n	8003854 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003892:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fc ffa3 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800389e:	e023      	b.n	80038e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d009      	beq.n	80038c0 <HAL_UART_IRQHandler+0x4f4>
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fae0 	bl	8003e7e <UART_Transmit_IT>
    return;
 80038be:	e014      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00e      	beq.n	80038ea <HAL_UART_IRQHandler+0x51e>
 80038cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb1f 	bl	8003f1c <UART_EndTransmit_IT>
    return;
 80038de:	e004      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
    return;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
      return;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <HAL_UART_IRQHandler+0x51e>
      return;
 80038e8:	bf00      	nop
  }
}
 80038ea:	37e8      	adds	r7, #232	; 0xe8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b09c      	sub	sp, #112	; 0x70
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d172      	bne.n	8003a3a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	2200      	movs	r2, #0
 8003958:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	330c      	adds	r3, #12
 8003960:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800396a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003970:	66bb      	str	r3, [r7, #104]	; 0x68
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800397a:	65ba      	str	r2, [r7, #88]	; 0x58
 800397c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e5      	bne.n	800395a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	667b      	str	r3, [r7, #100]	; 0x64
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3314      	adds	r3, #20
 80039ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039ae:	647a      	str	r2, [r7, #68]	; 0x44
 80039b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	623b      	str	r3, [r7, #32]
   return(result);
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d8:	663b      	str	r3, [r7, #96]	; 0x60
 80039da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3314      	adds	r3, #20
 80039e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e2:	633a      	str	r2, [r7, #48]	; 0x30
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d119      	bne.n	8003a3a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f023 0310 	bic.w	r3, r3, #16
 8003a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a26:	61fa      	str	r2, [r7, #28]
 8003a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	617b      	str	r3, [r7, #20]
   return(result);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a50:	f7fc fec8 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a54:	e002      	b.n	8003a5c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003a56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a58:	f7ff ff53 	bl	8003902 <HAL_UART_RxCpltCallback>
}
 8003a5c:	bf00      	nop
 8003a5e:	3770      	adds	r7, #112	; 0x70
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d108      	bne.n	8003a92 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7fc feaa 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a90:	e002      	b.n	8003a98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff ff3e 	bl	8003914 <HAL_UART_RxHalfCpltCallback>
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b21      	cmp	r3, #33	; 0x21
 8003ad2:	d108      	bne.n	8003ae6 <UART_DMAError+0x46>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2200      	movs	r2, #0
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ae0:	68b8      	ldr	r0, [r7, #8]
 8003ae2:	f000 f92f 	bl	8003d44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b22      	cmp	r3, #34	; 0x22
 8003b06:	d108      	bne.n	8003b1a <UART_DMAError+0x7a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b14:	68b8      	ldr	r0, [r7, #8]
 8003b16:	f000 f93c 	bl	8003d92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b26:	68b8      	ldr	r0, [r7, #8]
 8003b28:	f7ff fefd 	bl	8003926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b090      	sub	sp, #64	; 0x40
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b44:	e050      	b.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d04c      	beq.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b54:	f7fd f8bc 	bl	8000cd0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d241      	bcs.n	8003be8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b84:	637a      	str	r2, [r7, #52]	; 0x34
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f023 0301 	bic.w	r3, r3, #1
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb8:	623a      	str	r2, [r7, #32]
 8003bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	6a3a      	ldr	r2, [r7, #32]
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e00f      	b.n	8003c08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d09f      	beq.n	8003b46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3740      	adds	r7, #64	; 0x40
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b098      	sub	sp, #96	; 0x60
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	88fa      	ldrh	r2, [r7, #6]
 8003c28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2222      	movs	r2, #34	; 0x22
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3c:	4a3e      	ldr	r2, [pc, #248]	; (8003d38 <UART_Start_Receive_DMA+0x128>)
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <UART_Start_Receive_DMA+0x12c>)
 8003c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <UART_Start_Receive_DMA+0x130>)
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	2200      	movs	r2, #0
 8003c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	f7fd f972 	bl	8000f58 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ce6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6a39      	ldr	r1, [r7, #32]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3760      	adds	r7, #96	; 0x60
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	08003939 	.word	0x08003939
 8003d3c:	08003a65 	.word	0x08003a65
 8003d40:	08003aa1 	.word	0x08003aa1

08003d44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	61ba      	str	r2, [r7, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003d88:	bf00      	nop
 8003d8a:	3724      	adds	r7, #36	; 0x24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b095      	sub	sp, #84	; 0x54
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dba:	643a      	str	r2, [r7, #64]	; 0x40
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e5      	bne.n	8003d9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3314      	adds	r3, #20
 8003dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df6:	e841 2300 	strex	r3, r2, [r1]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1e5      	bne.n	8003dce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d119      	bne.n	8003e3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	330c      	adds	r3, #12
 8003e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	e853 3f00 	ldrex	r3, [r3]
 8003e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f023 0310 	bic.w	r3, r3, #16
 8003e20:	647b      	str	r3, [r7, #68]	; 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	330c      	adds	r3, #12
 8003e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2a:	61ba      	str	r2, [r7, #24]
 8003e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2e:	6979      	ldr	r1, [r7, #20]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	e841 2300 	strex	r3, r2, [r1]
 8003e36:	613b      	str	r3, [r7, #16]
   return(result);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1e5      	bne.n	8003e0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e4c:	bf00      	nop
 8003e4e:	3754      	adds	r7, #84	; 0x54
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff fd58 	bl	8003926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b21      	cmp	r3, #33	; 0x21
 8003e90:	d13e      	bne.n	8003f10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	d114      	bne.n	8003ec6 <UART_Transmit_IT+0x48>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d110      	bne.n	8003ec6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	621a      	str	r2, [r3, #32]
 8003ec4:	e008      	b.n	8003ed8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	1c59      	adds	r1, r3, #1
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6211      	str	r1, [r2, #32]
 8003ed0:	781a      	ldrb	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003efa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fcd7 	bl	80038f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	; 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b22      	cmp	r3, #34	; 0x22
 8003f5e:	f040 80ae 	bne.w	80040be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6a:	d117      	bne.n	8003f9c <UART_Receive_IT+0x50>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d113      	bne.n	8003f9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	1c9a      	adds	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
 8003f9a:	e026      	b.n	8003fea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d007      	beq.n	8003fc0 <UART_Receive_IT+0x74>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <UART_Receive_IT+0x82>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	e008      	b.n	8003fe0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d15d      	bne.n	80040ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0220 	bic.w	r2, r2, #32
 800400c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800401c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	d135      	bne.n	80040b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	613b      	str	r3, [r7, #16]
   return(result);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	623a      	str	r2, [r7, #32]
 800406c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	69f9      	ldr	r1, [r7, #28]
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	61bb      	str	r3, [r7, #24]
   return(result);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d10a      	bne.n	80040a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fc fb9b 	bl	80007e4 <HAL_UARTEx_RxEventCallback>
 80040ae:	e002      	b.n	80040b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fc26 	bl	8003902 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e002      	b.n	80040c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3730      	adds	r7, #48	; 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004102:	f023 030c 	bic.w	r3, r3, #12
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6812      	ldr	r2, [r2, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	430b      	orrs	r3, r1
 800410e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <UART_SetConfig+0x114>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d103      	bne.n	8004138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fd febc 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	e002      	b.n	800413e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004138:	f7fd fea4 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 800413c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009a      	lsls	r2, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <UART_SetConfig+0x118>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	0119      	lsls	r1, r3, #4
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009a      	lsls	r2, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fbb2 f2f3 	udiv	r2, r2, r3
 8004174:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <UART_SetConfig+0x118>)
 8004176:	fba3 0302 	umull	r0, r3, r3, r2
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2064      	movs	r0, #100	; 0x64
 800417e:	fb00 f303 	mul.w	r3, r0, r3
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	3332      	adds	r3, #50	; 0x32
 8004188:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <UART_SetConfig+0x118>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004194:	4419      	add	r1, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009a      	lsls	r2, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <UART_SetConfig+0x118>)
 80041ae:	fba3 0302 	umull	r0, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2064      	movs	r0, #100	; 0x64
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	011b      	lsls	r3, r3, #4
 80041be:	3332      	adds	r3, #50	; 0x32
 80041c0:	4a07      	ldr	r2, [pc, #28]	; (80041e0 <UART_SetConfig+0x118>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	f003 020f 	and.w	r2, r3, #15
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	440a      	add	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40013800 	.word	0x40013800
 80041e0:	51eb851f 	.word	0x51eb851f

080041e4 <HAL_COMH_Receive>:

extern SPI_HandleTypeDef hspi1;

Return_Type HAL_COMH_Init(void);

Return_Type HAL_COMH_Receive(uint8_t *BUFFER){
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	if(*BUFFER == REQUEST){
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b1e      	cmp	r3, #30
 80041f2:	d103      	bne.n	80041fc <HAL_COMH_Receive+0x18>
		HAL_DCM_MainFunction();
 80041f4:	f7fb ffac 	bl	8000150 <HAL_DCM_MainFunction>
		return Return_OK;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_COMH_Receive+0x1a>
	}
	return Return_NOT_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <HAL_COMH_Send>:

Return_Type HAL_COMH_Send(SYSTEM_Data DATA){
 8004208:	b084      	sub	sp, #16
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	f107 0c10 	add.w	ip, r7, #16
 8004214:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t  pTxData;

	pTxData = DATA.sensor1; //Sensor1
 8004218:	8a3b      	ldrh	r3, [r7, #16]
 800421a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800421c:	1db9      	adds	r1, r7, #6
 800421e:	230a      	movs	r3, #10
 8004220:	2202      	movs	r2, #2
 8004222:	486c      	ldr	r0, [pc, #432]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004224:	f7fd ff28 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor2; //Sensor2
 8004228:	8a7b      	ldrh	r3, [r7, #18]
 800422a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800422c:	1db9      	adds	r1, r7, #6
 800422e:	230a      	movs	r3, #10
 8004230:	2202      	movs	r2, #2
 8004232:	4868      	ldr	r0, [pc, #416]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004234:	f7fd ff20 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor3; //Sensor3
 8004238:	8abb      	ldrh	r3, [r7, #20]
 800423a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800423c:	1db9      	adds	r1, r7, #6
 800423e:	230a      	movs	r3, #10
 8004240:	2202      	movs	r2, #2
 8004242:	4864      	ldr	r0, [pc, #400]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004244:	f7fd ff18 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor4; //Sensor4
 8004248:	8afb      	ldrh	r3, [r7, #22]
 800424a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800424c:	1db9      	adds	r1, r7, #6
 800424e:	230a      	movs	r3, #10
 8004250:	2202      	movs	r2, #2
 8004252:	4860      	ldr	r0, [pc, #384]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004254:	f7fd ff10 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor5; //Sensor5
 8004258:	8b3b      	ldrh	r3, [r7, #24]
 800425a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800425c:	1db9      	adds	r1, r7, #6
 800425e:	230a      	movs	r3, #10
 8004260:	2202      	movs	r2, #2
 8004262:	485c      	ldr	r0, [pc, #368]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004264:	f7fd ff08 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor6; //Sensor6
 8004268:	8b7b      	ldrh	r3, [r7, #26]
 800426a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800426c:	1db9      	adds	r1, r7, #6
 800426e:	230a      	movs	r3, #10
 8004270:	2202      	movs	r2, #2
 8004272:	4858      	ldr	r0, [pc, #352]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004274:	f7fd ff00 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor7; //Sensor7
 8004278:	8bbb      	ldrh	r3, [r7, #28]
 800427a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800427c:	1db9      	adds	r1, r7, #6
 800427e:	230a      	movs	r3, #10
 8004280:	2202      	movs	r2, #2
 8004282:	4854      	ldr	r0, [pc, #336]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004284:	f7fd fef8 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.sensor8; //Sensor8
 8004288:	8bfb      	ldrh	r3, [r7, #30]
 800428a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800428c:	1db9      	adds	r1, r7, #6
 800428e:	230a      	movs	r3, #10
 8004290:	2202      	movs	r2, #2
 8004292:	4850      	ldr	r0, [pc, #320]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004294:	f7fd fef0 	bl	8002078 <HAL_SPI_Transmit>

	///////////////////////////////////////
	pTxData = DATA.DTC_1[0];
 8004298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800429c:	b29b      	uxth	r3, r3
 800429e:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 80042a0:	1db9      	adds	r1, r7, #6
 80042a2:	230a      	movs	r3, #10
 80042a4:	2202      	movs	r2, #2
 80042a6:	484b      	ldr	r0, [pc, #300]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80042a8:	f7fd fee6 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_1[1];
 80042ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 80042b4:	1db9      	adds	r1, r7, #6
 80042b6:	230a      	movs	r3, #10
 80042b8:	2202      	movs	r2, #2
 80042ba:	4846      	ldr	r0, [pc, #280]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80042bc:	f7fd fedc 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_1[2];
 80042c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 80042c8:	1db9      	adds	r1, r7, #6
 80042ca:	230a      	movs	r3, #10
 80042cc:	2202      	movs	r2, #2
 80042ce:	4841      	ldr	r0, [pc, #260]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80042d0:	f7fd fed2 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_1[3];
 80042d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042d8:	b29b      	uxth	r3, r3
 80042da:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 80042dc:	1db9      	adds	r1, r7, #6
 80042de:	230a      	movs	r3, #10
 80042e0:	2202      	movs	r2, #2
 80042e2:	483c      	ldr	r0, [pc, #240]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80042e4:	f7fd fec8 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_1[4];
 80042e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 80042f0:	1db9      	adds	r1, r7, #6
 80042f2:	230a      	movs	r3, #10
 80042f4:	2202      	movs	r2, #2
 80042f6:	4837      	ldr	r0, [pc, #220]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80042f8:	f7fd febe 	bl	8002078 <HAL_SPI_Transmit>


	pTxData = DATA.DTC_2[0];
 80042fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004300:	b29b      	uxth	r3, r3
 8004302:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 8004304:	1db9      	adds	r1, r7, #6
 8004306:	230a      	movs	r3, #10
 8004308:	2202      	movs	r2, #2
 800430a:	4832      	ldr	r0, [pc, #200]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 800430c:	f7fd feb4 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_2[1];
 8004310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004314:	b29b      	uxth	r3, r3
 8004316:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 8004318:	1db9      	adds	r1, r7, #6
 800431a:	230a      	movs	r3, #10
 800431c:	2202      	movs	r2, #2
 800431e:	482d      	ldr	r0, [pc, #180]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004320:	f7fd feaa 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_2[2];
 8004324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004328:	b29b      	uxth	r3, r3
 800432a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 800432c:	1db9      	adds	r1, r7, #6
 800432e:	230a      	movs	r3, #10
 8004330:	2202      	movs	r2, #2
 8004332:	4828      	ldr	r0, [pc, #160]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004334:	f7fd fea0 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_2[3];
 8004338:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800433c:	b29b      	uxth	r3, r3
 800433e:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 8004340:	1db9      	adds	r1, r7, #6
 8004342:	230a      	movs	r3, #10
 8004344:	2202      	movs	r2, #2
 8004346:	4823      	ldr	r0, [pc, #140]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004348:	f7fd fe96 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_2[4];
 800434c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004350:	b29b      	uxth	r3, r3
 8004352:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 8004354:	1db9      	adds	r1, r7, #6
 8004356:	230a      	movs	r3, #10
 8004358:	2202      	movs	r2, #2
 800435a:	481e      	ldr	r0, [pc, #120]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 800435c:	f7fd fe8c 	bl	8002078 <HAL_SPI_Transmit>

	pTxData = DATA.DTC_3[0];
 8004360:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 8004368:	1db9      	adds	r1, r7, #6
 800436a:	230a      	movs	r3, #10
 800436c:	2202      	movs	r2, #2
 800436e:	4819      	ldr	r0, [pc, #100]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004370:	f7fd fe82 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_3[1];
 8004374:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004378:	b29b      	uxth	r3, r3
 800437a:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 800437c:	1db9      	adds	r1, r7, #6
 800437e:	230a      	movs	r3, #10
 8004380:	2202      	movs	r2, #2
 8004382:	4814      	ldr	r0, [pc, #80]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004384:	f7fd fe78 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_3[2];
 8004388:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800438c:	b29b      	uxth	r3, r3
 800438e:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 8004390:	1db9      	adds	r1, r7, #6
 8004392:	230a      	movs	r3, #10
 8004394:	2202      	movs	r2, #2
 8004396:	480f      	ldr	r0, [pc, #60]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 8004398:	f7fd fe6e 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_3[3];
 800439c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &pTxData, 2, 10);
 80043a4:	1db9      	adds	r1, r7, #6
 80043a6:	230a      	movs	r3, #10
 80043a8:	2202      	movs	r2, #2
 80043aa:	480a      	ldr	r0, [pc, #40]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80043ac:	f7fd fe64 	bl	8002078 <HAL_SPI_Transmit>
	pTxData = DATA.DTC_3[4];
 80043b0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1,  &pTxData, 2, 10);
 80043b8:	1db9      	adds	r1, r7, #6
 80043ba:	230a      	movs	r3, #10
 80043bc:	2202      	movs	r2, #2
 80043be:	4805      	ldr	r0, [pc, #20]	; (80043d4 <HAL_COMH_Send+0x1cc>)
 80043c0:	f7fd fe5a 	bl	8002078 <HAL_SPI_Transmit>

	return Return_OK;
 80043c4:	2301      	movs	r3, #1
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043d0:	b004      	add	sp, #16
 80043d2:	4770      	bx	lr
 80043d4:	20000358 	.word	0x20000358

080043d8 <HAL_SERIAL_COMH_Receive>:
extern SYSTEM_Data DATA;
extern UART_HandleTypeDef huart1;

Return_Type HAL_SERIAL_COMH_Init(void);

Return_Type HAL_SERIAL_COMH_Receive(uint8_t * RXBUFFER_SIZE){
 80043d8:	b480      	push	{r7}
 80043da:	b08b      	sub	sp, #44	; 0x2c
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

		uint16_t x = 0, i = 0,j=0,c=0,stop=0,START_DCT=0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043e4:	2300      	movs	r3, #0
 80043e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80043e8:	2300      	movs	r3, #0
 80043ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80043ec:	2300      	movs	r3, #0
 80043ee:	83bb      	strh	r3, [r7, #28]
 80043f0:	2300      	movs	r3, #0
 80043f2:	843b      	strh	r3, [r7, #32]
 80043f4:	2300      	movs	r3, #0
 80043f6:	83fb      	strh	r3, [r7, #30]
		uint16_t sensor[8];
		while(stop < 8){
 80043f8:	e038      	b.n	800446c <HAL_SERIAL_COMH_Receive+0x94>
			START_DCT++;
 80043fa:	8bfb      	ldrh	r3, [r7, #30]
 80043fc:	3301      	adds	r3, #1
 80043fe:	83fb      	strh	r3, [r7, #30]
			if(RXBUFFER_SIZE[i] >= '0' && RXBUFFER_SIZE[i] <= '9'){
 8004400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b2f      	cmp	r3, #47	; 0x2f
 800440a:	d917      	bls.n	800443c <HAL_SERIAL_COMH_Receive+0x64>
 800440c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4413      	add	r3, r2
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b39      	cmp	r3, #57	; 0x39
 8004416:	d811      	bhi.n	800443c <HAL_SERIAL_COMH_Receive+0x64>
				x = x*10;
 8004418:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800441a:	461a      	mov	r2, r3
 800441c:	0092      	lsls	r2, r2, #2
 800441e:	4413      	add	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	84fb      	strh	r3, [r7, #38]	; 0x26
				c =RXBUFFER_SIZE[i]-'0';
 8004424:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b30      	subs	r3, #48	; 0x30
 8004430:	83bb      	strh	r3, [r7, #28]
				x = x + c;
 8004432:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004434:	8bbb      	ldrh	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	84fb      	strh	r3, [r7, #38]	; 0x26
 800443a:	e014      	b.n	8004466 <HAL_SERIAL_COMH_Receive+0x8e>
			}else if(RXBUFFER_SIZE[i] == ',' ){
 800443c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b2c      	cmp	r3, #44	; 0x2c
 8004446:	d10e      	bne.n	8004466 <HAL_SERIAL_COMH_Receive+0x8e>
				sensor[j] = x;
 8004448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	3328      	adds	r3, #40	; 0x28
 800444e:	443b      	add	r3, r7
 8004450:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004452:	f823 2c1c 	strh.w	r2, [r3, #-28]
				j++;
 8004456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004458:	3301      	adds	r3, #1
 800445a:	847b      	strh	r3, [r7, #34]	; 0x22
				x=0;
 800445c:	2300      	movs	r3, #0
 800445e:	84fb      	strh	r3, [r7, #38]	; 0x26
				stop++;
 8004460:	8c3b      	ldrh	r3, [r7, #32]
 8004462:	3301      	adds	r3, #1
 8004464:	843b      	strh	r3, [r7, #32]
			}
			i++;
 8004466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004468:	3301      	adds	r3, #1
 800446a:	84bb      	strh	r3, [r7, #36]	; 0x24
		while(stop < 8){
 800446c:	8c3b      	ldrh	r3, [r7, #32]
 800446e:	2b07      	cmp	r3, #7
 8004470:	d9c3      	bls.n	80043fa <HAL_SERIAL_COMH_Receive+0x22>
		}
		DATA.sensor1 = sensor[0];
 8004472:	89ba      	ldrh	r2, [r7, #12]
 8004474:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 8004476:	801a      	strh	r2, [r3, #0]
		DATA.sensor2 = sensor[1];
 8004478:	89fa      	ldrh	r2, [r7, #14]
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 800447c:	805a      	strh	r2, [r3, #2]
		DATA.sensor3 = sensor[2];
 800447e:	8a3a      	ldrh	r2, [r7, #16]
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 8004482:	809a      	strh	r2, [r3, #4]
		DATA.sensor4 = sensor[3];
 8004484:	8a7a      	ldrh	r2, [r7, #18]
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 8004488:	80da      	strh	r2, [r3, #6]
		DATA.sensor5 = sensor[4];
 800448a:	8aba      	ldrh	r2, [r7, #20]
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 800448e:	811a      	strh	r2, [r3, #8]
		DATA.sensor6 = sensor[5];
 8004490:	8afa      	ldrh	r2, [r7, #22]
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 8004494:	815a      	strh	r2, [r3, #10]
		DATA.sensor7 = sensor[6];
 8004496:	8b3a      	ldrh	r2, [r7, #24]
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 800449a:	819a      	strh	r2, [r3, #12]
		DATA.sensor8 = sensor[7];
 800449c:	8b7a      	ldrh	r2, [r7, #26]
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <HAL_SERIAL_COMH_Receive+0xd8>)
 80044a0:	81da      	strh	r2, [r3, #14]
	return Return_OK;
 80044a2:	2301      	movs	r3, #1
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	372c      	adds	r7, #44	; 0x2c
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000098 	.word	0x20000098

080044b4 <HAL_SERIAL_COMH_Send>:

Return_Type HAL_SERIAL_COMH_Send(uint8_t ID_REQUEST[],uint8_t size){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
	if( HAL_UART_Transmit(&huart1, ID_REQUEST, size, 10) == HAL_OK){
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	230a      	movs	r3, #10
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4806      	ldr	r0, [pc, #24]	; (80044e4 <HAL_SERIAL_COMH_Send+0x30>)
 80044ca:	f7fe fe9f 	bl	800320c <HAL_UART_Transmit>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_SERIAL_COMH_Send+0x24>
		return Return_OK;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_SERIAL_COMH_Send+0x26>
	}
	return Return_NOT_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200003b0 	.word	0x200003b0

080044e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fa:	2b84      	cmp	r3, #132	; 0x84
 80044fc:	d005      	beq.n	800450a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	3303      	adds	r3, #3
 8004508:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800450a:	68fb      	ldr	r3, [r7, #12]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800451a:	f000 fae7 	bl	8004aec <vTaskStartScheduler>
  
  return osOK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	bd80      	pop	{r7, pc}

08004524 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af04      	add	r7, sp, #16
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d020      	beq.n	8004578 <osThreadCreate+0x54>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01c      	beq.n	8004578 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685c      	ldr	r4, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691e      	ldr	r6, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ffc9 	bl	80044e8 <makeFreeRtosPriority>
 8004556:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004560:	9202      	str	r2, [sp, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	9100      	str	r1, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4632      	mov	r2, r6
 800456a:	4629      	mov	r1, r5
 800456c:	4620      	mov	r0, r4
 800456e:	f000 f8e8 	bl	8004742 <xTaskCreateStatic>
 8004572:	4603      	mov	r3, r0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	e01c      	b.n	80045b2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685c      	ldr	r4, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004584:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ffab 	bl	80044e8 <makeFreeRtosPriority>
 8004592:	4602      	mov	r2, r0
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	9301      	str	r3, [sp, #4]
 800459a:	9200      	str	r2, [sp, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	4632      	mov	r2, r6
 80045a0:	4629      	mov	r1, r5
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 f929 	bl	80047fa <xTaskCreate>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d001      	beq.n	80045b2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045b2:	68fb      	ldr	r3, [r7, #12]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <osDelay+0x16>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	e000      	b.n	80045d4 <osDelay+0x18>
 80045d2:	2301      	movs	r3, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fa55 	bl	8004a84 <vTaskDelay>
  
  return osOK;
 80045da:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f103 0208 	add.w	r2, r3, #8
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f103 0208 	add.w	r2, r3, #8
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f103 0208 	add.w	r2, r3, #8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d103      	bne.n	80046a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e00c      	b.n	80046ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3308      	adds	r3, #8
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e002      	b.n	80046ae <vListInsert+0x2e>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d2f6      	bcs.n	80046a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	601a      	str	r2, [r3, #0]
}
 80046e6:	bf00      	nop
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr

080046f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6892      	ldr	r2, [r2, #8]
 8004706:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6852      	ldr	r2, [r2, #4]
 8004710:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d103      	bne.n	8004724 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08e      	sub	sp, #56	; 0x38
 8004746:	af04      	add	r7, sp, #16
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <xTaskCreateStatic+0x46>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	61fb      	str	r3, [r7, #28]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004788:	23a0      	movs	r3, #160	; 0xa0
 800478a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2ba0      	cmp	r3, #160	; 0xa0
 8004790:	d00a      	beq.n	80047a8 <xTaskCreateStatic+0x66>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61bb      	str	r3, [r7, #24]
}
 80047a4:	bf00      	nop
 80047a6:	e7fe      	b.n	80047a6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01e      	beq.n	80047ec <xTaskCreateStatic+0xaa>
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80047c6:	2300      	movs	r3, #0
 80047c8:	9303      	str	r3, [sp, #12]
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	f107 0314 	add.w	r3, r7, #20
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f850 	bl	8004884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047e6:	f000 f8e3 	bl	80049b0 <prvAddNewTaskToReadyList>
 80047ea:	e001      	b.n	80047f0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047f0:	697b      	ldr	r3, [r7, #20]
	}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3728      	adds	r7, #40	; 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b08c      	sub	sp, #48	; 0x30
 80047fe:	af04      	add	r7, sp, #16
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fe96 	bl	8005540 <pvPortMalloc>
 8004814:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00e      	beq.n	800483a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800481c:	20a0      	movs	r0, #160	; 0xa0
 800481e:	f000 fe8f 	bl	8005540 <pvPortMalloc>
 8004822:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
 8004830:	e005      	b.n	800483e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f000 ff48 	bl	80056c8 <vPortFree>
 8004838:	e001      	b.n	800483e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d017      	beq.n	8004874 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	2300      	movs	r3, #0
 8004850:	9303      	str	r3, [sp, #12]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f80e 	bl	8004884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004868:	69f8      	ldr	r0, [r7, #28]
 800486a:	f000 f8a1 	bl	80049b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e002      	b.n	800487a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
 8004878:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800487a:	69bb      	ldr	r3, [r7, #24]
	}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800489c:	3b01      	subs	r3, #1
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <prvInitialiseNewTask+0x48>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	617b      	str	r3, [r7, #20]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e012      	b.n	80048f8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	7819      	ldrb	r1, [r3, #0]
 80048da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	3334      	adds	r3, #52	; 0x34
 80048e2:	460a      	mov	r2, r1
 80048e4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d006      	beq.n	8004900 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	d9e9      	bls.n	80048d2 <prvInitialiseNewTask+0x4e>
 80048fe:	e000      	b.n	8004902 <prvInitialiseNewTask+0x7e>
		{
			break;
 8004900:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490c:	2b06      	cmp	r3, #6
 800490e:	d901      	bls.n	8004914 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004910:	2306      	movs	r3, #6
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004918:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800491e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	2200      	movs	r2, #0
 8004924:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	3304      	adds	r3, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff fe79 	bl	8004622 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	3318      	adds	r3, #24
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fe74 	bl	8004622 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	f1c3 0207 	rsb	r2, r3, #7
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	2200      	movs	r2, #0
 8004954:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	2200      	movs	r2, #0
 800495c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004962:	334c      	adds	r3, #76	; 0x4c
 8004964:	224c      	movs	r2, #76	; 0x4c
 8004966:	2100      	movs	r1, #0
 8004968:	4618      	mov	r0, r3
 800496a:	f000 ffc1 	bl	80058f0 <memset>
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	4a0c      	ldr	r2, [pc, #48]	; (80049a4 <prvInitialiseNewTask+0x120>)
 8004972:	651a      	str	r2, [r3, #80]	; 0x50
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <prvInitialiseNewTask+0x124>)
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <prvInitialiseNewTask+0x128>)
 800497e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	69b8      	ldr	r0, [r7, #24]
 8004986:	f000 fc29 	bl	80051dc <pxPortInitialiseStack>
 800498a:	4602      	mov	r2, r0
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800499a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800499c:	bf00      	nop
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20001210 	.word	0x20001210
 80049a8:	20001278 	.word	0x20001278
 80049ac:	200012e0 	.word	0x200012e0

080049b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049b8:	f000 fd00 	bl	80053bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <prvAddNewTaskToReadyList+0xb8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	4a29      	ldr	r2, [pc, #164]	; (8004a68 <prvAddNewTaskToReadyList+0xb8>)
 80049c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <prvAddNewTaskToReadyList+0xbc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049ce:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <prvAddNewTaskToReadyList+0xbc>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <prvAddNewTaskToReadyList+0xb8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d110      	bne.n	80049fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049dc:	f000 fad2 	bl	8004f84 <prvInitialiseTaskLists>
 80049e0:	e00d      	b.n	80049fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <prvAddNewTaskToReadyList+0xc0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <prvAddNewTaskToReadyList+0xbc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d802      	bhi.n	80049fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049f8:	4a1c      	ldr	r2, [pc, #112]	; (8004a6c <prvAddNewTaskToReadyList+0xbc>)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <prvAddNewTaskToReadyList+0xc4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <prvAddNewTaskToReadyList+0xc4>)
 8004a06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <prvAddNewTaskToReadyList+0xc8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <prvAddNewTaskToReadyList+0xc8>)
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <prvAddNewTaskToReadyList+0xcc>)
 8004a28:	441a      	add	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7ff fe02 	bl	800463a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a36:	f000 fcf1 	bl	800541c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a3a:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <prvAddNewTaskToReadyList+0xc0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00e      	beq.n	8004a60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <prvAddNewTaskToReadyList+0xbc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d207      	bcs.n	8004a60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <prvAddNewTaskToReadyList+0xd0>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	200005c4 	.word	0x200005c4
 8004a6c:	200004c4 	.word	0x200004c4
 8004a70:	200005d0 	.word	0x200005d0
 8004a74:	200005e0 	.word	0x200005e0
 8004a78:	200005cc 	.word	0x200005cc
 8004a7c:	200004c8 	.word	0x200004c8
 8004a80:	e000ed04 	.word	0xe000ed04

08004a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d017      	beq.n	8004ac6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <vTaskDelay+0x60>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <vTaskDelay+0x30>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60bb      	str	r3, [r7, #8]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ab4:	f000 f884 	bl	8004bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fb28 	bl	8005110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ac0:	f000 f88c 	bl	8004bdc <xTaskResumeAll>
 8004ac4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <vTaskDelay+0x64>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	200005ec 	.word	0x200005ec
 8004ae8:	e000ed04 	.word	0xe000ed04

08004aec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004afa:	463a      	mov	r2, r7
 8004afc:	1d39      	adds	r1, r7, #4
 8004afe:	f107 0308 	add.w	r3, r7, #8
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fb fd1a 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b08:	6839      	ldr	r1, [r7, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	9202      	str	r2, [sp, #8]
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	460a      	mov	r2, r1
 8004b1a:	4921      	ldr	r1, [pc, #132]	; (8004ba0 <vTaskStartScheduler+0xb4>)
 8004b1c:	4821      	ldr	r0, [pc, #132]	; (8004ba4 <vTaskStartScheduler+0xb8>)
 8004b1e:	f7ff fe10 	bl	8004742 <xTaskCreateStatic>
 8004b22:	4603      	mov	r3, r0
 8004b24:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <vTaskStartScheduler+0xbc>)
 8004b26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b28:	4b1f      	ldr	r3, [pc, #124]	; (8004ba8 <vTaskStartScheduler+0xbc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e001      	b.n	8004b3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d11b      	bne.n	8004b78 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	613b      	str	r3, [r7, #16]
}
 8004b52:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b54:	4b15      	ldr	r3, [pc, #84]	; (8004bac <vTaskStartScheduler+0xc0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	334c      	adds	r3, #76	; 0x4c
 8004b5a:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <vTaskStartScheduler+0xc4>)
 8004b5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <vTaskStartScheduler+0xc8>)
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <vTaskStartScheduler+0xcc>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <vTaskStartScheduler+0xd0>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b72:	f000 fbb1 	bl	80052d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b76:	e00e      	b.n	8004b96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7e:	d10a      	bne.n	8004b96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <vTaskStartScheduler+0xa8>
}
 8004b96:	bf00      	nop
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	08005b08 	.word	0x08005b08
 8004ba4:	08004f55 	.word	0x08004f55
 8004ba8:	200005e8 	.word	0x200005e8
 8004bac:	200004c4 	.word	0x200004c4
 8004bb0:	20000078 	.word	0x20000078
 8004bb4:	200005e4 	.word	0x200005e4
 8004bb8:	200005d0 	.word	0x200005d0
 8004bbc:	200005c8 	.word	0x200005c8

08004bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <vTaskSuspendAll+0x18>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4a03      	ldr	r2, [pc, #12]	; (8004bd8 <vTaskSuspendAll+0x18>)
 8004bcc:	6013      	str	r3, [r2, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	200005ec 	.word	0x200005ec

08004bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bea:	4b41      	ldr	r3, [pc, #260]	; (8004cf0 <xTaskResumeAll+0x114>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	603b      	str	r3, [r7, #0]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c08:	f000 fbd8 	bl	80053bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c0c:	4b38      	ldr	r3, [pc, #224]	; (8004cf0 <xTaskResumeAll+0x114>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	4a37      	ldr	r2, [pc, #220]	; (8004cf0 <xTaskResumeAll+0x114>)
 8004c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c16:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <xTaskResumeAll+0x114>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d161      	bne.n	8004ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c1e:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <xTaskResumeAll+0x118>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d05d      	beq.n	8004ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c26:	e02e      	b.n	8004c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004c28:	4b33      	ldr	r3, [pc, #204]	; (8004cf8 <xTaskResumeAll+0x11c>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3318      	adds	r3, #24
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff fd5b 	bl	80046f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fd56 	bl	80046f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	; (8004cfc <xTaskResumeAll+0x120>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	4a2a      	ldr	r2, [pc, #168]	; (8004cfc <xTaskResumeAll+0x120>)
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4a27      	ldr	r2, [pc, #156]	; (8004d00 <xTaskResumeAll+0x124>)
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7ff fce4 	bl	800463a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <xTaskResumeAll+0x128>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <xTaskResumeAll+0x12c>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c86:	4b1c      	ldr	r3, [pc, #112]	; (8004cf8 <xTaskResumeAll+0x11c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1cc      	bne.n	8004c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c94:	f000 fa18 	bl	80050c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c98:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <xTaskResumeAll+0x130>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ca4:	f000 f836 	bl	8004d14 <xTaskIncrementTick>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d002      	beq.n	8004cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <xTaskResumeAll+0x12c>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f1      	bne.n	8004ca4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <xTaskResumeAll+0x130>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cc6:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <xTaskResumeAll+0x12c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <xTaskResumeAll+0x134>)
 8004cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ce2:	f000 fb9b 	bl	800541c <vPortExitCritical>

	return xAlreadyYielded;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	200005ec 	.word	0x200005ec
 8004cf4:	200005c4 	.word	0x200005c4
 8004cf8:	20000584 	.word	0x20000584
 8004cfc:	200005cc 	.word	0x200005cc
 8004d00:	200004c8 	.word	0x200004c8
 8004d04:	200004c4 	.word	0x200004c4
 8004d08:	200005d8 	.word	0x200005d8
 8004d0c:	200005d4 	.word	0x200005d4
 8004d10:	e000ed04 	.word	0xe000ed04

08004d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	4b51      	ldr	r3, [pc, #324]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 808d 	bne.w	8004e42 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d28:	4b4f      	ldr	r3, [pc, #316]	; (8004e68 <xTaskIncrementTick+0x154>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d30:	4a4d      	ldr	r2, [pc, #308]	; (8004e68 <xTaskIncrementTick+0x154>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d120      	bne.n	8004d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d3c:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	603b      	str	r3, [r7, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <xTaskIncrementTick+0x46>
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a41      	ldr	r2, [pc, #260]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4a41      	ldr	r2, [pc, #260]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <xTaskIncrementTick+0x160>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	4a3f      	ldr	r2, [pc, #252]	; (8004e74 <xTaskIncrementTick+0x160>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	f000 f9a5 	bl	80050c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d7e:	4b3e      	ldr	r3, [pc, #248]	; (8004e78 <xTaskIncrementTick+0x164>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d34d      	bcc.n	8004e24 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d88:	4b38      	ldr	r3, [pc, #224]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <xTaskIncrementTick+0x82>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <xTaskIncrementTick+0x84>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <xTaskIncrementTick+0x164>)
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	601a      	str	r2, [r3, #0]
					break;
 8004da4:	e03e      	b.n	8004e24 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004da6:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d203      	bcs.n	8004dc6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dbe:	4a2e      	ldr	r2, [pc, #184]	; (8004e78 <xTaskIncrementTick+0x164>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6013      	str	r3, [r2, #0]
						break;
 8004dc4:	e02e      	b.n	8004e24 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fc90 	bl	80046f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	3318      	adds	r3, #24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fc87 	bl	80046f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	2201      	movs	r2, #1
 8004de8:	409a      	lsls	r2, r3
 8004dea:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <xTaskIncrementTick+0x168>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	4a22      	ldr	r2, [pc, #136]	; (8004e7c <xTaskIncrementTick+0x168>)
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <xTaskIncrementTick+0x16c>)
 8004e02:	441a      	add	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	f7ff fc15 	bl	800463a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <xTaskIncrementTick+0x170>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3b4      	bcc.n	8004d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e22:	e7b1      	b.n	8004d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <xTaskIncrementTick+0x170>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2a:	4915      	ldr	r1, [pc, #84]	; (8004e80 <xTaskIncrementTick+0x16c>)
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d907      	bls.n	8004e4c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e004      	b.n	8004e4c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <xTaskIncrementTick+0x174>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3301      	adds	r3, #1
 8004e48:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <xTaskIncrementTick+0x174>)
 8004e4a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <xTaskIncrementTick+0x178>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004e54:	2301      	movs	r3, #1
 8004e56:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200005ec 	.word	0x200005ec
 8004e68:	200005c8 	.word	0x200005c8
 8004e6c:	2000057c 	.word	0x2000057c
 8004e70:	20000580 	.word	0x20000580
 8004e74:	200005dc 	.word	0x200005dc
 8004e78:	200005e4 	.word	0x200005e4
 8004e7c:	200005cc 	.word	0x200005cc
 8004e80:	200004c8 	.word	0x200004c8
 8004e84:	200004c4 	.word	0x200004c4
 8004e88:	200005d4 	.word	0x200005d4
 8004e8c:	200005d8 	.word	0x200005d8

08004e90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <vTaskSwitchContext+0xac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e9e:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <vTaskSwitchContext+0xb0>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ea4:	e044      	b.n	8004f30 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004ea6:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <vTaskSwitchContext+0xb0>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <vTaskSwitchContext+0xb4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	fab3 f383 	clz	r3, r3
 8004eb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004eba:	7afb      	ldrb	r3, [r7, #11]
 8004ebc:	f1c3 031f 	rsb	r3, r3, #31
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	4921      	ldr	r1, [pc, #132]	; (8004f48 <vTaskSwitchContext+0xb8>)
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <vTaskSwitchContext+0x5c>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	607b      	str	r3, [r7, #4]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <vTaskSwitchContext+0x5a>
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <vTaskSwitchContext+0xb8>)
 8004ef8:	4413      	add	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d104      	bne.n	8004f1c <vTaskSwitchContext+0x8c>
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <vTaskSwitchContext+0xbc>)
 8004f24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <vTaskSwitchContext+0xbc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	334c      	adds	r3, #76	; 0x4c
 8004f2c:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <vTaskSwitchContext+0xc0>)
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	371c      	adds	r7, #28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	200005ec 	.word	0x200005ec
 8004f40:	200005d8 	.word	0x200005d8
 8004f44:	200005cc 	.word	0x200005cc
 8004f48:	200004c8 	.word	0x200004c8
 8004f4c:	200004c4 	.word	0x200004c4
 8004f50:	20000078 	.word	0x20000078

08004f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f5c:	f000 f852 	bl	8005004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <prvIdleTask+0x28>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d9f9      	bls.n	8004f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <prvIdleTask+0x2c>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f78:	e7f0      	b.n	8004f5c <prvIdleTask+0x8>
 8004f7a:	bf00      	nop
 8004f7c:	200004c8 	.word	0x200004c8
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	e00c      	b.n	8004faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <prvInitialiseTaskLists+0x60>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fb20 	bl	80045e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b06      	cmp	r3, #6
 8004fae:	d9ef      	bls.n	8004f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fb0:	480d      	ldr	r0, [pc, #52]	; (8004fe8 <prvInitialiseTaskLists+0x64>)
 8004fb2:	f7ff fb17 	bl	80045e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fb6:	480d      	ldr	r0, [pc, #52]	; (8004fec <prvInitialiseTaskLists+0x68>)
 8004fb8:	f7ff fb14 	bl	80045e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fbc:	480c      	ldr	r0, [pc, #48]	; (8004ff0 <prvInitialiseTaskLists+0x6c>)
 8004fbe:	f7ff fb11 	bl	80045e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fc2:	480c      	ldr	r0, [pc, #48]	; (8004ff4 <prvInitialiseTaskLists+0x70>)
 8004fc4:	f7ff fb0e 	bl	80045e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fc8:	480b      	ldr	r0, [pc, #44]	; (8004ff8 <prvInitialiseTaskLists+0x74>)
 8004fca:	f7ff fb0b 	bl	80045e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <prvInitialiseTaskLists+0x78>)
 8004fd0:	4a05      	ldr	r2, [pc, #20]	; (8004fe8 <prvInitialiseTaskLists+0x64>)
 8004fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <prvInitialiseTaskLists+0x7c>)
 8004fd6:	4a05      	ldr	r2, [pc, #20]	; (8004fec <prvInitialiseTaskLists+0x68>)
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200004c8 	.word	0x200004c8
 8004fe8:	20000554 	.word	0x20000554
 8004fec:	20000568 	.word	0x20000568
 8004ff0:	20000584 	.word	0x20000584
 8004ff4:	20000598 	.word	0x20000598
 8004ff8:	200005b0 	.word	0x200005b0
 8004ffc:	2000057c 	.word	0x2000057c
 8005000:	20000580 	.word	0x20000580

08005004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800500a:	e019      	b.n	8005040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800500c:	f000 f9d6 	bl	80053bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <prvCheckTasksWaitingTermination+0x50>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fb67 	bl	80046f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005022:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <prvCheckTasksWaitingTermination+0x54>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3b01      	subs	r3, #1
 8005028:	4a0b      	ldr	r2, [pc, #44]	; (8005058 <prvCheckTasksWaitingTermination+0x54>)
 800502a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <prvCheckTasksWaitingTermination+0x58>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3b01      	subs	r3, #1
 8005032:	4a0a      	ldr	r2, [pc, #40]	; (800505c <prvCheckTasksWaitingTermination+0x58>)
 8005034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005036:	f000 f9f1 	bl	800541c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f810 	bl	8005060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <prvCheckTasksWaitingTermination+0x58>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e1      	bne.n	800500c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	3708      	adds	r7, #8
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000598 	.word	0x20000598
 8005058:	200005c4 	.word	0x200005c4
 800505c:	200005ac 	.word	0x200005ac

08005060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	334c      	adds	r3, #76	; 0x4c
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fc47 	bl	8005900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005078:	2b00      	cmp	r3, #0
 800507a:	d108      	bne.n	800508e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	4618      	mov	r0, r3
 8005082:	f000 fb21 	bl	80056c8 <vPortFree>
				vPortFree( pxTCB );
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fb1e 	bl	80056c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800508c:	e018      	b.n	80050c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005094:	2b01      	cmp	r3, #1
 8005096:	d103      	bne.n	80050a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fb15 	bl	80056c8 <vPortFree>
	}
 800509e:	e00f      	b.n	80050c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d00a      	beq.n	80050c0 <prvDeleteTCB+0x60>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60fb      	str	r3, [r7, #12]
}
 80050bc:	bf00      	nop
 80050be:	e7fe      	b.n	80050be <prvDeleteTCB+0x5e>
	}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ce:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <prvResetNextTaskUnblockTime+0x40>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <prvResetNextTaskUnblockTime+0x14>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <prvResetNextTaskUnblockTime+0x16>
 80050dc:	2300      	movs	r3, #0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050e2:	4b0a      	ldr	r3, [pc, #40]	; (800510c <prvResetNextTaskUnblockTime+0x44>)
 80050e4:	f04f 32ff 	mov.w	r2, #4294967295
 80050e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050ea:	e008      	b.n	80050fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <prvResetNextTaskUnblockTime+0x40>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4a04      	ldr	r2, [pc, #16]	; (800510c <prvResetNextTaskUnblockTime+0x44>)
 80050fc:	6013      	str	r3, [r2, #0]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr
 8005108:	2000057c 	.word	0x2000057c
 800510c:	200005e4 	.word	0x200005e4

08005110 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800511a:	4b29      	ldr	r3, [pc, #164]	; (80051c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3304      	adds	r3, #4
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fae2 	bl	80046f0 <uxListRemove>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	2201      	movs	r2, #1
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43da      	mvns	r2, r3
 8005140:	4b21      	ldr	r3, [pc, #132]	; (80051c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4013      	ands	r3, r2
 8005146:	4a20      	ldr	r2, [pc, #128]	; (80051c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d10a      	bne.n	8005168 <prvAddCurrentTaskToDelayedList+0x58>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	481a      	ldr	r0, [pc, #104]	; (80051cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005162:	f7ff fa6a 	bl	800463a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005166:	e026      	b.n	80051b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005170:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d209      	bcs.n	8005194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005180:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7ff fa77 	bl	8004680 <vListInsert>
}
 8005192:	e010      	b.n	80051b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005194:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7ff fa6d 	bl	8004680 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d202      	bcs.n	80051b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80051b0:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6013      	str	r3, [r2, #0]
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	200005c8 	.word	0x200005c8
 80051c4:	200004c4 	.word	0x200004c4
 80051c8:	200005cc 	.word	0x200005cc
 80051cc:	200005b0 	.word	0x200005b0
 80051d0:	20000580 	.word	0x20000580
 80051d4:	2000057c 	.word	0x2000057c
 80051d8:	200005e4 	.word	0x200005e4

080051dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3b04      	subs	r3, #4
 80051ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b04      	subs	r3, #4
 80051fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b04      	subs	r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800520c:	4a08      	ldr	r2, [pc, #32]	; (8005230 <pxPortInitialiseStack+0x54>)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b14      	subs	r3, #20
 8005216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b20      	subs	r3, #32
 8005222:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005224:	68fb      	ldr	r3, [r7, #12]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	08005235 	.word	0x08005235

08005234 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <prvTaskExitError+0x54>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d00a      	beq.n	800525e <prvTaskExitError+0x2a>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60fb      	str	r3, [r7, #12]
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <prvTaskExitError+0x28>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60bb      	str	r3, [r7, #8]
}
 8005270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005272:	bf00      	nop
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0fc      	beq.n	8005274 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800527a:	bf00      	nop
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000028 	.word	0x20000028
 800528c:	00000000 	.word	0x00000000

08005290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80052ae:	4770      	bx	lr

080052b0 <pxCurrentTCBConst2>:
 80052b0:	200004c4 	.word	0x200004c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80052b8:	4806      	ldr	r0, [pc, #24]	; (80052d4 <prvPortStartFirstTask+0x1c>)
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f380 8808 	msr	MSP, r0
 80052c2:	b662      	cpsie	i
 80052c4:	b661      	cpsie	f
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	df00      	svc	0
 80052d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052d2:	bf00      	nop
 80052d4:	e000ed08 	.word	0xe000ed08

080052d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052de:	4b32      	ldr	r3, [pc, #200]	; (80053a8 <xPortStartScheduler+0xd0>)
 80052e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <xPortStartScheduler+0xd4>)
 8005304:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005306:	4b2a      	ldr	r3, [pc, #168]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005308:	2207      	movs	r2, #7
 800530a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530c:	e009      	b.n	8005322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800530e:	4b28      	ldr	r3, [pc, #160]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3b01      	subs	r3, #1
 8005314:	4a26      	ldr	r2, [pc, #152]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d0ef      	beq.n	800530e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800532e:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1c3 0307 	rsb	r3, r3, #7
 8005336:	2b04      	cmp	r3, #4
 8005338:	d00a      	beq.n	8005350 <xPortStartScheduler+0x78>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60bb      	str	r3, [r7, #8]
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005350:	4b17      	ldr	r3, [pc, #92]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005358:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <xPortStartScheduler+0xd8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005362:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005364:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800536e:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <xPortStartScheduler+0xdc>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <xPortStartScheduler+0xdc>)
 8005374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005378:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800537a:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <xPortStartScheduler+0xdc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <xPortStartScheduler+0xdc>)
 8005380:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005384:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005386:	f000 f8b9 	bl	80054fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800538a:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <xPortStartScheduler+0xe0>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005390:	f7ff ff92 	bl	80052b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005394:	f7ff fd7c 	bl	8004e90 <vTaskSwitchContext>
	prvTaskExitError();
 8005398:	f7ff ff4c 	bl	8005234 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	e000e400 	.word	0xe000e400
 80053ac:	200005f0 	.word	0x200005f0
 80053b0:	200005f4 	.word	0x200005f4
 80053b4:	e000ed20 	.word	0xe000ed20
 80053b8:	20000028 	.word	0x20000028

080053bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	607b      	str	r3, [r7, #4]
}
 80053d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053d6:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <vPortEnterCritical+0x58>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a0d      	ldr	r2, [pc, #52]	; (8005414 <vPortEnterCritical+0x58>)
 80053de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <vPortEnterCritical+0x58>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10f      	bne.n	8005408 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053e8:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <vPortEnterCritical+0x5c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <vPortEnterCritical+0x4c>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	603b      	str	r3, [r7, #0]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <vPortEnterCritical+0x4a>
	}
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000028 	.word	0x20000028
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <vPortExitCritical+0x4c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <vPortExitCritical+0x24>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	607b      	str	r3, [r7, #4]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <vPortExitCritical+0x4c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3b01      	subs	r3, #1
 8005446:	4a08      	ldr	r2, [pc, #32]	; (8005468 <vPortExitCritical+0x4c>)
 8005448:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <vPortExitCritical+0x4c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d105      	bne.n	800545e <vPortExitCritical+0x42>
 8005452:	2300      	movs	r3, #0
 8005454:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800545c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	20000028 	.word	0x20000028
 800546c:	00000000 	.word	0x00000000

08005470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005470:	f3ef 8009 	mrs	r0, PSP
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <pxCurrentTCBConst>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005480:	6010      	str	r0, [r2, #0]
 8005482:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005486:	f04f 0050 	mov.w	r0, #80	; 0x50
 800548a:	f380 8811 	msr	BASEPRI, r0
 800548e:	f7ff fcff 	bl	8004e90 <vTaskSwitchContext>
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054a6:	f380 8809 	msr	PSP, r0
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	4770      	bx	lr

080054b0 <pxCurrentTCBConst>:
 80054b0:	200004c4 	.word	0x200004c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop

080054b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	607b      	str	r3, [r7, #4]
}
 80054d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054d2:	f7ff fc1f 	bl	8004d14 <xTaskIncrementTick>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <SysTick_Handler+0x40>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	2300      	movs	r3, #0
 80054e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f383 8811 	msr	BASEPRI, r3
}
 80054ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <vPortSetupTimerInterrupt+0x30>)
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <vPortSetupTimerInterrupt+0x34>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <vPortSetupTimerInterrupt+0x38>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a09      	ldr	r2, [pc, #36]	; (8005538 <vPortSetupTimerInterrupt+0x3c>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	099b      	lsrs	r3, r3, #6
 8005518:	4a08      	ldr	r2, [pc, #32]	; (800553c <vPortSetupTimerInterrupt+0x40>)
 800551a:	3b01      	subs	r3, #1
 800551c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800551e:	4b03      	ldr	r3, [pc, #12]	; (800552c <vPortSetupTimerInterrupt+0x30>)
 8005520:	2207      	movs	r2, #7
 8005522:	601a      	str	r2, [r3, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr
 800552c:	e000e010 	.word	0xe000e010
 8005530:	e000e018 	.word	0xe000e018
 8005534:	2000001c 	.word	0x2000001c
 8005538:	10624dd3 	.word	0x10624dd3
 800553c:	e000e014 	.word	0xe000e014

08005540 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800554c:	f7ff fb38 	bl	8004bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005550:	4b58      	ldr	r3, [pc, #352]	; (80056b4 <pvPortMalloc+0x174>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005558:	f000 f910 	bl	800577c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800555c:	4b56      	ldr	r3, [pc, #344]	; (80056b8 <pvPortMalloc+0x178>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	f040 808e 	bne.w	8005686 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01d      	beq.n	80055ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005570:	2208      	movs	r2, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f023 0307 	bic.w	r3, r3, #7
 8005588:	3308      	adds	r3, #8
 800558a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <pvPortMalloc+0x6c>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	617b      	str	r3, [r7, #20]
}
 80055a8:	bf00      	nop
 80055aa:	e7fe      	b.n	80055aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d069      	beq.n	8005686 <pvPortMalloc+0x146>
 80055b2:	4b42      	ldr	r3, [pc, #264]	; (80056bc <pvPortMalloc+0x17c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d864      	bhi.n	8005686 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055bc:	4b40      	ldr	r3, [pc, #256]	; (80056c0 <pvPortMalloc+0x180>)
 80055be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055c0:	4b3f      	ldr	r3, [pc, #252]	; (80056c0 <pvPortMalloc+0x180>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055c6:	e004      	b.n	80055d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d903      	bls.n	80055e4 <pvPortMalloc+0xa4>
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f1      	bne.n	80055c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055e4:	4b33      	ldr	r3, [pc, #204]	; (80056b4 <pvPortMalloc+0x174>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d04b      	beq.n	8005686 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2208      	movs	r2, #8
 80055f4:	4413      	add	r3, r2
 80055f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	6a3b      	ldr	r3, [r7, #32]
 80055fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	1ad2      	subs	r2, r2, r3
 8005608:	2308      	movs	r3, #8
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	429a      	cmp	r2, r3
 800560e:	d91f      	bls.n	8005650 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <pvPortMalloc+0xf8>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	613b      	str	r3, [r7, #16]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800564a:	69b8      	ldr	r0, [r7, #24]
 800564c:	f000 f8f8 	bl	8005840 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <pvPortMalloc+0x17c>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <pvPortMalloc+0x17c>)
 800565c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800565e:	4b17      	ldr	r3, [pc, #92]	; (80056bc <pvPortMalloc+0x17c>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b18      	ldr	r3, [pc, #96]	; (80056c4 <pvPortMalloc+0x184>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d203      	bcs.n	8005672 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800566a:	4b14      	ldr	r3, [pc, #80]	; (80056bc <pvPortMalloc+0x17c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <pvPortMalloc+0x184>)
 8005670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <pvPortMalloc+0x178>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	431a      	orrs	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005686:	f7ff faa9 	bl	8004bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <pvPortMalloc+0x16a>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	60fb      	str	r3, [r7, #12]
}
 80056a6:	bf00      	nop
 80056a8:	e7fe      	b.n	80056a8 <pvPortMalloc+0x168>
	return pvReturn;
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3728      	adds	r7, #40	; 0x28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20001200 	.word	0x20001200
 80056b8:	2000120c 	.word	0x2000120c
 80056bc:	20001204 	.word	0x20001204
 80056c0:	200011f8 	.word	0x200011f8
 80056c4:	20001208 	.word	0x20001208

080056c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d048      	beq.n	800576c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056da:	2308      	movs	r3, #8
 80056dc:	425b      	negs	r3, r3
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4413      	add	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4b21      	ldr	r3, [pc, #132]	; (8005774 <vPortFree+0xac>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4013      	ands	r3, r2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <vPortFree+0x44>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60fb      	str	r3, [r7, #12]
}
 8005708:	bf00      	nop
 800570a:	e7fe      	b.n	800570a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00a      	beq.n	800572a <vPortFree+0x62>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60bb      	str	r3, [r7, #8]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <vPortFree+0xac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d019      	beq.n	800576c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d115      	bne.n	800576c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <vPortFree+0xac>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	43db      	mvns	r3, r3
 800574a:	401a      	ands	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005750:	f7ff fa36 	bl	8004bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4b07      	ldr	r3, [pc, #28]	; (8005778 <vPortFree+0xb0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4413      	add	r3, r2
 800575e:	4a06      	ldr	r2, [pc, #24]	; (8005778 <vPortFree+0xb0>)
 8005760:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005762:	6938      	ldr	r0, [r7, #16]
 8005764:	f000 f86c 	bl	8005840 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005768:	f7ff fa38 	bl	8004bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800576c:	bf00      	nop
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	2000120c 	.word	0x2000120c
 8005778:	20001204 	.word	0x20001204

0800577c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005782:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005786:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005788:	4b27      	ldr	r3, [pc, #156]	; (8005828 <prvHeapInit+0xac>)
 800578a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3307      	adds	r3, #7
 800579a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0307 	bic.w	r3, r3, #7
 80057a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <prvHeapInit+0xac>)
 80057ac:	4413      	add	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057b4:	4a1d      	ldr	r2, [pc, #116]	; (800582c <prvHeapInit+0xb0>)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057ba:	4b1c      	ldr	r3, [pc, #112]	; (800582c <prvHeapInit+0xb0>)
 80057bc:	2200      	movs	r2, #0
 80057be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	4413      	add	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057c8:	2208      	movs	r2, #8
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a15      	ldr	r2, [pc, #84]	; (8005830 <prvHeapInit+0xb4>)
 80057dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057de:	4b14      	ldr	r3, [pc, #80]	; (8005830 <prvHeapInit+0xb4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057e6:	4b12      	ldr	r3, [pc, #72]	; (8005830 <prvHeapInit+0xb4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <prvHeapInit+0xb4>)
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <prvHeapInit+0xb8>)
 800580a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a09      	ldr	r2, [pc, #36]	; (8005838 <prvHeapInit+0xbc>)
 8005812:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005814:	4b09      	ldr	r3, [pc, #36]	; (800583c <prvHeapInit+0xc0>)
 8005816:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	200005f8 	.word	0x200005f8
 800582c:	200011f8 	.word	0x200011f8
 8005830:	20001200 	.word	0x20001200
 8005834:	20001208 	.word	0x20001208
 8005838:	20001204 	.word	0x20001204
 800583c:	2000120c 	.word	0x2000120c

08005840 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005848:	4b27      	ldr	r3, [pc, #156]	; (80058e8 <prvInsertBlockIntoFreeList+0xa8>)
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e002      	b.n	8005854 <prvInsertBlockIntoFreeList+0x14>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d8f7      	bhi.n	800584e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4413      	add	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d108      	bne.n	8005882 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	441a      	add	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d118      	bne.n	80058c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <prvInsertBlockIntoFreeList+0xac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d00d      	beq.n	80058be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	441a      	add	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e008      	b.n	80058d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <prvInsertBlockIntoFreeList+0xac>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e003      	b.n	80058d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d002      	beq.n	80058de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr
 80058e8:	200011f8 	.word	0x200011f8
 80058ec:	20001200 	.word	0x20001200

080058f0 <memset>:
 80058f0:	4603      	mov	r3, r0
 80058f2:	4402      	add	r2, r0
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	f803 1b01 	strb.w	r1, [r3], #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <_reclaim_reent>:
 8005900:	4b29      	ldr	r3, [pc, #164]	; (80059a8 <_reclaim_reent+0xa8>)
 8005902:	b570      	push	{r4, r5, r6, lr}
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4604      	mov	r4, r0
 8005908:	4283      	cmp	r3, r0
 800590a:	d04b      	beq.n	80059a4 <_reclaim_reent+0xa4>
 800590c:	69c3      	ldr	r3, [r0, #28]
 800590e:	b143      	cbz	r3, 8005922 <_reclaim_reent+0x22>
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d144      	bne.n	80059a0 <_reclaim_reent+0xa0>
 8005916:	69e3      	ldr	r3, [r4, #28]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	b111      	cbz	r1, 8005922 <_reclaim_reent+0x22>
 800591c:	4620      	mov	r0, r4
 800591e:	f000 f86b 	bl	80059f8 <_free_r>
 8005922:	6961      	ldr	r1, [r4, #20]
 8005924:	b111      	cbz	r1, 800592c <_reclaim_reent+0x2c>
 8005926:	4620      	mov	r0, r4
 8005928:	f000 f866 	bl	80059f8 <_free_r>
 800592c:	69e1      	ldr	r1, [r4, #28]
 800592e:	b111      	cbz	r1, 8005936 <_reclaim_reent+0x36>
 8005930:	4620      	mov	r0, r4
 8005932:	f000 f861 	bl	80059f8 <_free_r>
 8005936:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005938:	b111      	cbz	r1, 8005940 <_reclaim_reent+0x40>
 800593a:	4620      	mov	r0, r4
 800593c:	f000 f85c 	bl	80059f8 <_free_r>
 8005940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005942:	b111      	cbz	r1, 800594a <_reclaim_reent+0x4a>
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f857 	bl	80059f8 <_free_r>
 800594a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800594c:	b111      	cbz	r1, 8005954 <_reclaim_reent+0x54>
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f852 	bl	80059f8 <_free_r>
 8005954:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005956:	b111      	cbz	r1, 800595e <_reclaim_reent+0x5e>
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f84d 	bl	80059f8 <_free_r>
 800595e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005960:	b111      	cbz	r1, 8005968 <_reclaim_reent+0x68>
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f848 	bl	80059f8 <_free_r>
 8005968:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800596a:	b111      	cbz	r1, 8005972 <_reclaim_reent+0x72>
 800596c:	4620      	mov	r0, r4
 800596e:	f000 f843 	bl	80059f8 <_free_r>
 8005972:	6a23      	ldr	r3, [r4, #32]
 8005974:	b1b3      	cbz	r3, 80059a4 <_reclaim_reent+0xa4>
 8005976:	4620      	mov	r0, r4
 8005978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800597c:	4718      	bx	r3
 800597e:	5949      	ldr	r1, [r1, r5]
 8005980:	b941      	cbnz	r1, 8005994 <_reclaim_reent+0x94>
 8005982:	3504      	adds	r5, #4
 8005984:	69e3      	ldr	r3, [r4, #28]
 8005986:	2d80      	cmp	r5, #128	; 0x80
 8005988:	68d9      	ldr	r1, [r3, #12]
 800598a:	d1f8      	bne.n	800597e <_reclaim_reent+0x7e>
 800598c:	4620      	mov	r0, r4
 800598e:	f000 f833 	bl	80059f8 <_free_r>
 8005992:	e7c0      	b.n	8005916 <_reclaim_reent+0x16>
 8005994:	680e      	ldr	r6, [r1, #0]
 8005996:	4620      	mov	r0, r4
 8005998:	f000 f82e 	bl	80059f8 <_free_r>
 800599c:	4631      	mov	r1, r6
 800599e:	e7ef      	b.n	8005980 <_reclaim_reent+0x80>
 80059a0:	2500      	movs	r5, #0
 80059a2:	e7ef      	b.n	8005984 <_reclaim_reent+0x84>
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
 80059a6:	bf00      	nop
 80059a8:	20000078 	.word	0x20000078

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	2600      	movs	r6, #0
 80059b0:	4d0c      	ldr	r5, [pc, #48]	; (80059e4 <__libc_init_array+0x38>)
 80059b2:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b4:	1b64      	subs	r4, r4, r5
 80059b6:	10a4      	asrs	r4, r4, #2
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	f000 f870 	bl	8005aa0 <_init>
 80059c0:	2600      	movs	r6, #0
 80059c2:	4d0a      	ldr	r5, [pc, #40]	; (80059ec <__libc_init_array+0x40>)
 80059c4:	4c0a      	ldr	r4, [pc, #40]	; (80059f0 <__libc_init_array+0x44>)
 80059c6:	1b64      	subs	r4, r4, r5
 80059c8:	10a4      	asrs	r4, r4, #2
 80059ca:	42a6      	cmp	r6, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d4:	4798      	blx	r3
 80059d6:	3601      	adds	r6, #1
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	4798      	blx	r3
 80059e0:	3601      	adds	r6, #1
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	08005b3c 	.word	0x08005b3c
 80059e8:	08005b3c 	.word	0x08005b3c
 80059ec:	08005b3c 	.word	0x08005b3c
 80059f0:	08005b40 	.word	0x08005b40

080059f4 <__retarget_lock_acquire_recursive>:
 80059f4:	4770      	bx	lr

080059f6 <__retarget_lock_release_recursive>:
 80059f6:	4770      	bx	lr

080059f8 <_free_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4605      	mov	r5, r0
 80059fc:	2900      	cmp	r1, #0
 80059fe:	d040      	beq.n	8005a82 <_free_r+0x8a>
 8005a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a04:	1f0c      	subs	r4, r1, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bfb8      	it	lt
 8005a0a:	18e4      	addlt	r4, r4, r3
 8005a0c:	f000 f83c 	bl	8005a88 <__malloc_lock>
 8005a10:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <_free_r+0x8c>)
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	b933      	cbnz	r3, 8005a24 <_free_r+0x2c>
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	6014      	str	r4, [r2, #0]
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a20:	f000 b838 	b.w	8005a94 <__malloc_unlock>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d908      	bls.n	8005a3a <_free_r+0x42>
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	1821      	adds	r1, r4, r0
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	bf01      	itttt	eq
 8005a30:	6819      	ldreq	r1, [r3, #0]
 8005a32:	685b      	ldreq	r3, [r3, #4]
 8005a34:	1809      	addeq	r1, r1, r0
 8005a36:	6021      	streq	r1, [r4, #0]
 8005a38:	e7ed      	b.n	8005a16 <_free_r+0x1e>
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	b10b      	cbz	r3, 8005a44 <_free_r+0x4c>
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d9fa      	bls.n	8005a3a <_free_r+0x42>
 8005a44:	6811      	ldr	r1, [r2, #0]
 8005a46:	1850      	adds	r0, r2, r1
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d10b      	bne.n	8005a64 <_free_r+0x6c>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	4401      	add	r1, r0
 8005a50:	1850      	adds	r0, r2, r1
 8005a52:	4283      	cmp	r3, r0
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	d1e0      	bne.n	8005a1a <_free_r+0x22>
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4408      	add	r0, r1
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	6053      	str	r3, [r2, #4]
 8005a62:	e7da      	b.n	8005a1a <_free_r+0x22>
 8005a64:	d902      	bls.n	8005a6c <_free_r+0x74>
 8005a66:	230c      	movs	r3, #12
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	e7d6      	b.n	8005a1a <_free_r+0x22>
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	1821      	adds	r1, r4, r0
 8005a70:	428b      	cmp	r3, r1
 8005a72:	bf01      	itttt	eq
 8005a74:	6819      	ldreq	r1, [r3, #0]
 8005a76:	685b      	ldreq	r3, [r3, #4]
 8005a78:	1809      	addeq	r1, r1, r0
 8005a7a:	6021      	streq	r1, [r4, #0]
 8005a7c:	6063      	str	r3, [r4, #4]
 8005a7e:	6054      	str	r4, [r2, #4]
 8005a80:	e7cb      	b.n	8005a1a <_free_r+0x22>
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	2000134c 	.word	0x2000134c

08005a88 <__malloc_lock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <__malloc_lock+0x8>)
 8005a8a:	f7ff bfb3 	b.w	80059f4 <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	20001348 	.word	0x20001348

08005a94 <__malloc_unlock>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__malloc_unlock+0x8>)
 8005a96:	f7ff bfae 	b.w	80059f6 <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20001348 	.word	0x20001348

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
